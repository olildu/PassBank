import re
import pyrebase
import customtkinter
import os
import requests
import random
import string
import base64
import pwnedpasswords
import concurrent.futures
import time
from PIL import Image, ImageGrab, ImageFilter
from tkinter import PhotoImage, Frame


folder_path = os.path.join(os.getenv('APPDATA'), 'PassBank')

if os.path.exists(folder_path) and os.path.isdir(folder_path):
    pass
else:
    os.mkdir(folder_path)

    data = {
        "add_password.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8bIg+NkE8AAAIkSURBVFjD7VWxLzNhHH5+10rapFJEook0l4ZEUFKjRSQiZ/EPsBSDHZMJAxMjixCbxGCwGCTCIiGMbCYGBqkQ6TX1Poa37fX066eJ3vDlu2e5u+d+eZ/n+d3vfQ/w4cPH/w4BAHJlBRwc9EYhnwfX1sQ4P69aQ35+0lNsb1fTDuqLYWgno6P1jW9ZkIWF0vrVDRS6ZZycAABVMAiZnARDIcjenkg263RrZARIpYD9fZHHR4fv6gLHx4GzMzGurjQXj9fks9io0rNaXXXat7NTLu7w9/dkIKD5piby5UXzuRzZ3a35qanva3xHldakUo67svtyHokEEI3qGtMEmps139AAJpPuhH19VLOzVP39NXbAsqje30nbJicmnLr2dp2cJLe2HN4wyKMjzV9fU0UiZEcHeXlZOZDHx1RtbX81oLlwmCoSqTQbCJAtLX8MolpbSREyFiOfnqrvittbqsZGoHQOFMR5cFDT0PwE6ekBenuLloGZGaCzE1hcdIqWl0WWlgolmYw3+//jg9zc1N2JRsnDQ1IpkqS6u3M6oJJJQE/u79PH48D6uk62sSHG/Lz7M52eQoaHAdsWCYXqoukSYCzm3qrptObDYXJujnx70+8eHuou7qS8uXFM2DaVaZJjY7Uez3UwYFnu/0s+7xZ/fSUTCc8MAAA5PU1ms5WD+fxMNTRUrBNPTSjThKTTwMAAmMtBLi6A3V2RTMbT9D58+Pin8AUZNnN8IS8I8AAAAABJRU5ErkJggg==",
        "breach.png": "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",
        "circle.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIFg0gHXzNGTAAAANoSURBVFjD5ZfLaxNxEMfnlyhaNVofQU0PRi1UpIXS1oMIaZGitjYXaf8AEZH+Bd7EuxdBLP4Tio9Ib42efGHRljbaIrbWPqgeBAUp4nw8TJNtzG6yifWiAwv7mPnOzHdmd2ZF/ndxYRXBOaG9XVw6LdLVJZJICPv3G8rCgsjiokg2K2Qy4l6+dA7WJUJwDk2n4fVrwormcujAALjQCQY4P3gQnj/3kOfm4OZN6O2FpiY0FkO3bYOmJujpgRs3YHbW03/2DJLJGp2fOAFLSwa0vAyXL6ObNlW2i0TQgQH03Tuz/fwZTp6s0nlnJ6ysGMDwMNTXV52AxmJw/75hrKxAZ2d42vXTJzO8dQui0ZoozLPB9eseixXKAc55NR8e/hPnxUHcvWvN+fRp2ca0zgWYn6+F9mDcWMwaGND+/uDsNZezAAYH/YH27EE3bCjrSFta/PEvXDDsyUlfFtBjx0zh40d040Zf53z/DmNjaDxe+jweh/Fxw2htLQ0gGoWZGWOhoyN/P1LQcH19dvLggYv8+FGaw5cvItPTIi0t4kZG1gaBxuPiRkZEmptFpqZEZmZ+t3bu50+Re/fs4uxZH4oeP7bo0ulgitdmOT6OxuNF9zSXg0Qi2P70adPLZn0CmJ424CNHpIyUBFE4n5yEffvK2nLokOlOTfkAf/tm0e3YIRXEghgbK/r25wdT2QA2bwZV+Po1f29ND6xOLxdmgNQ66Zyzw8c+dAnYvRtevVr/EvDoUcUmZOdOdHTUQCYm0L17q2vCU6fKNOHVqwY8NOTvvK4OffHCdN68WZttcWO+fQu7dvlj5OfClSs+0XV0FGa+34eIo0c9B6VZFgdx/HipfTQK79/b8/Z2n+icszoCeumSfwatrbB1a3CJ6uqgrc3/2fnzhdIFDSS0v9/7HFd+HcOKbU0fPhj2uXPBijhnaxRAJgORSBV+gjH19m1j9smTinsiJJO2PIDteLUHYc6vXSssJHrgQEjKUilvJctk0O3ba6P9zp3CSqapVJUAqZTHxNwcevFiuV3AyzoatYZbHb0sL1ft3ANLJm2NysvsrJWlpwdtbIQtW+w4fBjOnLH3PP+qrdY8LO3l2eju/ls/JtX9mklbm0hfn9DVJS6REBoaDGV+XlhYEJfNijx8KDI6um6/Zv+8/AKJTxS0ae2z8AAAAABJRU5ErkJggg==",
        "clock.png": "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",
        "copy.png": "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",
        "copy2.png": "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",
        "copy_pass.png": "iVBORw0KGgoAAAANSUhEUgAAACwAAAAsCAYAAAAehFoBAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAAXNSR0IArs4c6QAACdhJREFUWEfVmXdYU+cawN8MhISESCIrYGQIMiRsUGQFELEXqYKKUUaroKBe0drWcauiTy9aq+KqtVi0KEsEBUdlSVFRrhUFBI2gBQ2EKlNW2KHPd1qRQBhx3/fhD/Kcc97v973nXd97cPB/Jri3yCvDZGqr4fF9qgAE0t96e9tFItyz6uryPwGg+22s9brAeAqFwpCRIeupaky0IxLlnBh0mqkClSZPlicRZIhEwOPx0NvbC53dXb2tza1tL5qaCpubmnOqq57kdncLy1pbW+sBQCTtJqQGVlJSosiSaT40Gn0uU4053dragqGpyYKenh7oaO+A7p4e7H8c4AD9ycjIANoAiUyC3p4eKC7h1d+9U5AnqOZfbmtpiGloaGiWBloaYIq2EXuOAokWqqujPdXB3lZeUVER7twtgAe8UmhpaYGuri7o6uoGkUgEfX19gMPhgEgkYtBycrLAYNDB3NQE9PX1gPewtP3q1dx7fwqe7efx8i8CQOtYwMcErKw8UYc2nh6qp6+3YqYLZxwCuJ1/FwoK72HWlFZoCgpgbW0BpiZsePKU33nuXMpPz6qrDzx/zi8fTddowHh1TV220gS1YxZmbBNPz09kUlIvQknJAxAK20fTPeJ1ZH06XRFsrC3B2sqiOzbuTOHtgttBgoqyEhStwz08EjCexdLj0CYwDnrP/dRQSWkCxCecgcbGF28EKulhExNjcHPlQNaVHN61nJw1fP6j7OECclhgDQ0tNkOFGTfP08OQQCTgLlxMg7a2trcO+1KhsrISLOYu6LtxI4+X+Vv2YkFFWZGkxSQCI59lsrQS5nrOtiTgCZCQmPzOQAcqnsCgg+8SH8jJuXE7MyONW1NT+cfghSUBU3T1TMIdHO2DLcxNZaJPxkHrMJZFGWASayJQFagog0klKEfz+VXwoqlJ7DkmUw0+81/cHXns+NGrv6VtHpw9hqyjo2e2SH+K7i/LlvnJ7os4PKzPamioQ9jWjTDNxkoq0IE3NzQ0wo8/RUF8QpKYDktLM3DmOHbvP3zIv+DWzYSBF8WA6XS6AkvLMCPAn2tTXPwAbv2eLxEGWXZlSCD4LPSCCxcuQ2nZI+gT9UkFLkeSgwXecwH5rsenC6Gp6VX9kJUdB4u5C4HHe3jrXHK828DiMhAYr87SDbK1td3HcbQnn4iOkZi6EKyKshJs2rgeNCexYMXKtVjRGIugnN3e3tFfVLg+82HzpvXA9V0GxcX3xVSoM9Ug4LMlwu1hO9aWPSyOepk1+oEpFIrSJG3D40GBn3sUFt7DCsNg0VBngte8OaCnNxmMDA2ARCLB7fw70Ns7tpago6MTrl7LhYzMbKzP8PbyhO3bNoNfwHKsCA0W9Abr6uounIg6urSlpaUOXe8HVlRUnmE1zTbV35fL+H7vwSEVDFn26JEIMDCYAnW19Vj5lUpwAPLy8lhfsXvPAUhLz8I2PxIwCkCuz/zGsG1bPfn88lwxYH1ji43zPD13dnR0YBYYLDraWpB6Lh5i4hLhhyORWM8gjeBwAJN1dCBibzjcuVsIO77dDbPdXUcEJpNI4O/PhfT0zA0XzyftFgNmm01PW7M6eNaZ5FSoqhIMYTE1ZUNMdCSE7dgJScmp0rD234tcKD4mCp7yK2Fr2H/B1cVpRGBUvr3meUJdXX3WkcN7Zw4ElnFy+YTvs8Bb9VRsgljEvlzNzJQNp6IjYdv2cEg+e/71gOXkIC72OFTyK2HLGIDRIlaW5qA/Rbdm44Yv1AGgB/NhJlObZWljU8JxsqfGxp3GInmwfChgFmsiCs6WbVt2GAoEj6swYA0NLWs7R062uSlbHvkoiuCPBZhCkYevv1rXtnZNqFNlZXn+P8CTnTguzpcMDfXJsXGJWJ78WIAJBAJ8t3O7MCgw5F9VVY9z+oGdZ7pe0tfTJcfGJ0r0zw/lEijw9u0JFy79fPlAYC1rJ2fXbCMjA/mPzcLodPPtjm/aQoJXvnIJFHQz7O1KrK0tqQi4u3tojv1QFkankn+vXtGyLvSrV0EHAMTZHl6V7m4zVVHQCYXCj8aHJ+tog/ssl7qQ4EC1/rSG6KbZuV5eGuDrjvIwavveR9DNdOVA2NZN4BuwHFD/IkkcHWbAJJZG3oavv7AVq3RGxtM2rFoVuAuV5UePhjT68DZdQiAQwK7vIsDPjwtLuAvAc+4iKK94MoQXZQiujzf8Uf7kPz9HHgoXA0bND9fXL1VVRZlxOvHsO7WwmpoK1kDR6eOh5D4PVq5eL3FcQKVSIHBZQOsPhyI8CgoKrooBo/ZyqrH18bXrVnkcPHgUmprFBzJv08LjaQpw/wEPSksfw9mU8yAQoNHbUDE0mALus1zTN238MqCmpua5GDAA4Fks3cCgFUER9fUN5KwrOWIFxNjYCGtcwnfuhfjTSRKLy2gNhoICFetHKiurIHzXPqipqR12EINmc8ErlnbmXru+OT7+5P4hDTxaDB2RTMynZ/j5cm1+iY6F+vqGfobxNBqcT0mA2to6OJOcgs3RpBEcHgf6U/TAw8Md4uOT4Gjk8RGnRhbmpuDkaFf05fpQh+GOSNj6BlOtfHwWeke3tbXJ/no5Q4wJBUBIcCA2sXldyfvf7xC2fScIqiW7AdJLpVAgIGCJ6Mr17MCkmJgTA9eSeMw3NrEO3/LNpuCU85dkioqKxdhoNBqwWBpAJBCkYkbdSXNzM3a0H2keh0rxIp/5vVSq3MmwrVvWNTY2is0BJI4TVFRY2rZ2DglzPGZZnYo9jfna+xJzMxNwcXbg7fl+l3dJSQlv8LojjKr0jZ1dHeMd7G0NT8Yk4Ab687uCt7QwAwd72/KDR36cX5SfVyBpnVGHgRwXzgEH+xlGCYlnoXoEv3uTTSA3QGnT2cm+4tixE8E3b2ZnST0M/AcAr66lZ+xs5xDpPtvNNCMrexyaH3R2dr0Jn9izKMA8PNx7NdTVyiL27V9SVJSPavRrjVv7FauqamoaGhms9fPzDalvaBiXkXFlxCgfy25QnkVWtbObLhK2NkVHRf28u7i4+OFoz0ozw6OYmdl6mFuah3Kc7I0rKp7KX8u9CS8aX0B7x9/TnNEE9QZkMgnQXI7jaN8pJyf3MD0tMyIz80LK4GwwnC5pgDEd6KMMg6E+3232LC9Tk6l2bW1CRVRMULp6XlOLdXrt7e3YoAUNX9ArR3lbXV0NA1VWmtCKw+NvpmekZWSlXz72Lj/KDNw0nkql0hUVlfTZbIvpWtqabkymKltFRZlEU6Dh5SlkzBC9vaK+ppZmUXNTU2djQ2NZBZ//a17e9dxnVVWltbW1Ne/ls9cIr53IZOqoiQh9qsQ+PBnd14MTCQki/J8CweNn6OdoLjOW61K7xFiUvst7/gI37ZppE11+WQAAAABJRU5ErkJggg==",
        "cross.png": "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",
        "delete.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cJAhMuNSNY+0YAAAGySURBVFjD3VexTgJBFJy3GBMvFiRQyDU2JHRCjwWFH0DCH/AR/IE/YeG3WEhPQmsr14B6yR0eCdxY0Ki3u7d3HBqdct/Lm9l5c5esoADIfh/0fWuTLBYi02mRuY7kjQa52zEX2y3ZaLjOVe4KPA9QDv212r7XDSfOAiSKgLs7994/Avl+wPT6GjIeg+fn1TJFEXh/L+rx0dhDtlpkHOcHrSzimLy4+Mz5NVS8ugLcA1Qcngd2u2YBUqsdj1zP8SUDTJtNoNc7roLZTNRyefSLHgSmNzfVB3Aw0HHp/2zy+lr9rVYrdwF4eTFPCkNgs8meJ8m+ZkKBS5H1utHJtN0mR6NsYTgkOx3zCs7OCjgQhsBupy1JEABBkFUdBKDmHACwXou8vzsLECGBtzdny3Kh37/FAaDQzvLAUgJsQSwK86yfcaDcCip0QH47A+VWUGUG/qYD/+kzLBVCGhygUqDmfSBKQUzvBrOblneBwQG5vQUuL7OFyQR4ftaLNjsgpgLp+8aBhUCCp6eitltd9QcyEIYmcqsAkSQBnp4OFzCf26piK5K+D/b7pbklTYGHB7F8BR+5DMqGtGb3AgAAAABJRU5ErkJggg==",
        "down-arrow.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIChEILH+9BZMAAACRSURBVFjD7ZQ5DoQwDAD5BBH8/ynQORUu+I1nC4o9hBDGgWY9VZp4JpGSrkuSJEl2gHnGRLBSwrOsFKgVpskRUCsAqEYiNrkqACbi2Nj3sCzbxnWFcfTLf2cMQ3DA+YiwPBLRTH4lorncE3Gb/EzE7fKjiMfk74iPt43q17rBx+W/iadOvnsTJtLqy06SJPlfXnvGQe768t2aAAAAAElFTkSuQmCC",
        "generate.png": "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",
        "generate_password.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8xFkFSqNIAAAJmSURBVFjD7Za7S2NBFIfP3ASMRUpDiKSw8NlERCGQQgsR1DoiYqNWPqpYBAyilYKF/4KdUWJaCwtBgoXEJoigtoIYRNBEEgnJfFsMUcHVjY+7sKw/uNyZc+bM+ebMvcOI/Oh/l/pMENTXC93dIl6vsVxfizo+VqpYtJUWHA5YWoJ8nlfK5WBxERwOm5IrBVtbUCrB8jLa73/yab8folEoFGBzE9SnKvs+gB4fB61haAjtdkMsBvG4eRYWjG142IwZG7OhAqkUxONopxOdTkM2i04m0ckkZLNwdIR2OmF7Gw4ObADI5WByEkIhs+etrc++tjZjC4VgagpyuVrntWpHcLuFfF7w+URElDo/r3qUOjszJD6fkMuJuN02ANgjZy2DoLPTtILBJ5sOh1+PfOkPBJSVyXyZEB0IQKXCh1WpoAOBP81fwxa0tIhYlvqgRCzLxH4ZwF7ZB0AiIery8uvz6HAY4KnP4SGkUqY9Pw+3t9De/hcroLVIFQgErZ/henvRu7tQLKIfHtB7e9DX960VeHMcExNQLpuks7PouTnY34dyGUZHbQWApiYoFNArK6YfDII5E9Bra/D4CNW7gy0A0ShcXVXvApBIQCJh4uvqjC8W+11sDSfhxYWI1m9BmH++uVk4PVWWObCewUAppeDkRKSj41MAyspk0F1d7x8q+bwoj8dkHRkRiUSMfX3dvBsbzUJsErq/HwA9MGBWHomAgYDBwZc++yDY2YG7O5ieRns84PXCzAzc38PGhq3JDYDLBaur5ouvqlQyNpfrrbhvvzyiGxpE9fSYTjqtrJsb21f/o39avwCfHg4p0O+NCQAAAABJRU5ErkJggg==",
        "heart.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8yKzIXtwAAAAPCSURBVFjD7ZZNSNRbGMafM45fpTVlCYNRgkhEQkJltIhsbOM0FSFYbooiiqIgiSJRImgRQhRBi4o0KHdJgaJIQYwFTkKLvsBiQjTSPkhk6INW53cXh+4/cWb0er13cW/vaub/Pud5nvc9n9Lv+L+HSZXA+v0yW7dKoZBUVCR9+ya9eSN6eoyvvz/pGEpKpEhEKi+X5s8X4+NSLCbdvm18iUSyMb7kRBs3Sq9fS/X1YnhYamsT9+5JOTkyra3w7Bns3Yv1+x0+FIKuLikWE2Vl0qNHUlub9PixTFWVTDyOPXhwWi2Bmhr4+BHC4eR5YyAcht5eZ6SjAwYH4ehRmDMnVWfgyRNobp5CfPlyGBvDbtgwPbM7dkBDAzY7e2psQQG8egV1dWlAd+9CY+O0WjWDgPJyePcOm5WVwmEiAQsWzIw8GIT+fvD50uN6emDbtp//PTBr1kgvXxozPj6z+sJhqaJCWrcuPe7Bg18xngETCEijo+ndz50LL15AMDg5GQ67neNVl5zk/XupoCBJB75/l/Lz07s/ckQqLZX27JnAabOyZCorpfp6afv2tBRm3jzx9WuS6oqL3fYzSQ8nbH4+jIxAXR3E47/i3Dnw8CH4fDA6ii0thWPH4PjxyTwtLbBvXxIDxmAHBrDJ5xDb1ASXL7vfAwNQWenlzp+HU6ccz9WrcOsWDA+7gkpKPFxmpivCm0L/n50xANevuzbu2jXRXCAgHT4srV3rvrS0SPv3S9GoGxwOi507Xa6jQ+rsdEfyihXSjRvulJSkpUuljAxp926QpETCwNOnLiFJfn/KdcCFC8bnWootLJSJx6XiYikQkKJRY5Yt89ZDJGLMnTvYzEyZAwekvDwpN1dqahIXL8p8/uw4x8YM5OZKOTme0JYtUmOjTCgk/fjhdWji9oT2dqm3V7JWKisz5tChdGsPLl0SwaDx1dZqqoArV+DmzfSY6mp4/hy6urCRSHpsbS0MDWEXLZpS3LUxOxv6+uDkydSkGRluoX35kuoScrj16+HTJ1i9elri3sCFC12FqVsLZ85gu7tTF7JqFXz4ANXVf0ncEwgG3ZV7+nTyfG4utrAweW7TJrcNa2pmJO4RBQIQjUJr688HyNRjampgdNQ9bGYhICcH2tuhszPdbekeKw0NMDQEK1fOirhH7vNBczMMDmIrKibl7eLF2O5ubCwGRUWzKj7RSDgMIyPYEycgI8N9q6qCt2/h3LnpTtPfM2GXLMHevw99fdhr19we37z5HxeebCQSgbNnsXl5/7r47/jPxB+6iVHVHAoDtQAAAABJRU5ErkJggg==",
        "Logo.png": "",
        "new.png": "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",
        "new1.png": "",
        "new3.png": "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",
        "note.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cICRMzC/c0JEAAAAGsSURBVFjD5VcxisJQEH0TooggIlgqFoK1lnbaCoKFeADRWsgFxAPY2ngDsdEDiG0KY6toI2IXCFqIoGS2iLCLMcZsks2y+5oPmcnMy8v/M/OB/w6yMjCXy0A+D4TD7lJcr8ByCcznRMy27sxErI9G7DnGY2YyfbDpAevVKmg6BQ4HYDgELhd3CkQiQKsFpFJArUY0mdgo0O0ajCXJXeKvMTsdI2av92gTzO6iaKzns1cEwPdYHAq9QeBnETgB0Ykz68kkMBgAicRzD00D2m0SjkdfCADZLKheB8iifjCD+31Aln0hQIIss57LgeLx5/lPJxI2GycxHSoAkLDdOn3nFQLfhIETcHgKMhlgNgNZnALWNFClQrRe+6cAveiOFA6D3+h431WAhN0OSKcdk/ZUAY8ROAHHdYD1TAaUTD43qqrxm3wiwFwoAIuFZSkmZtaLRRJ8KsXg/R4Yj183o9XKNwVIUFWg0XBE2gaBb8LfSOB2M9Zo1LMsdJ8F6Xp9NJn3ACuKMaxLEnMs5n4sF0Vws2nEVBRb98AvJp9ESiWgUPDmaqYoRPO5uzh/FR/hOD3y2cy3CwAAAABJRU5ErkJggg==",
        "notebook.png": "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",
        "notes.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cICRMsMItlw/oAAAGuSURBVFjD7VY7TsNAFJxdW1RIUFmcwCUoVIGCK4RYwog+1FHOEW6QNKmwaLgCSFGoAhWSaTgAlQs3EGeHIojIlr1x/JELmMp+b9cz772x14AGVJZF+j7p+1SWFctxPCaDgOx04vFulwwCqtEIZUE6Dn/hOPFcFK3it7fxuOet4lGUh0PqFRhG6jUA4Oc+GaeUsfx2FUtJDgbk6+u6wpJQYUg+PJCnp5sFqJubSkhTEUXkyYmm+oMDcrmsTwBJ9fSk8UCrBUi9J8pCHB9nC+Dubq3kAICdHU0HmkHjAszNSz4+wOkUWC5T08K2gaOjGgWcnQn59paVJaUEnp+LisgxAiGqWVO4A4+PVJoRwLaBw8MaBVgWRPwgqhKNvwU5BPR6gGmKLQGYJnh9nVsJ1cVF+vd7b69odeT+fvJxyTWbPSAmE9LzwCwTZu0zDODqqnwHKkaSt3ET5ngN7++Bu7tiI7i8BM7Py42gZhPmGIHrktv/YK72uG7+DX/VhP8C1gJEGNZP9/Wl6cDLS/aZXxXmc22aajisz/+LBdlu6wVQSrLfJ9/fqyP+/CRnsyzyb4IVfUP56IxdAAAAAElFTkSuQmCC",
        "password.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgEAQAAACJ4248AAAAIGNIUk0AAHomAACAhAAA+gAAAIDoAAB1MAAA6mAAADqYAAAXcJy6UTwAAAACYktHRAAAqo0jMgAAAAlwSFlzAAAAYAAAAGAA8GtCzwAAAAd0SU1FB+cIBA8TNDOArxYAAAI4SURBVFjD7ZQ9SCtBFIXPbDY/oKmMAXsrI2hlpTamWYKN2NpoH1ErITY2thJRC62F+INtWrHUYgWDWlgoCHaxCGYh2TmvmBcmmx+MukYeLwcGNmfu3vvtnTsBeurpf5cAAHJgAJiYAPv7f66S6wKFghAPDx6fcnqaLBbZFUlJbm56AWjb3SleByGHh2v1TWB09OdO+OkJPD6GKBQAwwDGx4FkEiIaretAI+DVFek4XvP5Wa16OY6KbSXXJTc2KINByliMtCzSsihjsSZG/VK5TJlOU4ZCZCpFXl8rf2+PHBlRa39fQ6ZSlKEQZTpNlstegOVlynCY3NkhKxXtVypkNksZDrcAeH+njMe1n88rf3FRe0tLysvn9RDH416AiwtSCMqzs/ZzcHJSe9/QvXAcCNNUSaNR4O1N+aUSGYmQkQhQKimvWFQxAEQwCDiOzrO7CyaTEHNz6vfrK7CyAqyuqmcAmJ8nZ2bazEAm03ze5+dqNcyFzGS8XrVKDg2R2azONznpvfI1bW+3BviW1tZUzlxOe4GAPsJAQPu53F/z5cWf4re3Kt/hoerER6pWKQ8OQK6v+wNweqoAOimuIUwhtrbIx0fAssC+vi//54ijI/WgW66vmm1DCAGMjXk3WsR+V81fadukYah1c9O4a/pO0CTTRG0QRfMXdwEgkYCYnQWEABKJXwAAgIWFdjvC71Ik+Zl44zPBnRHc33cefHfnfwfk4CDE1BT4wRUTrgteXvregJ56+uf0B4AZQKiYeww7AAAAAElFTkSuQmCC",
        "shield.png": "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",
        "up-arrow.png": "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAOFJREFUWEftlDsKwkAURc+tXIGuQiuxtFBL16udnWVKC3eguAEbYSQwgRDymTdTpHmpAvnc887wrpj50sz5OIAbcANuINtACGEFXGKRnSV9ckotCyCEsARuwCaGPoGDpLcVwgwQJ6/D18AjBjb3J6sJE0Bn8nrqI/Br2TCbSAboC5f0qg30PEs+jiSAsfDmzHMhJgFSwksgRgEs4bkQgwA54TkQvQAl4VaIIYAK2MY9N+92C6Juy6YzKkm7blENAdyBBZBdsR2IK/CVtE8CsNZpyfuTa1jy85RvHcANuAE38AfinXgh7zTvzAAAAABJRU5ErkJggg==",
    }

    def save_image(filename, base64_data):
        image_data = base64.b64decode(base64_data)

        output_path = os.path.join(folder_path, filename)

        with open(output_path, 'wb') as image_file:
            image_file.write(image_data)

    for filename, base64_data in data.items():
        save_image(filename, base64_data)


firebaseConfig = {
    "apiKey": "AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc",
    "authDomain": "password-manager-olildu.firebaseapp.com",
    "projectId": "password-manager-olildu",
    "databaseURL": "https://password-manager-olildu-default-rtdb.asia-southeast1.firebasedatabase.app/",
    "storageBucket": "password-manager-olildu.appspot.com",
    "messagingSenderId": "665242184560",
    "appId": "1:665242184560:web:9a2ebda5f21f0cfedffdb5",
    "measurementId": "G-RDXEQS1P07"
}

firebase = pyrebase.initialize_app(firebaseConfig)
db = firebase.database()
auth = firebase.auth()
user = ""
random_password = ""
closed1 = True
closed2 = True


def is_email_format(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def show_login():
    main_page.pack_forget()
    main_page.place_forget()
    login_page.place_forget()
    login_page.place(relx=0.5, rely=0.5, anchor="center")

def create_user():
    email = email_entry_create.get()
    password = password_entry_create.get()
    if email == "" or password == "":
        pass
    else:
        if is_email_format(email):
            email_alerts.place_forget()
            if len(password) <= 7:
                password_alerts.place(x=22, y=263)
            else:
                email_alerts.place_forget()
                password_alerts.place_forget()
                create_user_var = auth.create_user_with_email_and_password(email, password)
                auth.send_email_verification(create_user_var['idToken'])
                go_to_login_page(event="Created")
        else:
            email_alerts.place(x=22, y=186)



def login():
    email = email_entry.get()
    password = password_entry.get()
    if email == "" or password == "":
        pass
    else:
        try:
            def main_code():
                password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000,height=680)
                add_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                add_secure_notes_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                generate_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=680)
                generate_password_main_frame2 = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=720)
                check_password_main_frame = customtkinter.CTkFrame(master=root, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=630)

                left_sidebar = customtkinter.CTkFrame(root, corner_radius=0, width=250)
                left_sidebar.pack(padx=0, pady=0,anchor='w' , fill='y', expand=True)
                left_sidebar.propagate(False)

                categories_frame = customtkinter.CTkFrame(master=left_sidebar, corner_radius=0)
                tools_frame = customtkinter.CTkFrame(master=left_sidebar, corner_radius=0)

                circle_frame = customtkinter.CTkFrame(master=left_sidebar, width=64 ,height=64, corner_radius=50, fg_color="#212121")
                circle_frame.pack(anchor="w")

                circle_frame_image = PhotoImage(file='temp-profile.png')

                circle_frame_image = customtkinter.CTkLabel(master=circle_frame, text="", image=circle_frame_image, fg_color="#212121")
                circle_frame_image.place(relx=0.5, rely=0.5, anchor="center")

                customtkinter.CTkLabel(master=left_sidebar, text="Hi, Ebin Santhosh", fg_color="#212121",font=customtkinter.CTkFont(family="Sans-Seriff", size=20)).place(y=21, x=65)

                line = Frame(root, bg='#4d4d4d', width=250, height=1)
                line.place(y=78, x=0)

                categories = customtkinter.CTkFrame(master=left_sidebar, fg_color="#212121")
                categories.pack(anchor="w",pady=(10,0))

                catergories_header = customtkinter.CTkLabel(master=categories, text="Catergories", fg_color="#212121",  font=customtkinter.CTkFont(family="Roboto", size=15))
                catergories_header.grid(row=0, column=0,padx=10 , pady=10)

                def collapse_function_1(event):
                    global closed1  # Declare closed1 as a global variable
                    if closed1:
                        categories_frame.pack_forget()
                        down_arrow.configure(image=PhotoImage(file=folder_path+r"\up-arrow.png"))
                        closed1 = False
                    else:
                        categories_frame.pack(padx=0, pady=5, anchor='nw', after=categories)
                        down_arrow.configure(image=PhotoImage(file=folder_path+r"\down-arrow.png"))
                        closed1 = True

                def collapse_function_2(event):
                    global closed2  # Declare closed2 as a global variable
                    if closed2:
                        tools_frame.pack_forget()
                        up_arrow.configure(image=PhotoImage(file=folder_path+r"\up-arrow.png"))
                        closed2 = False
                    else:
                        tools_frame.pack(padx=0, pady=5, anchor='nw', after=tools)
                        up_arrow.configure(image=PhotoImage(file=folder_path+r"\down-arrow.png"))
                        closed2 = True

                down_arrow = customtkinter.CTkLabel(master=categories, text="", image=PhotoImage(file=folder_path+r'\down-arrow.png'), fg_color="#212121", cursor="hand2")
                down_arrow.grid(row=0, column=1,padx=110)
                down_arrow.bind("<Button-1>", collapse_function_1)

                categories_frame.pack(padx=0, pady=5, anchor='nw')

                def open_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()

                    password_main_frame.place(x=240,y=10)

                    add_password_frame1 = customtkinter.CTkFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=100)
                    add_password_frame1.place(relx=0.5, rely=0.1, anchor="center")
                    add_password_frame1.propagate(False)

                    customtkinter.CTkLabel(master=add_password_frame1, text="Passwords", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(x=60,y=10)
                    customtkinter.CTkLabel(master=add_password_frame1, text="Title", font=customtkinter.CTkFont(family="Roboto", size=13)).place(x=61,y=55)

                    line = Frame(password_main_frame, bg='#4d4d4d', width=1100, height=1)
                    line.place(y=120, x=70)


                    add_password = customtkinter.CTkButton(master=add_password_frame1, text="Add a password",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    add_password.place(x=800, y=30)
                    add_password.bind("<Button-1>", lambda event, password_saved="": open_add_password(password_saved="", event=""))

                    add_password_frame2 = customtkinter.CTkScrollableFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=980, height=500)
                    add_password_frame2.place(relx=0.5, rely=0.58, anchor="center")

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("passwords").get().val()

                    animated_frame = customtkinter.CTkFrame(root, width=780, height=700, corner_radius=0, fg_color="#282D34")
                    animated_frame.place(x=1400, y=0)
                    main_frame = customtkinter.CTkFrame(animated_frame, width=600, height=600, corner_radius=0, fg_color="#282D34")

                    def click_outside_frame(event):
                        animated_frame.place_forget()
                        
                    def trash(password_delete,event):
                        db.child("users").child(auth.current_user['localId']).child("passwords").child(password_delete).remove()
                        animated_frame.place_forget()
                        import time
                        time.sleep(0.4)
                        open_password(1)
                        
                    def create_main_frame(title_text, username, password, website, color):
                        frame1 = customtkinter.CTkFrame(main_frame, width=80, height=80, corner_radius=8, fg_color=color)
                        frame1.place(relx=0.5, rely=0.1, anchor="center")

                        def copy(event):
                            root.clipboard_clear()
                            root.clipboard_append(password)
                            copy_label.configure(text="Copied")

                        def on_hover(event):
                            copy_pass.place(x=520, y=35)

                        def on_leave(event):
                            copy_pass.place_forget()

                        def on_hover1(event):
                            copy_label.configure(text="Copy")
                            copy_pass.place(x=520, y=35)
                            copy_text_frame.place(x=517, y=5)

                        def on_leave1(event):
                            copy_text_frame.place_forget()
                            copy_pass.place_forget()

                        if len(title_text) == 1:
                            customtkinter.CTkLabel(master=frame1, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                        title1 = customtkinter.CTkLabel(main_frame, text=title_text, font=customtkinter.CTkFont(family="Roboto", size=18))
                        title1.place(relx=0.5, rely=0.21, anchor="center")

                        details_frame = customtkinter.CTkFrame(main_frame, width=600, height=300, fg_color="#383C43")
                        details_frame.place(relx=0.5, rely=0.6, anchor="center")
                        details_frame.propagate(False)

                        email_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        email_frame.pack(pady=(10,0))
                        email_frame.propagate(False)

                        password_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43", border_color="#3E4249", border_width=2)
                        password_frame.pack()
                        password_frame.propagate(False)

                        copy_text_frame = customtkinter.CTkFrame(password_frame, width=50, height=30, fg_color="#383C43",corner_radius=10)
                        copy_text_frame.propagate(False)
                        
                        copy_text_frame_inner = customtkinter.CTkFrame(copy_text_frame, fg_color="#282D34",corner_radius=8)
                        copy_text_frame_inner.pack(fill='both', expand=True)

                        copy_label = customtkinter.CTkLabel(copy_text_frame_inner, text="Copy")
                        copy_label.pack()

                        website_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        website_frame.pack(pady=(0,10))
                        website_frame.propagate(False)

                        email_label = customtkinter.CTkLabel(email_frame, text="Email or Username", font=customtkinter.CTkFont(family="Roboto", size=18))
                        email_label.pack(anchor="w", pady=40, padx=20)

                        email = customtkinter.CTkLabel(email_frame, text=username, font=customtkinter.CTkFont(family="Roboto", size=18))
                        email.place(x=200, y=35)

                        password_label = customtkinter.CTkLabel(password_frame, text="Password", font=customtkinter.CTkFont(family="Roboto", size=18))
                        password_label.pack(anchor="w", pady=40, padx=20)
                        password_label.bind("<Leave>", on_leave)

                        copy_pass = customtkinter.CTkLabel(master=password_frame, text="",image=PhotoImage(file=folder_path+r"\copy_pass.png"), font=customtkinter.CTkFont(family="Roboto", size=20),cursor="hand2")
                        copy_pass.bind("<Button-1>", copy)

                        copy_pass.bind("<Enter>", on_hover1)
                        copy_pass.bind("<Leave>", on_leave1)

                        password_frame.bind("<Enter>", on_hover)
                        password_frame.bind("<Leave>", on_leave)


                        password_text = customtkinter.CTkLabel(password_frame, text="●●●●●●●●●●●●●", font=customtkinter.CTkFont(family="Roboto", size=18))
                        password_text.place(x=200, y=35)

                        password_text.bind("<Enter>", on_hover)
                        password_text.bind("<Leave>", on_leave)
                        
                        website_label = customtkinter.CTkLabel(website_frame, text="Website", font=customtkinter.CTkFont(family="Roboto", size=18))
                        website_label.pack(anchor="w", pady=30, padx=20)

                        website = customtkinter.CTkLabel(website_frame, text="https://www."+ website, font=customtkinter.CTkFont(family="Roboto", size=18))
                        website.place(x=200, y=25)

                        trash_frame = customtkinter.CTkFrame(main_frame, width=160, height=80, corner_radius=8, fg_color="#383C43", cursor="hand2")
                        trash_frame.place(relx=0.38, rely=0.86)
                        trash_frame.propagate(False)
                        trash_frame.bind("<Button-1>", lambda e, password_delete=title_text: trash(password_delete,event=e))

                        trash_image = customtkinter.CTkLabel(master=trash_frame, text="",image=PhotoImage(file=folder_path+r"\delete.png"), font=customtkinter.CTkFont(family="Roboto", size=20))
                        trash_image.place(relx=0.41, rely=0.2)
                        trash_image.bind("<Button-1>", lambda e, password_delete=title_text: trash(password_delete,event=e))
                        
                        trash_label = customtkinter.CTkLabel(master=trash_frame, text="Trash", font=customtkinter.CTkFont(family="Roboto", size=15))
                        trash_label.place(relx=0.38, rely=0.55)
                        trash_label.bind("<Button-1>", lambda e, password_delete=title_text: trash(password_delete,event=e))

                        close = customtkinter.CTkLabel(master=animated_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=20, y=20)
                        close.bind("<Button-1>", click_outside_frame)

                    def animate_frame(x):
                        if x >= 500:
                            animated_frame.place(x=x, y=0)
                            delay = 1  
                            root.after(delay, animate_frame, x - 7) 
                            main_frame.place(relx=0.5, rely=0.5, anchor="center")

                    def frame_click(event, title, username, password, website,color):
                        create_main_frame(title, username, password, website, color)
                        animate_frame(1400)

                    try:
                        for service, service_info in data.items():
                            colors = ["#000080", "#4B0082", "#008080", "#990000", "#355E3B", "#636363", "#9370DB", "#C04000", "#8A9A5B"]
                            random_color = random.choice(colors)

                            frame = customtkinter.CTkFrame(master=add_password_frame2, cursor="hand2")
                            frame.pack(fill="x", pady=10, padx=(50,60))
                            frame.configure(height=100)
                            frame.propagate(False)

                            icon_frame = customtkinter.CTkFrame(master=frame, width=70, height=70, fg_color=random_color)
                            icon_frame.pack(pady=10, padx=20, anchor="w")

                            title_label = customtkinter.CTkLabel(master=frame, text=service_info['title'], font=customtkinter.CTkFont(family="Roboto", size=18))
                            title_label.place(x=110, y=20)

                            title_label1 = customtkinter.CTkLabel(master=frame, text=service_info['username'], font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#95979C")
                            title_label1.place(x=113, y=45)

                            frame.bind("<Button-1>", lambda event,color=icon_frame.cget('fg_color'), title=service_info['title'], username=service_info['username'], password=service_info['password'], website=service_info['website']: frame_click(event, title, username, password, website,color ))

                            a = service_info['title']
                            if len(a) == 1:
                                customtkinter.CTkLabel(master=icon_frame, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                            else:
                                customtkinter.CTkLabel(master=icon_frame, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                    except:
                        print("Truly Empty")
                        image_frame  = customtkinter.CTkFrame(add_password_frame2, width=500, height=500, fg_color="#1A1A1A", bg_color="#1A1A1A")
                        image_frame.pack()

                        customtkinter.CTkLabel(master=add_password_frame2, text="",image=PhotoImage(file=folder_path+r"\box.png")).place(relx=0.35, rely=0.2)
                        customtkinter.CTkLabel(master=add_password_frame2, text="Try adding a password",text_color="#838383", font=customtkinter.CTkFont(family="Rem", size=20)).place(relx=0.38, rely=0.75)


                def open_secure_note(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    add_secure_notes_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()

                    password_main_frame.place(x=240,y=10)

                    add_password_frame1 = customtkinter.CTkFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=1000, height=100)
                    add_password_frame1.place(relx=0.5, rely=0.1, anchor="center")
                    add_password_frame1.propagate(False)

                    customtkinter.CTkLabel(master=add_password_frame1, text="Secure Notes", font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(x=60,y=10)
                    customtkinter.CTkLabel(master=add_password_frame1, text="Title", font=customtkinter.CTkFont(family="Roboto", size=13)).place(x=61,y=55)
                    
                    line = Frame(password_main_frame, bg='#4d4d4d', width=1100, height=1)
                    line.place(y=120, x=70)

                    add_password = customtkinter.CTkButton(master=add_password_frame1, text="Add Secure Note",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    add_password.place(x=800, y=30)
                    add_password.bind("<Button-1>", open_add_secure_note)

                    def animate_frame(x):
                        if x >= 500:
                            animated_frame.place(x=x, y=0)
                            delay = 1  
                            root.after(delay, animate_frame, x - 7) 
                            main_frame.place(relx=0.5, rely=0.5, anchor="center")

                    def frame_click(event, title_text, secure_note):
                        create_main_frame(title_text, secure_note)
                        animate_frame(1400)

                    def click_outside_frame():
                        animated_frame.place_forget()

                    def trash(secure_note_delete,event):
                        db.child("users").child(auth.current_user['localId']).child("secure notes").child(secure_note_delete).remove()
                        animated_frame.place_forget()
                        import time
                        time.sleep(0.4)
                        open_secure_note(1)

                    def create_main_frame(title_text, secure_note):            
                        frame1 = customtkinter.CTkFrame(main_frame, width=80, height=80, corner_radius=8)
                        frame1.place(relx=0.5, rely=0.1, anchor="center")

                        if len(title_text) == 1:
                            customtkinter.CTkLabel(master=frame1, text=title_text[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=title_text[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                        title1 = customtkinter.CTkLabel(main_frame, text=title_text, font=customtkinter.CTkFont(family="Roboto", size=18))
                        title1.place(relx=0.5, rely=0.21, anchor="center")
                        details_frame = customtkinter.CTkFrame(main_frame, width=600, fg_color="#383C43")

                        lines = round(len(secure_note)/50) * 53

                        final = lines + 130

                        details_frame.configure(height=final)

                        details_frame.place(x=300, y=300, anchor="center")
                        details_frame.propagate(False)

                        email_frame = customtkinter.CTkFrame(details_frame, width=600, height=100, corner_radius=0, fg_color="#383C43", bg_color="#383C43")
                        email_frame.pack(pady=(10,0))
                        email_frame.propagate(False)

                        email = customtkinter.CTkLabel(email_frame, text=secure_note,wraplength=320,justify="left",anchor="w", font=customtkinter.CTkFont(family="Roboto", size=18))
                        email.place(x=180, y=35)

                        secure_label = customtkinter.CTkLabel(email_frame, text="Secure Note", font=customtkinter.CTkFont(family="Roboto", size=18))
                        secure_label.pack(anchor="w", pady=40, padx=20)

                        trash_frame = customtkinter.CTkFrame(main_frame, width=160, height=80, corner_radius=8, fg_color="#383C43", cursor="hand2")
                        trash_frame.place(relx=0.38, rely=0.86)
                        trash_frame.propagate(False)
                        trash_frame.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))

                        trash_image = customtkinter.CTkLabel(master=trash_frame, text="",image=PhotoImage(file=folder_path+r"\delete.png"), font=customtkinter.CTkFont(family="Roboto", size=20))
                        trash_image.place(relx=0.41, rely=0.2)
                        trash_image.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))
                        
                        trash_label = customtkinter.CTkLabel(master=trash_frame, text="Trash", font=customtkinter.CTkFont(family="Roboto", size=15))
                        trash_label.place(relx=0.38, rely=0.55)
                        trash_label.bind("<Button-1>", lambda e, secure_note_delete=title_text: trash(secure_note_delete,event=e))

                        def effectively(event):
                            click_outside_frame()
                            details_frame.destroy()

                        close = customtkinter.CTkLabel(master=animated_frame, text="",image=PhotoImage(file=folder_path+r"\circle.png"),cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=20))
                        close.place(x=20, y=20)
                        close.bind("<Button-1>", effectively)


                    animated_frame = customtkinter.CTkFrame(root, width=780, height=700, corner_radius=0, fg_color="#282D34")
                    animated_frame.place(x=1400, y=0)
                    main_frame = customtkinter.CTkFrame(animated_frame, width=600, height=600, corner_radius=0, fg_color="#282D34")

                    add_password_frame2 = customtkinter.CTkScrollableFrame(password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=980, height=500)
                    add_password_frame2.place(relx=0.5, rely=0.58, anchor="center")

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("secure notes").get().val()

                    for service, service_info in data.items():
                        frame = customtkinter.CTkFrame(master=add_password_frame2, cursor="hand2")
                        frame.pack(fill="x", pady=10, padx=(50,60))
                        frame.configure(height=100)
                        frame.propagate(False)

                        icon_frame = customtkinter.CTkFrame(master=frame, width=70, height=70, fg_color="#212121")
                        icon_frame.pack(pady=10, padx=10, anchor="w")

                        title_label = customtkinter.CTkLabel(master=frame, text=service_info['title'], font=customtkinter.CTkFont(family="Roboto", size=18))
                        title_label.place(x=90, y=30)

                        frame.bind("<Button-1>", lambda event, title=service_info['title'], secure_note = service_info['secure note']: frame_click(event, title_text=title, secure_note=secure_note ))


                        customtkinter.CTkLabel(master=icon_frame, text="",image=PhotoImage(file=folder_path+r"\notebook.png"), font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                def open_add_secure_note(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    
                    add_secure_notes_main_frame.place(x=240,y=10)
                    add_password_frame = customtkinter.CTkFrame(add_secure_notes_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=600)
                    add_password_frame.place(relx=0.5, rely=0.5, anchor="center")



                    frame1 = customtkinter.CTkFrame(master=add_password_frame, width=70, height=70, fg_color="#1A1A1A")
                    frame1.pack(pady=(0,20))
                    frame1.propagate(False)

                    customtkinter.CTkLabel(master=frame1, text="",image=PhotoImage(file=folder_path+r"\notebook.png"), font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                    

                    def save_data(event):
                        title = title_entry.get()
                        secure_note_text = secure_note.get("1.0", "end-1c")
                        uid = auth.current_user['localId']

                        if title == "":
                            customtkinter.CTkLabel(master=add_password_frame, text='⚠ Please enter a title', font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#F95D68").place(x=10, y=145)
                            if len(title) >= 1:
                                warning.pack(padx=10, anchor="w")
                        else:
                            db.child("users").child(f"{uid}").child("secure notes").child(f"{title}").update({"title": title,"secure note": secure_note_text})
                            open_secure_note(1)

                    title_entry = customtkinter.CTkEntry(master=add_password_frame, placeholder_text="Title*", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    title_entry.pack(pady=2)

                    warning = customtkinter.CTkLabel(master=add_password_frame, text='*Required', font=customtkinter.CTkFont(family="Roboto", size=12))
                    warning.pack(padx=10, anchor="w")
                    
                    def on_focus_in(event):
                        if secure_note.get("1.0", "end-1c") == "Secure Note":
                            secure_note.delete("1.0", "end-1c")
                            secure_note.configure(text_color = "#D6D6D6")
                            
                    def on_focus_out(event):
                        if secure_note.get("1.0", "end-1c") == "":
                            secure_note.insert("1.0", "Secure Note")
                            secure_note.configure(text_color = "#899296")
                            
                    secure_note = customtkinter.CTkTextbox(add_password_frame, activate_scrollbars=True, font=customtkinter.CTkFont(family="Roboto", size=15), text_color="#899296", width=480, height=200, border_color="#565B5E", border_width=2)
                    secure_note.pack(pady=(50,10))
                    secure_note.insert("1.0", "Secure Note")

                    secure_note.bind("<FocusIn>", on_focus_in)
                    secure_note.bind("<FocusOut>", on_focus_out)
                    
                    save_button = customtkinter.CTkButton(master=add_password_frame, text="Save",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    save_button.pack()
                    save_button.bind("<Button-1>", save_data)

                def open_add_password(event, password_saved):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    
                    add_password_main_frame.place(x=240,y=10)
                    add_password_frame = customtkinter.CTkFrame(add_password_main_frame, bg_color="#1A1A1A", fg_color="#1A1A1A", width=500, height=600)
                    add_password_frame.place(relx=0.5, rely=0.5, anchor="center")
                    colors = ["#000080", "#4B0082", "#008080", "#990000", "#355E3B", "#636363", "#9370DB", "#C04000", "#8A9A5B"]
                    random_color = random.choice(colors)
                    frame1 = customtkinter.CTkFrame(master=add_password_frame, width=70, height=70, fg_color=random_color)

                    def open_generate_password_new(event):
                        def destroy_image(event):
                            image_button.place_forget()
                            generate_password_frame.place_forget()

                        x, y = root.winfo_rootx(), root.winfo_rooty()
                        w, h = root.winfo_width(), root.winfo_height()
                        screenshot = ImageGrab.grab(bbox=(x, y, x + w, y + h))
                        blurred_screenshot = screenshot.filter(ImageFilter.GaussianBlur(radius=2))
                        blurred_screenshot.save("screenshot.png")

                        button_image = customtkinter.CTkImage(Image.open("screenshot.png"), size=(1280, 700))
                        image_button = customtkinter.CTkLabel(master=root, text="",image=button_image)
                        image_button.place(relx=0.5, rely=0.5, anchor="center")
                        image_button.bind("<Button-1>", destroy_image)
                        


                        generate_password_frame = customtkinter.CTkFrame(root, width=300, height=600, fg_color="#282D34", corner_radius=8)
                        generate_password_frame.place(relx=0.38, rely=0.5, anchor="center")
                        generate_password_frame.place(x=240,y=10)

                        def update_string(event):
                            random_password = password.cget("text")
                            password_1.delete(0, "end")
                            password_1.insert(0, random_password)
                            destroy_image(event=1)

                        def slider_event(value):
                            caps = switch_var1.get() == "on"
                            digits = switch_var2.get() == "on"
                            symbols = switch_var3.get() == "on"

                            def generate_random_password(length):
                                characters = string.ascii_lowercase
                                if digits:
                                    characters += string.digits
                                if symbols:
                                    characters += "@!$%&*"

                                if caps:
                                    characters += string.ascii_uppercase

                                if not characters:
                                    return "Select at least one option"

                                password = ''.join(random.choice(characters) for _ in range(length))
                                return password

                            random_password = generate_random_password(round(value))
                            password.configure(text=random_password)
                            length_display.configure(text=round(value))

                

                        top_header = customtkinter.CTkFrame(generate_password_frame, height=50, corner_radius=0, fg_color="#282D34")
                        top_header.pack(fill="x", padx=5, pady=(5,0))
                        top_header.propagate(False)

                        customtkinter.CTkLabel(master=top_header, text='Password Generator', font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold")).place(relx=0.5, rely=0.5, anchor="center")


                        middle_body = customtkinter.CTkFrame(generate_password_frame, height=160, width=200, corner_radius=0, border_color="#383C43", border_width=1, fg_color="#151922")
                        middle_body.pack(fill="x")
                        middle_body.propagate(False)
                        middle_body.configure(width=350)

                        password = customtkinter.CTkLabel(master=middle_body, text='', wraplength=320,justify="left",anchor="w", font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold"))
                        password.place(x=15,y=10)

                        fill_password = customtkinter.CTkButton(master=middle_body, text="Fill Password", width=200, font=customtkinter.CTkFont(family="Roboto", size=19))
                        fill_password.configure(corner_radius=50, height=30)
                        fill_password.place(relx=0.5, rely=0.8, anchor="center")
                        fill_password.bind("<Button-1>", update_string)

                        middle_lower_body = customtkinter.CTkFrame(generate_password_frame, height=80, corner_radius=0, fg_color="#282D34",border_color="#383C43", border_width=1)
                        middle_lower_body.pack(fill="x")
                        middle_lower_body.propagate(False)

                        customtkinter.CTkLabel(master=middle_lower_body, text='Length', font=customtkinter.CTkFont(family="Roboto", size=19)).place(x=40,y=25)

                        slider = customtkinter.CTkSlider(middle_lower_body, from_=8, to=60, width=130, command=slider_event)
                        slider.set(8)
                        slider.place(x=130,y=30)

                        length_display = customtkinter.CTkLabel(master=middle_lower_body, text='55', font=customtkinter.CTkFont(family="Roboto", size=19))
                        length_display.place(x=280,y=25)

                        lower_body = customtkinter.CTkFrame(generate_password_frame,height=160, corner_radius=0, fg_color="#282D34",border_color="#383C43", border_width=1)
                        lower_body.pack(fill="x", pady=(0,5))
                        lower_body.propagate(False)

                        customtkinter.CTkLabel(master=lower_body, text='Use Capital Letter (A-Z)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=20)
                        switch_var1 = customtkinter.StringVar(value="on")
                        switch1 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var1, onvalue="on", offvalue="off")
                        switch1.place(x=260,y=20)

                        customtkinter.CTkLabel(master=lower_body, text='Use digits (0-9)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=60)
                        switch_var2 = customtkinter.StringVar(value="on")
                        switch2 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var2, onvalue="on", offvalue="off")
                        switch2.place(x=260,y=60)

                        customtkinter.CTkLabel(master=lower_body, text='Use symbols (@!$%&*)', font=customtkinter.CTkFont(family="Roboto", size=15)).place(x=30,y=100)
                        switch_var3 = customtkinter.StringVar(value="on")
                        switch3 = customtkinter.CTkSwitch(lower_body, text="",variable=switch_var3, onvalue="on", offvalue="off")
                        switch3.place(x=260,y=100)   



                        password_main_frame.winfo_toplevel().lift(password_main_frame)

                        slider_event(8)

                    def on_entry_change(event):
                        a = title_entry.get()
                        if len(a) == 1:
                            customtkinter.CTkLabel(master=frame1, text=a[:1], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")
                        else:
                            customtkinter.CTkLabel(master=frame1, text=a[:2], font=customtkinter.CTkFont(family="Roboto", size=20)).place(relx=0.5, rely=0.5, anchor="center")

                    def save_data(event):
                        title = title_entry.get()
                        username = Email_Username_entry.get()
                        password =  password_1.get()
                        webiste_url = website_address_entry.get()
                        uid = auth.current_user['localId']

                        if title == "":
                            customtkinter.CTkLabel(master=add_password_frame, text='⚠ Please enter a title', font=customtkinter.CTkFont(family="Roboto", size=12), text_color="#F95D68").place(x=10, y=145)
                            if len(title) >= 1:
                                warning.pack(padx=10, anchor="w")
                        else:
                            db.child("users").child(f"{uid}").child("passwords").child(f"{title}").update({"title": title,"username": username,"password": password,"website": webiste_url})
                            open_password(event=1)

                    frame1.pack(pady=(0,20))
                    frame1.propagate(False)


                    title_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Title*", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    title_entry.pack(pady=2)
                    title_entry.bind("<KeyRelease>", on_entry_change)

                    warning = customtkinter.CTkLabel(master=add_password_frame, text='* Required', font=customtkinter.CTkFont(family="Roboto", size=12))
                    warning.pack(padx=10, anchor="w")
                    
                    customtkinter.CTkLabel(master=add_password_frame, text='Login Details', font=customtkinter.CTkFont(family="Roboto", size=19, weight="bold")).pack(pady=(30,5),anchor="w")

                    Email_Username_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Email or Username", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    Email_Username_entry.pack(pady=8)

                    password_1 = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Password", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50, show="●" )
                    password_1.pack()

                    if password_saved == "":
                        pass
                    else:
                        password_1.insert(0, password_saved)


                    generate_label = customtkinter.CTkLabel(master=add_password_frame, text='Generate Password', font=customtkinter.CTkFont(family="Sans Seriff", size=14), text_color="#40AFAF", cursor="hand2")
                    generate_label.pack(anchor="e")
                    generate_label.bind("<Button-1>", open_generate_password_new)
                    
                    website_address_entry = customtkinter.CTkEntry(master=add_password_frame,placeholder_text="Website Address", font=customtkinter.CTkFont(family="Roboto", size=15), width=480, height=50 )
                    website_address_entry.pack(pady=50)   

                    save_button = customtkinter.CTkButton(master=add_password_frame, text="Save",font=customtkinter.CTkFont(family="Roboto", size=15), height=40, width=90, corner_radius=50, fg_color="#0C888D", hover_color="#0BA1A2")
                    save_button.pack()
                    save_button.bind("<Button-1>", save_data)

                def open_generate_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    generate_password_main_frame2.place_forget()
                    
                    generate_password_main_frame2.place(x=250,y=0)

                    def copy(event):
                        root.clipboard_clear()
                        root.clipboard_append(password.cget("text"))
                        copy_label.configure(text="Copied")
                        copy_text_frame.place(x=845, y=100)

                    def copy_leave(event):
                        copy_label.configure(text="Copy")
                        copy_text_frame.place_forget()

                    def copy_enter(event):
                        copy_text_frame.place(x=845, y=100)


                    def generate(event):
                        num_val = slider.get()
                        slider_event(num_val)
                        generate_text_frame.place(x=780, y=100)

                    def generate_leave(event):
                        generate_text_frame.place_forget()

                    def generate_enter(event):
                        generate_text_frame.place(x=780, y=100)

                    def add(event):
                        add_text_frame.place(x=730, y=100)
                        open_add_password(event=1, password_saved=password.cget("text"))

                    def add_leave(event):
                        add_text_frame.place_forget()

                    def add_enter(event):
                        add_text_frame.place(x=730, y=100)


                    title_frame = customtkinter.CTkFrame(generate_password_main_frame2,width=1030,height=80, fg_color="#262626", corner_radius=0)
                    title_frame.pack(fill="x")

                    customtkinter.CTkLabel(master=title_frame, text='Password Generator', font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold")).place(relx=0.5, rely=0.5, anchor="center")

                    generate_frame = customtkinter.CTkFrame(generate_password_main_frame2, width=1030, height=200, fg_color="#151922", corner_radius=0)
                    generate_frame.pack()    

                    copy_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\copy2.png"))
                    copy_button.place(x=850, y=140)
                    copy_button.bind("<Button-1>", copy)
                    copy_button.bind("<Leave>", copy_leave)
                    copy_button.bind("<Enter>", copy_enter)

                    generate_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\generate.png"))
                    generate_button.place(x=795, y=140)
                    generate_button.bind("<Button-1>", generate)
                    generate_button.bind("<Leave>", generate_leave)
                    generate_button.bind("<Enter>", generate_enter)

                    add_button = customtkinter.CTkLabel(master=generate_frame, text="",cursor="hand2", font=customtkinter.CTkFont(family="Roboto", size=15), image=PhotoImage(file=folder_path+r"\cross.png"))
                    add_button.place(x=740, y=140)
                    add_button.bind("<Button-1>", add)
                    add_button.bind("<Leave>", add_leave)
                    add_button.bind("<Enter>", add_enter)

                    password = customtkinter.CTkLabel(master=generate_frame, wraplength=800,justify="left",anchor="w",text='', font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    
                    copy_text_frame = customtkinter.CTkFrame(generate_frame, width=50, height=30, fg_color="#151922",corner_radius=10)
                    copy_text_frame.propagate(False)

                    copy_text_frame_inner = customtkinter.CTkFrame(copy_text_frame, fg_color="#262626",corner_radius=10)
                    copy_text_frame_inner.pack(fill='both', expand=True)

                    copy_label = customtkinter.CTkLabel(copy_text_frame_inner, text="Copy")
                    copy_label.pack()

                    generate_text_frame = customtkinter.CTkFrame(generate_frame, width=70, height=30, fg_color="#151922",corner_radius=10)
                    generate_text_frame.propagate(False)

                    generate_text_frame_inner = customtkinter.CTkFrame(generate_text_frame, fg_color="#262626",corner_radius=10)
                    generate_text_frame_inner.pack(fill='both', expand=True)

                    generate_label = customtkinter.CTkLabel(generate_text_frame_inner, text="Generate")
                    generate_label.pack()

                    add_text_frame = customtkinter.CTkFrame(generate_frame, width=50, height=30, fg_color="#151922",corner_radius=10)
                    add_text_frame.propagate(False)

                    add_text_frame_inner = customtkinter.CTkFrame(add_text_frame, fg_color="#262626",corner_radius=10)
                    add_text_frame_inner.pack(fill='both', expand=True)

                    add_label = customtkinter.CTkLabel(add_text_frame_inner, text="Save")
                    add_label.pack()

                    details_frame = customtkinter.CTkFrame(generate_password_main_frame2, width=1030, height=500, corner_radius=0)
                    length_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    length_display = customtkinter.CTkLabel(master=length_frame, text='8', font=customtkinter.CTkFont(family="Roboto", size=19))


                    def slider_event(value):
                        caps = switch_var1.get() == "on"
                        digits = switch_var2.get() == "on"
                        symbols = switch_var3.get() == "on"

                        def generate_random_password(length):
                            characters = string.ascii_lowercase
                            if digits:
                                characters += string.digits
                            if symbols:
                                characters += "@!$%&*"
                            if caps:
                                characters += string.ascii_uppercase
                            if not characters:
                                return "Select at least one option"

                            password = ''.join(random.choice(characters) for _ in range(length))
                            return password

                        random_password = generate_random_password(round(value))
                        password.configure(text=random_password)
                        length_display.configure(text=round(value))

                    password.place(x=115, y=40)

                    details_frame.pack()    
                    details_frame.propagate(False)

                    length_frame.pack()

                    length_display.place(x=860, y=38)

                    slider = customtkinter.CTkSlider(length_frame, from_=8, to=60, width=230, command=slider_event)
                    slider.set(8)
                    slider.place(x=610, y=42)

                    customtkinter.CTkLabel(master=length_frame, text='Length', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    caps_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    caps_frame.pack()

                    switch_var1 = customtkinter.StringVar(value="on")
                    switch1 = customtkinter.CTkSwitch(caps_frame, text="",variable=switch_var1, onvalue="on", offvalue="off",  switch_height=23, switch_width=45)
                    switch1.place(x=830, y=40)

                    customtkinter.CTkLabel(master=caps_frame, text='Use capital letter (A-Z)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    digits_frame = customtkinter.CTkFrame(details_frame, width=1030, height=100, fg_color="#262626", corner_radius=0)
                    digits_frame.pack()

                    switch_var2 = customtkinter.StringVar(value="on")
                    switch2 = customtkinter.CTkSwitch(digits_frame, text="",variable=switch_var2, onvalue="on", offvalue="off",  switch_height=23, switch_width=45)
                    switch2.place(x=830, y=40)

                    customtkinter.CTkLabel(master=digits_frame, text='Use digitis (0-9)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)

                    symbols_frame = customtkinter.CTkFrame(details_frame, width=1030, height=140, fg_color="#262626", corner_radius=0)
                    symbols_frame.pack()

                    switch_var3 = customtkinter.StringVar(value="on")
                    switch3 = customtkinter.CTkSwitch(symbols_frame, text="",variable=switch_var3, onvalue="on", offvalue="off", switch_height=23, switch_width=45)
                    switch3.place(x=830, y=40)

                    customtkinter.CTkLabel(master=symbols_frame, text='Use symbols (@!$%&*)', font=customtkinter.CTkFont(family="Roboto", size=18)).place(x=175, y=40)



                    slider_event(8)

                def open_check_password(event):
                    password_main_frame.place_forget()
                    add_password_main_frame.place_forget()
                    generate_password_main_frame.place_forget()
                    check_password_main_frame.place_forget()
                    check_password_main_frame.place(x=240,y=40)
                    check_password_main_frame.propagate(False)
                    generate_password_main_frame2.place_forget()

                    weak_password_count = 0
                    same_password = 0
                    pwned_passwords = 0

                    def is_strong_password(value):
                        if len(value) < 8:
                            return False

                        if not re.search(r'[A-Z]', value):
                            return False

                        if not re.search(r'[a-z]', value):
                            return False

                        if not re.search(r'[0-9]', value):
                            return False

                        if not re.search(r'[!@#$%^&*(),.?":{}|<>]', value):
                            return False

                        return True

                    data = db.child("users").child(f"{auth.current_user['localId']}").child("passwords").get().val()
                    if data == None:
                        frame1 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame1.pack(padx=20,pady=(20,10))
                        frame1.propagate(False)

                        shield = PhotoImage(file=folder_path+r"\shield.png")
                        shield = customtkinter.CTkLabel(master=frame1, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=shield)
                        shield.place(x=50,y=40)

                        text1 = customtkinter.CTkLabel(master=frame1, text="Weak Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=43)
                        
                        text2 = customtkinter.CTkLabel(master=frame1, text="Makes your accounts easier to brute force attacks", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=75)

                        text3 = customtkinter.CTkLabel(master=frame1, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        text3.place(x=70,y=110)

                        text4 = customtkinter.CTkLabel(master=frame1, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=118)

                        frame2 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame2.pack(padx=20,pady=10)
                        frame2.propagate(False)

                        copy = PhotoImage(file=folder_path+r"\copy.png")
                        copy = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                        copy.place(x=50,y=40)

                        text1 = customtkinter.CTkLabel(master=frame2, text="Reused Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=43)
                        
                        text2 = customtkinter.CTkLabel(master=frame2, text="Used for multiple accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=75)
                        
                        text3 = customtkinter.CTkLabel(master=frame2, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        text3.place(x=70,y=110)

                        text4 = customtkinter.CTkLabel(master=frame2, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=118)

                        frame3 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                        frame3.pack(padx=20,pady=10)
                        frame3.propagate(False)

                        breach = PhotoImage(file=folder_path+r"\breach.png")
                        breach = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=breach)
                        breach.place(x=50,y=30)

                        text1 = customtkinter.CTkLabel(master=frame3, text="Data Breach Scanner", text_color="#FF7E23",font=customtkinter.CTkFont(family="Roboto", size=29))
                        text1.place(x=120,y=33)
                        
                        text2 = customtkinter.CTkLabel(master=frame3, text="Find out which passwords were exposed", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                        text2.place(x=123,y=60)
                        
                        pwned = customtkinter.CTkLabel(master=frame3, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                        pwned.place(x=70,y=105)

                        text4 = customtkinter.CTkLabel(master=frame3, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                        text4.place(x=103,y=113)
                        
                        return


                    passwords = [value['password'] for value in data.values()]
                    passwords.sort()

                    for password in passwords:
                        if is_strong_password(password):
                            pass
                        else:
                            weak_password_count += 1

                    for x in range(len(passwords)):
                        a = passwords[x]
                        try:
                            b = passwords[x+1]
                        except:
                            break

                        if a == b:
                            same_password += 1

                    frame1 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame1.pack(padx=20,pady=(20,10))
                    frame1.propagate(False)

                    shield = PhotoImage(file=folder_path+r"\shield.png")
                    shield = customtkinter.CTkLabel(master=frame1, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=shield)
                    shield.place(x=50,y=40)

                    text1 = customtkinter.CTkLabel(master=frame1, text="Weak Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=43)
                    
                    text2 = customtkinter.CTkLabel(master=frame1, text="Makes your accounts easier to brute force attacks", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=75)
                    
                    text3 = customtkinter.CTkLabel(master=frame1, text=weak_password_count, text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    text3.place(x=70,y=110)

                    text4 = customtkinter.CTkLabel(master=frame1, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=118)

                    frame2 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame2.pack(padx=20,pady=10)
                    frame2.propagate(False)

                    copy = PhotoImage(file=folder_path+r"\copy.png")
                    copy = customtkinter.CTkLabel(master=frame2, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=copy)
                    copy.place(x=50,y=40)

                    text1 = customtkinter.CTkLabel(master=frame2, text="Reused Passwords", text_color="#F64F64",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=43)
                    
                    text2 = customtkinter.CTkLabel(master=frame2, text="Used for multiple accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=75)
                    
                    text3 = customtkinter.CTkLabel(master=frame2, text=same_password*2, text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    text3.place(x=70,y=110)

                    text4 = customtkinter.CTkLabel(master=frame2, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=118)

                    frame3 = customtkinter.CTkFrame(check_password_main_frame, width=900, height=180, fg_color="#212121", corner_radius=8, cursor="hand2")
                    frame3.pack(padx=20,pady=10)
                    frame3.propagate(False)

                    breach = PhotoImage(file=folder_path+r"\breach.png")
                    breach = customtkinter.CTkLabel(master=frame3, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=breach)
                    breach.place(x=50,y=30)

                    text1 = customtkinter.CTkLabel(master=frame3, text="Data Breach Scanner", text_color="#FF7E23",font=customtkinter.CTkFont(family="Roboto", size=29))
                    text1.place(x=120,y=33)
                    
                    text2 = customtkinter.CTkLabel(master=frame3, text="Find out which passwords were exposed", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=15))
                    text2.place(x=123,y=60)
                    
                    pwned = customtkinter.CTkLabel(master=frame3, text="0", text_color="white",font=customtkinter.CTkFont(family="Roboto", size=40, weight="bold"))
                    pwned.place(x=70,y=105)

                    text4 = customtkinter.CTkLabel(master=frame3, text="accounts", text_color="#95979C",font=customtkinter.CTkFont(family="Roboto", size=30, weight="bold"))
                    text4.place(x=103,y=113)

                    def check_password(password):
                        if pwnedpasswords.check(password):
                            return 1
                        else:
                            return 0

                    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
                        results = executor.map(check_password, passwords)
                    for result in results:
                        pwned_passwords += result
                    pwned.configure(text=pwned_passwords)


                passwords_frame = customtkinter.CTkFrame(master=categories_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                passwords_frame.grid(row=0, column=0, padx=0, pady=0, sticky="nsew")
                passwords_frame.bind("<Button-1>", open_password)

                passwords_image = PhotoImage(file=folder_path+r"\password.png")

                passwords_text = customtkinter.CTkLabel(master=passwords_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=passwords_image)
                passwords_text.grid(padx=(10, 3), pady=(0,2), sticky="w", column=0, row=0, ipadx=0)

                passwords_label = customtkinter.CTkLabel(master=passwords_frame, text='Passwords', font=customtkinter.CTkFont(family="Roboto", size=15))
                passwords_label.grid(padx=10, pady=(0,2), sticky="w", column=1, row=0, ipadx=0)
                passwords_label.bind("<Button-1>", open_password)


                secure_note_frame = customtkinter.CTkFrame(master=categories_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                secure_note_frame.grid(row=1, column=0, padx=0, pady=0, sticky="nsew")
                # secure_note_frame.bind("<Button-1>", open_secure_noteword)


                secure_note_image = PhotoImage(file=folder_path+r"\note.png")

                secure_note_text = customtkinter.CTkLabel(master=secure_note_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=secure_note_image)
                secure_note_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)

                secure_note_label = customtkinter.CTkLabel(master=secure_note_frame, text='Secure Notes', font=customtkinter.CTkFont(family="Roboto", size=15))
                secure_note_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                secure_note_label.bind("<Button-1>", open_secure_note)

                generate_pass_frame = customtkinter.CTkFrame(master=tools_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                generate_pass_frame.grid(row=2, column=0, padx=0, pady=0, sticky="nsew")
                generate_pass_frame.bind("<Button-1>", open_generate_password)

                generate_pass_image = PhotoImage(file=folder_path+r"\generate_password.png")

                generate_pass_text = customtkinter.CTkLabel(master=generate_pass_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=generate_pass_image)
                generate_pass_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)
                generate_pass_text.bind("<Button-1>", open_generate_password)

                generate_pass_label = customtkinter.CTkLabel(master=generate_pass_frame, text='Generate a password', font=customtkinter.CTkFont(family="Roboto", size=15))
                generate_pass_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                generate_pass_label.bind("<Button-1>", open_generate_password)

                check_pass_frame = customtkinter.CTkFrame(master=tools_frame, corner_radius=0, cursor="hand2", bg_color="#212121", fg_color="#212121")
                check_pass_frame.grid(row=3, column=0, padx=0, pady=0, sticky="nsew")
                check_pass_frame.bind("<Button-1>", open_check_password)

                check_pass_image = PhotoImage(file=folder_path+r'\heart.png')

                check_pass_text = customtkinter.CTkLabel(master=check_pass_frame, text="", font=customtkinter.CTkFont(family="Roboto", size=15), image=check_pass_image)
                check_pass_text.grid(padx=(10, 3), pady=7, sticky="w", column=0, row=0, ipadx=0)
                check_pass_text.bind("<Button-1>", open_check_password)

                check_pass_label = customtkinter.CTkLabel(master=check_pass_frame, text='Check password health', font=customtkinter.CTkFont(family="Roboto", size=15))
                check_pass_label.grid(padx=10, pady=7, sticky="w", column=1, row=0, ipadx=0)
                check_pass_label.bind("<Button-1>", open_check_password)

                line = Frame(left_sidebar, bg='#4d4d4d', width=1000, height=1)
                line.pack()

                tools = customtkinter.CTkFrame(master=left_sidebar, fg_color="#212121")
                tools.pack(anchor="w",pady=(5,0))

                tools_header = customtkinter.CTkLabel(master=tools, text="Tools", fg_color="#212121",  font=customtkinter.CTkFont(family="Roboto", size=15))
                tools_header.grid(row=0, column=0,padx=10 , pady=5)

                up_arrow = customtkinter.CTkLabel(master=tools, text="", image=PhotoImage(file=folder_path+r'\down-arrow.png'), fg_color="#212121", cursor="hand2")
                up_arrow.grid(row=0, column=1,padx=150)
                up_arrow.bind("<Button-1>", collapse_function_2)

                tools_frame.pack(padx=0, pady=5, anchor='nw')

                line = Frame(left_sidebar, bg='#4d4d4d', width=1000, height=1)
                line.pack()



                root.geometry("1280x700")

            global user
            user = auth.sign_in_with_email_and_password(email, password)

            check = auth.get_account_info(user['idToken'])['users'][0]['emailVerified']
            if check:
                pass
            else:
                email_alerts_verified.place(x=22, y=186)
                return

            password_alerts_login.place_forget()
            email_alerts_login.place_forget()
            login_page.place_forget()
            main_page.place_forget()
            main_page.pack_forget()

            response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                "idToken": user['idToken'],
            })
            response_data = response.json()

            profile_picture = response_data.get('photoUrl')

            if profile_picture == None:
                try:
                    name = auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']
                    print(name)
                    response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                        "idToken": user['idToken'],
                        "photoUrl": f"https://ui-avatars.com/api/?rounded=true&name={name_entry}&&size=40",
                    })

                    response = requests.get(auth.get_account_info(id_token=user['idToken'])['users'][0]['photoUrl'])
                    
                    with open("temp-profile.png", "wb") as f:
                        f.write(response.content)

                    main_code()
                except:
                    def set_name():
                        final_name = name_entry.get()
                        print(final_name)
                        response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                            "idToken": user['idToken'],
                            "displayName" : final_name
                        })

                    name_page = customtkinter.CTkFrame(root)
                    name_page.place(relx=0.5, rely=0.5, anchor="center")

                    customtkinter.CTkLabel(name_page, text="Set your Display Name", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=50, padx=20)

                    name_entry = customtkinter.CTkEntry(name_page, placeholder_text='Display Name', width=280, height=46)
                    name_entry.pack(pady=10, padx=20)

                    set_button_1 = customtkinter.CTkButton(name_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=20),corner_radius=50, height=46, width=280,command=set_name)
                    set_button_1.pack(pady=10, padx=20)

                    response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                        "idToken": user['idToken'],
                        "photoUrl": f"https://ui-avatars.com/api/?rounded=true&name={name_entry}&&size=40",
                    })

                    response = requests.get(auth.get_account_info(id_token=user['idToken'])['users'][0]['photoUrl'])
                    
                    with open("temp-profile.png", "wb") as f:
                        f.write(response.content)
                    
                    name_page.place_forget()
                    main_code()
            else:
                try:
                    name_1 = auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']
                    response = requests.get(f"https://ui-avatars.com/api/?rounded=true&name={name_1}&&size=40")
                except:
                    def set_name():
                        final_name = name_entry.get()
                        response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                            "idToken": user['idToken'],
                            "displayName" : final_name
                        })
                        name_page.place_forget()
                        name_1 = auth.get_account_info(id_token=user['idToken'])['users'][0]['displayName']
                        response = requests.get(f"https://ui-avatars.com/api/?rounded=true&name={name_1}&&size=40")

                        with open("temp-profile.png", "wb") as f:
                            f.write(response.content)
                            
                        main_code()

                    name_page = customtkinter.CTkFrame(root)
                    name_page.place(relx=0.5, rely=0.5, anchor="center")

                    customtkinter.CTkLabel(name_page, text="Set your Display Name", font=customtkinter.CTkFont(family="Rem", size=25)).pack(pady=50, padx=20)

                    name_entry = customtkinter.CTkEntry(name_page, placeholder_text='Display Name', width=280, height=46)
                    name_entry.pack(pady=10, padx=20)

                    set_button_1 = customtkinter.CTkButton(name_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=20),corner_radius=50, height=46, width=280,command=set_name)
                    set_button_1.pack(pady=10, padx=20)

                    response = requests.post("https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyDO9WgyHMwZwu3n5O2kt55AQ8HcRMYZcGc", headers={"Content-Type": "application/json"}, json={
                        "idToken": user['idToken'],
                        "photoUrl": f"https://ui-avatars.com/api/?rounded=true&name={name_entry}&&size=40",
                    })

                    response = requests.get(auth.get_account_info(id_token=user['idToken'])['users'][0]['photoUrl'])
                    
                    with open("temp-profile.png", "wb") as f:
                        f.write(response.content)
                
                
                with open("temp-profile.png", "wb") as f:
                    f.write(response.content)

                main_code()
                

        except requests.exceptions.HTTPError as e:
            print(str(e))
            if "INVALID_PASSWORD" in str(e):
                password_alerts_login.place(x=22, y=263)
            if "EMAIL_NOT_FOUND" in str(e):
                email_alerts_login.place(x=22, y=186)

def show_create_user():
    main_page.pack_forget()
    main_page.place_forget()
    login_page.place_forget()
    create_user_page.place(relx=0.5, rely=0.5, anchor="center")


def go_to_login_page(event):
    main_page.place_forget()
    create_user_page.place_forget()
    main_page.pack_forget()

    if event == "Created":
        verify_mail_alert.place(relx=0.5, rely=0.28, anchor="center")

    login_page.place(relx=0.5, rely=0.5, anchor="center")


def go_to_create_user_page(event):
    main_page.place_forget()
    main_page.pack_forget()
    login_page.place_forget()
    create_user_page.place(relx=0.5, rely=0.5, anchor="center")


customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("dark-blue")

root = customtkinter.CTk()
root.geometry("400x480")
# root.geometry("1280x700")
root.title("PassBank Password Manager")
root.resizable(False, False)

# ------------------------------------------------------------------------------------------------ Main Page ------------------------------------------------------------------------------------------------

main_page = customtkinter.CTkFrame(root)

image = PhotoImage(file=folder_path+r"\Logo.png")
Logo = customtkinter.CTkLabel(main_page, text="", height=20, width=20, image=image)
Logo.pack(pady=50, padx=10)

Welcome_Label = customtkinter.CTkLabel(main_page, text="Welcome to PassBank",
                                       font=customtkinter.CTkFont(family="Rem", size=25), corner_radius=50, height=46,
                                       width=260)
Welcome_Label.pack(pady=0, padx=20)

create_account_button = customtkinter.CTkButton(main_page, text="Create Account",
                                                font=customtkinter.CTkFont(family="Roboto", size=15), corner_radius=50,
                                                height=46, width=280, command=show_create_user)
create_account_button.pack(pady=15, padx=20)

login_button = customtkinter.CTkButton(main_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=15),
                                       corner_radius=50, height=46, width=280, command=show_login)
login_button.pack(pady=10, padx=20)

main_page.pack(padx=20, pady=20)

# ------------------------------------------------------------------------------------- Login User ------------------------------------------------------------------------------------------------

login_page = customtkinter.CTkFrame(root)

dashboard_label_1 = customtkinter.CTkLabel(login_page, text="Login", font=customtkinter.CTkFont(family="Rem", size=25))
dashboard_label_1.pack(pady=50, padx=20)

verify_mail_alert = customtkinter.CTkLabel(login_page, text="Please verify your email",font=customtkinter.CTkFont(family="Roboto", size=16), text_color="#696969")

email_entry = customtkinter.CTkEntry(login_page, placeholder_text='Email Address', width=280, height=46)
email_entry.pack(pady=10, padx=20)
email_alerts_login = customtkinter.CTkLabel(login_page, text="Email ID is not registered",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

email_alerts_verified = customtkinter.CTkLabel(login_page, text="Email ID is not verified",font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

password_entry = customtkinter.CTkEntry(login_page, placeholder_text='Password', width=280, height=46, show="●")
password_entry.pack(pady=20, padx=20)
password_alerts_login = customtkinter.CTkLabel(login_page, text="Wrong Password",
                                         font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

login_button_1 = customtkinter.CTkButton(login_page, text="Login", font=customtkinter.CTkFont(family="Roboto", size=20),
                                       corner_radius=50, height=46, width=280,command=login)
login_button_1.pack(pady=10, padx=20)

go_create_user_page = customtkinter.CTkLabel(login_page, text="Not Registered?", font=customtkinter.CTkFont(family="Rem", size=15),
                                       text_color="#306896", cursor="hand2")

go_create_user_page.pack(pady=10, padx=10)
go_create_user_page.bind("<Button-1>", go_to_create_user_page)


# ------------------------------------------------------------------------------------- Create User ------------------------------------------------------------------------------------------------


create_user_page = customtkinter.CTkFrame(root)

dashboard_label = customtkinter.CTkLabel(create_user_page, text="Create Account",
                                         font=customtkinter.CTkFont(family="Rem", size=25), cursor="hand2")
dashboard_label.pack(pady=50, padx=20)

email_entry_create = customtkinter.CTkEntry(create_user_page, placeholder_text='Email Address', width=280, height=46)
email_entry_create.pack(pady=10, padx=20)
email_alerts = customtkinter.CTkLabel(create_user_page, text="Email ID is invalid",
                                      font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

password_entry_create = customtkinter.CTkEntry(create_user_page, placeholder_text='Password', show="●", width=280,
                                               height=46)
password_entry_create.pack(pady=20, padx=20)
password_alerts = customtkinter.CTkLabel(create_user_page, text="Your password is too short",
                                         font=customtkinter.CTkFont(family="Roboto", size=13), text_color="#d42f2f")

login_button_2 = customtkinter.CTkButton(create_user_page, text="Sign Up",
                                       font=customtkinter.CTkFont(family="Roboto", size=20), corner_radius=50,
                                       height=46, width=280, command=create_user)
login_button_2.pack(pady=10, padx=20)

go_login_page = customtkinter.CTkLabel(create_user_page, text="Already Registered?",
                                       font=customtkinter.CTkFont(family="Rem", size=15), text_color="#306896",
                                       cursor="hand2")
go_login_page.pack(pady=10, padx=10)
go_login_page.bind("<Button-1>", go_to_login_page)
# ------------------------------------------------------------------------------------- Main UI ------------------------------------------------------------------------------------------------

root.mainloop()